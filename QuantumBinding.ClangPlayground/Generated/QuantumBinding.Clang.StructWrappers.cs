// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace QuantumBinding.Clang
{
    using System.Runtime.InteropServices;
    using QuantumBinding.Clang;
    using QuantumBinding.Clang.Interop;

    public partial class QBString : QBDisposableObject
    {
        public QBString()
        {
        }

        public QBString(QuantumBinding.Clang.Interop.CXString _internal)
        {
            Data = _internal.data;
            Private_flags = _internal.private_flags;
        }

        public System.IntPtr Data { get; set; }
        public uint Private_flags { get; set; }

        public QuantumBinding.Clang.Interop.CXString ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXString();
            _internal.data = Data;
            _internal.private_flags = Private_flags;
            return _internal;
        }
    }

    public partial class QBStringSet : QBDisposableObject
    {
        private StructReference refStrings;

        public QBStringSet()
        {
        }

        public QBStringSet(QuantumBinding.Clang.Interop.CXStringSet _internal)
        {
            Strings = new QBString(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXString>(_internal.Strings));
            Marshal.FreeHGlobal(_internal.Strings);
            Count = _internal.Count;
        }

        public QBString Strings { get; set; }
        public uint Count { get; set; }

        public QuantumBinding.Clang.Interop.CXStringSet ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXStringSet();
            refStrings?.Dispose();
            if (Strings != null)
            {
                var struct0 = Strings.ToInternal();
                refStrings = new StructReference(struct0);
                _internal.Strings = refStrings.Handle;
            }
            _internal.Count = Count;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refStrings?.Dispose();
        }

    }

    public partial class QBUnsavedFile : QBDisposableObject
    {
        private StringReference refFilename;

        private StringReference refContents;

        public QBUnsavedFile()
        {
        }

        public QBUnsavedFile(QuantumBinding.Clang.Interop.CXUnsavedFile _internal)
        {
            Filename = Marshal.PtrToStringAnsi(_internal.Filename);
            Contents = Marshal.PtrToStringAnsi(_internal.Contents);
            Length = _internal.Length;
        }

        public string Filename { get; set; }
        public string Contents { get; set; }
        public uint Length { get; set; }

        public QuantumBinding.Clang.Interop.CXUnsavedFile ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXUnsavedFile();
            refFilename?.Dispose();
            if (Filename != null)
            {
                refFilename = new StringReference(Filename, false);
                _internal.Filename = refFilename.Handle;
            }
            refContents?.Dispose();
            if (Contents != null)
            {
                refContents = new StringReference(Contents, false);
                _internal.Contents = refContents.Handle;
            }
            _internal.Length = Length;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refFilename?.Dispose();
            refContents?.Dispose();
        }

    }

    public partial class QBVersion
    {
        public QBVersion()
        {
        }

        public QBVersion(QuantumBinding.Clang.Interop.CXVersion _internal)
        {
            Major = _internal.Major;
            Minor = _internal.Minor;
            Subminor = _internal.Subminor;
        }

        public int Major { get; set; }
        public int Minor { get; set; }
        public int Subminor { get; set; }

        public QuantumBinding.Clang.Interop.CXVersion ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXVersion();
            _internal.Major = Major;
            _internal.Minor = Minor;
            _internal.Subminor = Subminor;
            return _internal;
        }
    }

    public partial class QBFileUniqueID
    {
        public QBFileUniqueID()
        {
        }

        public QBFileUniqueID(QuantumBinding.Clang.Interop.CXFileUniqueID _internal)
        {
            var tmpArr0 = new ulong[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr0[i] = _internal.data[i];
                }
            }
            Data = tmpArr0;
        }

        public ulong[] Data { get; set; }

        public QuantumBinding.Clang.Interop.CXFileUniqueID ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXFileUniqueID();
            if(Data != null)
            {
                if (Data.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(Data), "Array is out of bounds. Size should not be more than 3");

                var inputArray0 = Data;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.data[i] = inputArray0[i];
                        }
                    }
                }
            }
            return _internal;
        }
    }

    public partial class QBSourceLocation
    {
        public QBSourceLocation()
        {
        }

        public QBSourceLocation(QuantumBinding.Clang.Interop.CXSourceLocation _internal)
        {
            Ptr_data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Ptr_data[i] = _internal.ptr_data[i];
            }
            Int_data = _internal.int_data;
        }

        public System.IntPtr[] Ptr_data { get; set; }
        public uint Int_data { get; set; }

        public QuantumBinding.Clang.Interop.CXSourceLocation ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXSourceLocation();
            if(Ptr_data != null)
            {
                if (Ptr_data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Ptr_data), "Array is out of bounds. Size should not be more than 2");

                Ptr_data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.ptr_data[i] = Ptr_data[i];
                }
            }
            _internal.int_data = Int_data;
            return _internal;
        }
    }

    public partial class QBSourceRange
    {
        public QBSourceRange()
        {
        }

        public QBSourceRange(QuantumBinding.Clang.Interop.CXSourceRange _internal)
        {
            Ptr_data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Ptr_data[i] = _internal.ptr_data[i];
            }
            Begin_int_data = _internal.begin_int_data;
            End_int_data = _internal.end_int_data;
        }

        public System.IntPtr[] Ptr_data { get; set; }
        public uint Begin_int_data { get; set; }
        public uint End_int_data { get; set; }

        public QuantumBinding.Clang.Interop.CXSourceRange ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXSourceRange();
            if(Ptr_data != null)
            {
                if (Ptr_data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Ptr_data), "Array is out of bounds. Size should not be more than 2");

                Ptr_data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.ptr_data[i] = Ptr_data[i];
                }
            }
            _internal.begin_int_data = Begin_int_data;
            _internal.end_int_data = End_int_data;
            return _internal;
        }
    }

    public partial class QBSourceRangeList : QBDisposableObject
    {
        private StructReference refranges;

        public QBSourceRangeList()
        {
        }

        public QBSourceRangeList(QuantumBinding.Clang.Interop.CXSourceRangeList _internal)
        {
            Count = _internal.count;
            Ranges = new QBSourceRange(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXSourceRange>(_internal.ranges));
            Marshal.FreeHGlobal(_internal.ranges);
        }

        public uint Count { get; set; }
        public QBSourceRange Ranges { get; set; }

        public QuantumBinding.Clang.Interop.CXSourceRangeList ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXSourceRangeList();
            _internal.count = Count;
            refranges?.Dispose();
            if (Ranges != null)
            {
                var struct0 = Ranges.ToInternal();
                refranges = new StructReference(struct0);
                _internal.ranges = refranges.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refranges?.Dispose();
        }

    }

    public partial class QBTUResourceUsageEntry
    {
        public QBTUResourceUsageEntry()
        {
        }

        public QBTUResourceUsageEntry(QuantumBinding.Clang.Interop.CXTUResourceUsageEntry _internal)
        {
            Kind = (CXTUResourceUsageKind)_internal.kind;
            Amount = _internal.amount;
        }

        public CXTUResourceUsageKind Kind { get; set; }
        public uint Amount { get; set; }

        public QuantumBinding.Clang.Interop.CXTUResourceUsageEntry ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXTUResourceUsageEntry();
            _internal.kind = (uint)Kind;
            _internal.amount = Amount;
            return _internal;
        }
    }

    public partial class QBTUResourceUsage : QBDisposableObject
    {
        private StructReference refentries;

        public QBTUResourceUsage()
        {
        }

        public QBTUResourceUsage(QuantumBinding.Clang.Interop.CXTUResourceUsage _internal)
        {
            Data = _internal.data;
            NumEntries = _internal.numEntries;
            Entries = new QBTUResourceUsageEntry(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXTUResourceUsageEntry>(_internal.entries));
            Marshal.FreeHGlobal(_internal.entries);
        }

        public System.IntPtr Data { get; set; }
        public uint NumEntries { get; set; }
        public QBTUResourceUsageEntry Entries { get; set; }

        public QuantumBinding.Clang.Interop.CXTUResourceUsage ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXTUResourceUsage();
            _internal.data = Data;
            _internal.numEntries = NumEntries;
            refentries?.Dispose();
            if (Entries != null)
            {
                var struct0 = Entries.ToInternal();
                refentries = new StructReference(struct0);
                _internal.entries = refentries.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refentries?.Dispose();
        }

    }

    public partial class QBCursor
    {
        public QBCursor()
        {
        }

        public QBCursor(QuantumBinding.Clang.Interop.CXCursor _internal)
        {
            Kind = (CXCursorKind)_internal.kind;
            Xdata = _internal.xdata;
            Data = new System.IntPtr[3];
            for (int i = 0; i < 3; ++i)
            {
                Data[i] = _internal.data[i];
            }
        }

        public CXCursorKind Kind { get; set; }
        public int Xdata { get; set; }
        public System.IntPtr[] Data { get; set; }

        public QuantumBinding.Clang.Interop.CXCursor ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCursor();
            _internal.kind = (uint)Kind;
            _internal.xdata = Xdata;
            if(Data != null)
            {
                if (Data.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(Data), "Array is out of bounds. Size should not be more than 3");

                Data = new System.IntPtr[3];
                for (int i = 0; i < 3; ++i)
                {
                    _internal.data[i] = Data[i];
                }
            }
            return _internal;
        }
    }

    public partial class QBPlatformAvailability
    {
        public QBPlatformAvailability()
        {
        }

        public QBPlatformAvailability(QuantumBinding.Clang.Interop.CXPlatformAvailability _internal)
        {
            Platform = new QBString(_internal.Platform);
            Introduced = new QBVersion(_internal.Introduced);
            Deprecated = new QBVersion(_internal.Deprecated);
            Obsoleted = new QBVersion(_internal.Obsoleted);
            Unavailable = _internal.Unavailable;
            Message = new QBString(_internal.Message);
        }

        public QBString Platform { get; set; }
        public QBVersion Introduced { get; set; }
        public QBVersion Deprecated { get; set; }
        public QBVersion Obsoleted { get; set; }
        public int Unavailable { get; set; }
        public QBString Message { get; set; }

        public QuantumBinding.Clang.Interop.CXPlatformAvailability ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXPlatformAvailability();
            if (Platform != null)
            {
                _internal.Platform = Platform.ToInternal();
            }
            if (Introduced != null)
            {
                _internal.Introduced = Introduced.ToInternal();
            }
            if (Deprecated != null)
            {
                _internal.Deprecated = Deprecated.ToInternal();
            }
            if (Obsoleted != null)
            {
                _internal.Obsoleted = Obsoleted.ToInternal();
            }
            _internal.Unavailable = Unavailable;
            if (Message != null)
            {
                _internal.Message = Message.ToInternal();
            }
            return _internal;
        }
    }

    public partial class QBType
    {
        public QBType()
        {
        }

        public QBType(QuantumBinding.Clang.Interop.CXType _internal)
        {
            Kind = (CXTypeKind)_internal.kind;
            Data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Data[i] = _internal.data[i];
            }
        }

        public CXTypeKind Kind { get; set; }
        public System.IntPtr[] Data { get; set; }

        public QuantumBinding.Clang.Interop.CXType ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXType();
            _internal.kind = (uint)Kind;
            if(Data != null)
            {
                if (Data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Data), "Array is out of bounds. Size should not be more than 2");

                Data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.data[i] = Data[i];
                }
            }
            return _internal;
        }
    }

    public partial class QBToken : QBDisposableObject
    {
        public QBToken()
        {
        }

        public QBToken(QuantumBinding.Clang.Interop.CXToken _internal)
        {
            var tmpArr0 = new uint[4];
            unsafe
            {
                for (int i = 0; i < 4; ++i)
                {
                    tmpArr0[i] = _internal.int_data[i];
                }
            }
            Int_data = tmpArr0;
            Ptr_data = _internal.ptr_data;
        }

        public uint[] Int_data { get; set; }
        public System.IntPtr Ptr_data { get; set; }

        public QuantumBinding.Clang.Interop.CXToken ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXToken();
            if(Int_data != null)
            {
                if (Int_data.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Int_data), "Array is out of bounds. Size should not be more than 4");

                var inputArray0 = Int_data;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.int_data[i] = inputArray0[i];
                        }
                    }
                }
            }
            _internal.ptr_data = Ptr_data;
            return _internal;
        }
    }

    public partial class QBCompletionResult
    {
        public QBCompletionResult()
        {
        }

        public QBCompletionResult(QuantumBinding.Clang.Interop.CXCompletionResult _internal)
        {
            CursorKind = (CXCursorKind)_internal.CursorKind;
            CompletionString = new QBCompletionString(_internal.CompletionString);
        }

        public CXCursorKind CursorKind { get; set; }
        public QBCompletionString CompletionString { get; set; }

        public QuantumBinding.Clang.Interop.CXCompletionResult ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCompletionResult();
            _internal.CursorKind = (uint)CursorKind;
            _internal.CompletionString = CompletionString;
            return _internal;
        }
    }

    public partial class QBCodeCompleteResults : QBDisposableObject
    {
        private StructReference refResults;

        public QBCodeCompleteResults()
        {
        }

        public QBCodeCompleteResults(QuantumBinding.Clang.Interop.CXCodeCompleteResults _internal)
        {
            Results = new QBCompletionResult(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXCompletionResult>(_internal.Results));
            Marshal.FreeHGlobal(_internal.Results);
            NumResults = _internal.NumResults;
        }

        public QBCompletionResult Results { get; set; }
        public uint NumResults { get; set; }

        public QuantumBinding.Clang.Interop.CXCodeCompleteResults ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCodeCompleteResults();
            refResults?.Dispose();
            if (Results != null)
            {
                var struct0 = Results.ToInternal();
                refResults = new StructReference(struct0);
                _internal.Results = refResults.Handle;
            }
            _internal.NumResults = NumResults;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refResults?.Dispose();
        }

    }

    public partial class QBCursorAndRangeVisitor : QBDisposableObject
    {
        public QBCursorAndRangeVisitor()
        {
        }

        public QBCursorAndRangeVisitor(QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor _internal)
        {
            Context = _internal.context;
            Visit = _internal.visit;
        }

        public System.IntPtr Context { get; set; }
        public System.IntPtr Visit { get; set; }

        public QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor();
            _internal.context = Context;
            _internal.visit = Visit;
            return _internal;
        }
    }

    public partial class QBIdxLoc
    {
        public QBIdxLoc()
        {
        }

        public QBIdxLoc(QuantumBinding.Clang.Interop.CXIdxLoc _internal)
        {
            Ptr_data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Ptr_data[i] = _internal.ptr_data[i];
            }
            Int_data = _internal.int_data;
        }

        public System.IntPtr[] Ptr_data { get; set; }
        public uint Int_data { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxLoc ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxLoc();
            if(Ptr_data != null)
            {
                if (Ptr_data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Ptr_data), "Array is out of bounds. Size should not be more than 2");

                Ptr_data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.ptr_data[i] = Ptr_data[i];
                }
            }
            _internal.int_data = Int_data;
            return _internal;
        }
    }

    public partial class QBIdxIncludedFileInfo : QBDisposableObject
    {
        private StringReference reffilename;

        public QBIdxIncludedFileInfo()
        {
        }

        public QBIdxIncludedFileInfo(QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo _internal)
        {
            HashLoc = new QBIdxLoc(_internal.hashLoc);
            Filename = Marshal.PtrToStringAnsi(_internal.filename);
            File = new QBFile(_internal.file);
            IsImport = _internal.isImport;
            IsAngled = _internal.isAngled;
            IsModuleImport = _internal.isModuleImport;
        }

        public QBIdxLoc HashLoc { get; set; }
        public string Filename { get; set; }
        public QBFile File { get; set; }
        public int IsImport { get; set; }
        public int IsAngled { get; set; }
        public int IsModuleImport { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo();
            if (HashLoc != null)
            {
                _internal.hashLoc = HashLoc.ToInternal();
            }
            reffilename?.Dispose();
            if (Filename != null)
            {
                reffilename = new StringReference(Filename, false);
                _internal.filename = reffilename.Handle;
            }
            _internal.file = File;
            _internal.isImport = IsImport;
            _internal.isAngled = IsAngled;
            _internal.isModuleImport = IsModuleImport;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            reffilename?.Dispose();
        }

    }

    public partial class QBIdxImportedASTFileInfo
    {
        public QBIdxImportedASTFileInfo()
        {
        }

        public QBIdxImportedASTFileInfo(QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo _internal)
        {
            File = new QBFile(_internal.file);
            Module = new QBModule(_internal.module);
            Loc = new QBIdxLoc(_internal.loc);
            IsImplicit = _internal.isImplicit;
        }

        public QBFile File { get; set; }
        public QBModule Module { get; set; }
        public QBIdxLoc Loc { get; set; }
        public int IsImplicit { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo();
            _internal.file = File;
            _internal.module = Module;
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            _internal.isImplicit = IsImplicit;
            return _internal;
        }
    }

    public partial class QBIdxAttrInfo
    {
        public QBIdxAttrInfo()
        {
        }

        public QBIdxAttrInfo(QuantumBinding.Clang.Interop.CXIdxAttrInfo _internal)
        {
            Kind = (CXIdxAttrKind)_internal.kind;
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
        }

        public CXIdxAttrKind Kind { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxAttrInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxAttrInfo();
            _internal.kind = (uint)Kind;
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            return _internal;
        }
    }

    public partial class QBIdxEntityInfo : QBDisposableObject
    {
        private StringReference refname;

        private StringReference refUSR;

        private GCHandleReference refattributes;

        public QBIdxEntityInfo()
        {
        }

        public QBIdxEntityInfo(QuantumBinding.Clang.Interop.CXIdxEntityInfo _internal)
        {
            Kind = (CXIdxEntityKind)_internal.kind;
            TemplateKind = (CXIdxEntityCXXTemplateKind)_internal.templateKind;
            Lang = (CXIdxEntityLanguage)_internal.lang;
            Name = Marshal.PtrToStringAnsi(_internal.name);
            USR = Marshal.PtrToStringAnsi(_internal.USR);
            Cursor = new QBCursor(_internal.cursor);
            Attributes = new QBIdxAttrInfo[_internal.numAttributes];
            var nativeTmpArray0 = new CXIdxAttrInfo[_internal.numAttributes];
            MarshalUtils.IntPtrToManagedArray<CXIdxAttrInfo>(_internal.attributes, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Attributes[i] = new QBIdxAttrInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.attributes);
            NumAttributes = _internal.numAttributes;
        }

        public CXIdxEntityKind Kind { get; set; }
        public CXIdxEntityCXXTemplateKind TemplateKind { get; set; }
        public CXIdxEntityLanguage Lang { get; set; }
        public string Name { get; set; }
        public string USR { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxAttrInfo[] Attributes { get; set; }
        public uint NumAttributes { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxEntityInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxEntityInfo();
            _internal.kind = (uint)Kind;
            _internal.templateKind = (uint)TemplateKind;
            _internal.lang = (uint)Lang;
            refname?.Dispose();
            if (Name != null)
            {
                refname = new StringReference(Name, false);
                _internal.name = refname.Handle;
            }
            refUSR?.Dispose();
            if (USR != null)
            {
                refUSR = new StringReference(USR, false);
                _internal.USR = refUSR.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            refattributes?.Dispose();
            if (Attributes != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxAttrInfo[Attributes.Length];
                for (int i = 0; i < Attributes.Length; ++i)
                {
                    tmpArray0[i] = Attributes[i].ToInternal();
                }
                refattributes = new GCHandleReference(tmpArray0);
                _internal.attributes = refattributes.Handle;
            }
            _internal.numAttributes = NumAttributes;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refname?.Dispose();
            refUSR?.Dispose();
            refattributes?.Dispose();
        }

    }

    public partial class QBIdxContainerInfo
    {
        public QBIdxContainerInfo()
        {
        }

        public QBIdxContainerInfo(QuantumBinding.Clang.Interop.CXIdxContainerInfo _internal)
        {
            Cursor = new QBCursor(_internal.cursor);
        }

        public QBCursor Cursor { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxContainerInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxContainerInfo();
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            return _internal;
        }
    }

    public partial class QBIdxIBOutletCollectionAttrInfo : QBDisposableObject
    {
        private StructReference refattrInfo;

        private StructReference refobjcClass;

        public QBIdxIBOutletCollectionAttrInfo()
        {
        }

        public QBIdxIBOutletCollectionAttrInfo(QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo _internal)
        {
            AttrInfo = new QBIdxAttrInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxAttrInfo>(_internal.attrInfo));
            Marshal.FreeHGlobal(_internal.attrInfo);
            ObjcClass = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.objcClass));
            Marshal.FreeHGlobal(_internal.objcClass);
            ClassCursor = new QBCursor(_internal.classCursor);
            ClassLoc = new QBIdxLoc(_internal.classLoc);
        }

        public QBIdxAttrInfo AttrInfo { get; set; }
        public QBIdxEntityInfo ObjcClass { get; set; }
        public QBCursor ClassCursor { get; set; }
        public QBIdxLoc ClassLoc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo();
            refattrInfo?.Dispose();
            if (AttrInfo != null)
            {
                var struct0 = AttrInfo.ToInternal();
                refattrInfo = new StructReference(struct0);
                _internal.attrInfo = refattrInfo.Handle;
            }
            refobjcClass?.Dispose();
            if (ObjcClass != null)
            {
                var struct1 = ObjcClass.ToInternal();
                refobjcClass = new StructReference(struct1);
                _internal.objcClass = refobjcClass.Handle;
            }
            if (ClassCursor != null)
            {
                _internal.classCursor = ClassCursor.ToInternal();
            }
            if (ClassLoc != null)
            {
                _internal.classLoc = ClassLoc.ToInternal();
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refattrInfo?.Dispose();
            refobjcClass?.Dispose();
        }

    }

    public partial class QBIdxDeclInfo : QBDisposableObject
    {
        private StructReference refentityInfo;

        private StructReference refsemanticContainer;

        private StructReference reflexicalContainer;

        private StructReference refdeclAsContainer;

        private GCHandleReference refattributes;

        public QBIdxDeclInfo()
        {
        }

        public QBIdxDeclInfo(QuantumBinding.Clang.Interop.CXIdxDeclInfo _internal)
        {
            EntityInfo = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.entityInfo));
            Marshal.FreeHGlobal(_internal.entityInfo);
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
            SemanticContainer = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.semanticContainer));
            Marshal.FreeHGlobal(_internal.semanticContainer);
            LexicalContainer = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.lexicalContainer));
            Marshal.FreeHGlobal(_internal.lexicalContainer);
            IsRedeclaration = _internal.isRedeclaration;
            IsDefinition = _internal.isDefinition;
            IsContainer = _internal.isContainer;
            DeclAsContainer = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.declAsContainer));
            Marshal.FreeHGlobal(_internal.declAsContainer);
            IsImplicit = _internal.isImplicit;
            Attributes = new QBIdxAttrInfo[_internal.numAttributes];
            var nativeTmpArray0 = new CXIdxAttrInfo[_internal.numAttributes];
            MarshalUtils.IntPtrToManagedArray<CXIdxAttrInfo>(_internal.attributes, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Attributes[i] = new QBIdxAttrInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.attributes);
            NumAttributes = _internal.numAttributes;
            Flags = _internal.flags;
        }

        public QBIdxEntityInfo EntityInfo { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }
        public QBIdxContainerInfo SemanticContainer { get; set; }
        public QBIdxContainerInfo LexicalContainer { get; set; }
        public int IsRedeclaration { get; set; }
        public int IsDefinition { get; set; }
        public int IsContainer { get; set; }
        public QBIdxContainerInfo DeclAsContainer { get; set; }
        public int IsImplicit { get; set; }
        public QBIdxAttrInfo[] Attributes { get; set; }
        public uint NumAttributes { get; set; }
        public uint Flags { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxDeclInfo();
            refentityInfo?.Dispose();
            if (EntityInfo != null)
            {
                var struct0 = EntityInfo.ToInternal();
                refentityInfo = new StructReference(struct0);
                _internal.entityInfo = refentityInfo.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            refsemanticContainer?.Dispose();
            if (SemanticContainer != null)
            {
                var struct1 = SemanticContainer.ToInternal();
                refsemanticContainer = new StructReference(struct1);
                _internal.semanticContainer = refsemanticContainer.Handle;
            }
            reflexicalContainer?.Dispose();
            if (LexicalContainer != null)
            {
                var struct2 = LexicalContainer.ToInternal();
                reflexicalContainer = new StructReference(struct2);
                _internal.lexicalContainer = reflexicalContainer.Handle;
            }
            _internal.isRedeclaration = IsRedeclaration;
            _internal.isDefinition = IsDefinition;
            _internal.isContainer = IsContainer;
            refdeclAsContainer?.Dispose();
            if (DeclAsContainer != null)
            {
                var struct3 = DeclAsContainer.ToInternal();
                refdeclAsContainer = new StructReference(struct3);
                _internal.declAsContainer = refdeclAsContainer.Handle;
            }
            _internal.isImplicit = IsImplicit;
            refattributes?.Dispose();
            if (Attributes != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxAttrInfo[Attributes.Length];
                for (int i = 0; i < Attributes.Length; ++i)
                {
                    tmpArray0[i] = Attributes[i].ToInternal();
                }
                refattributes = new GCHandleReference(tmpArray0);
                _internal.attributes = refattributes.Handle;
            }
            _internal.numAttributes = NumAttributes;
            _internal.flags = Flags;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refentityInfo?.Dispose();
            refsemanticContainer?.Dispose();
            reflexicalContainer?.Dispose();
            refdeclAsContainer?.Dispose();
            refattributes?.Dispose();
        }

    }

    public partial class QBIdxObjCContainerDeclInfo : QBDisposableObject
    {
        private StructReference refdeclInfo;

        public QBIdxObjCContainerDeclInfo()
        {
        }

        public QBIdxObjCContainerDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo _internal)
        {
            DeclInfo = new QBIdxDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxDeclInfo>(_internal.declInfo));
            Marshal.FreeHGlobal(_internal.declInfo);
            Kind = (CXIdxObjCContainerKind)_internal.kind;
        }

        public QBIdxDeclInfo DeclInfo { get; set; }
        public CXIdxObjCContainerKind Kind { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo();
            refdeclInfo?.Dispose();
            if (DeclInfo != null)
            {
                var struct0 = DeclInfo.ToInternal();
                refdeclInfo = new StructReference(struct0);
                _internal.declInfo = refdeclInfo.Handle;
            }
            _internal.kind = (uint)Kind;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdeclInfo?.Dispose();
        }

    }

    public partial class QBIdxBaseClassInfo : QBDisposableObject
    {
        private StructReference refbase;

        public QBIdxBaseClassInfo()
        {
        }

        public QBIdxBaseClassInfo(QuantumBinding.Clang.Interop.CXIdxBaseClassInfo _internal)
        {
            Base = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.@base));
            Marshal.FreeHGlobal(_internal.@base);
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
        }

        public QBIdxEntityInfo Base { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxBaseClassInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxBaseClassInfo();
            refbase?.Dispose();
            if (Base != null)
            {
                var struct0 = Base.ToInternal();
                refbase = new StructReference(struct0);
                _internal.@base = refbase.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refbase?.Dispose();
        }

    }

    public partial class QBIdxObjCProtocolRefInfo : QBDisposableObject
    {
        private StructReference refprotocol;

        public QBIdxObjCProtocolRefInfo()
        {
        }

        public QBIdxObjCProtocolRefInfo(QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo _internal)
        {
            Protocol = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.protocol));
            Marshal.FreeHGlobal(_internal.protocol);
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
        }

        public QBIdxEntityInfo Protocol { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo();
            refprotocol?.Dispose();
            if (Protocol != null)
            {
                var struct0 = Protocol.ToInternal();
                refprotocol = new StructReference(struct0);
                _internal.protocol = refprotocol.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refprotocol?.Dispose();
        }

    }

    public partial class QBIdxObjCProtocolRefListInfo : QBDisposableObject
    {
        private GCHandleReference refprotocols;

        public QBIdxObjCProtocolRefListInfo()
        {
        }

        public QBIdxObjCProtocolRefListInfo(QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo _internal)
        {
            Protocols = new QBIdxObjCProtocolRefInfo[_internal.numProtocols];
            var nativeTmpArray0 = new CXIdxObjCProtocolRefInfo[_internal.numProtocols];
            MarshalUtils.IntPtrToManagedArray<CXIdxObjCProtocolRefInfo>(_internal.protocols, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Protocols[i] = new QBIdxObjCProtocolRefInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.protocols);
            NumProtocols = _internal.numProtocols;
        }

        public QBIdxObjCProtocolRefInfo[] Protocols { get; set; }
        public uint NumProtocols { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo();
            refprotocols?.Dispose();
            if (Protocols != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo[Protocols.Length];
                for (int i = 0; i < Protocols.Length; ++i)
                {
                    tmpArray0[i] = Protocols[i].ToInternal();
                }
                refprotocols = new GCHandleReference(tmpArray0);
                _internal.protocols = refprotocols.Handle;
            }
            _internal.numProtocols = NumProtocols;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refprotocols?.Dispose();
        }

    }

    public partial class QBIdxObjCInterfaceDeclInfo : QBDisposableObject
    {
        private StructReference refcontainerInfo;

        private StructReference refsuperInfo;

        private StructReference refprotocols;

        public QBIdxObjCInterfaceDeclInfo()
        {
        }

        public QBIdxObjCInterfaceDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo _internal)
        {
            ContainerInfo = new QBIdxObjCContainerDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo>(_internal.containerInfo));
            Marshal.FreeHGlobal(_internal.containerInfo);
            SuperInfo = new QBIdxBaseClassInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxBaseClassInfo>(_internal.superInfo));
            Marshal.FreeHGlobal(_internal.superInfo);
            Protocols = new QBIdxObjCProtocolRefListInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo>(_internal.protocols));
            Marshal.FreeHGlobal(_internal.protocols);
        }

        public QBIdxObjCContainerDeclInfo ContainerInfo { get; set; }
        public QBIdxBaseClassInfo SuperInfo { get; set; }
        public QBIdxObjCProtocolRefListInfo Protocols { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo();
            refcontainerInfo?.Dispose();
            if (ContainerInfo != null)
            {
                var struct0 = ContainerInfo.ToInternal();
                refcontainerInfo = new StructReference(struct0);
                _internal.containerInfo = refcontainerInfo.Handle;
            }
            refsuperInfo?.Dispose();
            if (SuperInfo != null)
            {
                var struct1 = SuperInfo.ToInternal();
                refsuperInfo = new StructReference(struct1);
                _internal.superInfo = refsuperInfo.Handle;
            }
            refprotocols?.Dispose();
            if (Protocols != null)
            {
                var struct2 = Protocols.ToInternal();
                refprotocols = new StructReference(struct2);
                _internal.protocols = refprotocols.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refcontainerInfo?.Dispose();
            refsuperInfo?.Dispose();
            refprotocols?.Dispose();
        }

    }

    public partial class QBIdxObjCCategoryDeclInfo : QBDisposableObject
    {
        private StructReference refcontainerInfo;

        private StructReference refobjcClass;

        private StructReference refprotocols;

        public QBIdxObjCCategoryDeclInfo()
        {
        }

        public QBIdxObjCCategoryDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo _internal)
        {
            ContainerInfo = new QBIdxObjCContainerDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo>(_internal.containerInfo));
            Marshal.FreeHGlobal(_internal.containerInfo);
            ObjcClass = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.objcClass));
            Marshal.FreeHGlobal(_internal.objcClass);
            ClassCursor = new QBCursor(_internal.classCursor);
            ClassLoc = new QBIdxLoc(_internal.classLoc);
            Protocols = new QBIdxObjCProtocolRefListInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo>(_internal.protocols));
            Marshal.FreeHGlobal(_internal.protocols);
        }

        public QBIdxObjCContainerDeclInfo ContainerInfo { get; set; }
        public QBIdxEntityInfo ObjcClass { get; set; }
        public QBCursor ClassCursor { get; set; }
        public QBIdxLoc ClassLoc { get; set; }
        public QBIdxObjCProtocolRefListInfo Protocols { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo();
            refcontainerInfo?.Dispose();
            if (ContainerInfo != null)
            {
                var struct0 = ContainerInfo.ToInternal();
                refcontainerInfo = new StructReference(struct0);
                _internal.containerInfo = refcontainerInfo.Handle;
            }
            refobjcClass?.Dispose();
            if (ObjcClass != null)
            {
                var struct1 = ObjcClass.ToInternal();
                refobjcClass = new StructReference(struct1);
                _internal.objcClass = refobjcClass.Handle;
            }
            if (ClassCursor != null)
            {
                _internal.classCursor = ClassCursor.ToInternal();
            }
            if (ClassLoc != null)
            {
                _internal.classLoc = ClassLoc.ToInternal();
            }
            refprotocols?.Dispose();
            if (Protocols != null)
            {
                var struct2 = Protocols.ToInternal();
                refprotocols = new StructReference(struct2);
                _internal.protocols = refprotocols.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refcontainerInfo?.Dispose();
            refobjcClass?.Dispose();
            refprotocols?.Dispose();
        }

    }

    public partial class QBIdxObjCPropertyDeclInfo : QBDisposableObject
    {
        private StructReference refdeclInfo;

        private StructReference refgetter;

        private StructReference refsetter;

        public QBIdxObjCPropertyDeclInfo()
        {
        }

        public QBIdxObjCPropertyDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo _internal)
        {
            DeclInfo = new QBIdxDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxDeclInfo>(_internal.declInfo));
            Marshal.FreeHGlobal(_internal.declInfo);
            Getter = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.getter));
            Marshal.FreeHGlobal(_internal.getter);
            Setter = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.setter));
            Marshal.FreeHGlobal(_internal.setter);
        }

        public QBIdxDeclInfo DeclInfo { get; set; }
        public QBIdxEntityInfo Getter { get; set; }
        public QBIdxEntityInfo Setter { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo();
            refdeclInfo?.Dispose();
            if (DeclInfo != null)
            {
                var struct0 = DeclInfo.ToInternal();
                refdeclInfo = new StructReference(struct0);
                _internal.declInfo = refdeclInfo.Handle;
            }
            refgetter?.Dispose();
            if (Getter != null)
            {
                var struct1 = Getter.ToInternal();
                refgetter = new StructReference(struct1);
                _internal.getter = refgetter.Handle;
            }
            refsetter?.Dispose();
            if (Setter != null)
            {
                var struct2 = Setter.ToInternal();
                refsetter = new StructReference(struct2);
                _internal.setter = refsetter.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdeclInfo?.Dispose();
            refgetter?.Dispose();
            refsetter?.Dispose();
        }

    }

    public partial class QBIdxCXXClassDeclInfo : QBDisposableObject
    {
        private StructReference refdeclInfo;

        private GCHandleReference refbases;

        public QBIdxCXXClassDeclInfo()
        {
        }

        public QBIdxCXXClassDeclInfo(QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo _internal)
        {
            DeclInfo = new QBIdxDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxDeclInfo>(_internal.declInfo));
            Marshal.FreeHGlobal(_internal.declInfo);
            Bases = new QBIdxBaseClassInfo[_internal.numBases];
            var nativeTmpArray0 = new CXIdxBaseClassInfo[_internal.numBases];
            MarshalUtils.IntPtrToManagedArray<CXIdxBaseClassInfo>(_internal.bases, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Bases[i] = new QBIdxBaseClassInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.bases);
            NumBases = _internal.numBases;
        }

        public QBIdxDeclInfo DeclInfo { get; set; }
        public QBIdxBaseClassInfo[] Bases { get; set; }
        public uint NumBases { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo();
            refdeclInfo?.Dispose();
            if (DeclInfo != null)
            {
                var struct0 = DeclInfo.ToInternal();
                refdeclInfo = new StructReference(struct0);
                _internal.declInfo = refdeclInfo.Handle;
            }
            refbases?.Dispose();
            if (Bases != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxBaseClassInfo[Bases.Length];
                for (int i = 0; i < Bases.Length; ++i)
                {
                    tmpArray0[i] = Bases[i].ToInternal();
                }
                refbases = new GCHandleReference(tmpArray0);
                _internal.bases = refbases.Handle;
            }
            _internal.numBases = NumBases;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdeclInfo?.Dispose();
            refbases?.Dispose();
        }

    }

    public partial class QBIdxEntityRefInfo : QBDisposableObject
    {
        private StructReference refreferencedEntity;

        private StructReference refparentEntity;

        private StructReference refcontainer;

        public QBIdxEntityRefInfo()
        {
        }

        public QBIdxEntityRefInfo(QuantumBinding.Clang.Interop.CXIdxEntityRefInfo _internal)
        {
            Kind = (CXIdxEntityRefKind)_internal.kind;
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
            ReferencedEntity = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.referencedEntity));
            Marshal.FreeHGlobal(_internal.referencedEntity);
            ParentEntity = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.parentEntity));
            Marshal.FreeHGlobal(_internal.parentEntity);
            Container = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.container));
            Marshal.FreeHGlobal(_internal.container);
            Role = (CXSymbolRole)_internal.role;
        }

        public CXIdxEntityRefKind Kind { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }
        public QBIdxEntityInfo ReferencedEntity { get; set; }
        public QBIdxEntityInfo ParentEntity { get; set; }
        public QBIdxContainerInfo Container { get; set; }
        public CXSymbolRole Role { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxEntityRefInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxEntityRefInfo();
            _internal.kind = (uint)Kind;
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            refreferencedEntity?.Dispose();
            if (ReferencedEntity != null)
            {
                var struct0 = ReferencedEntity.ToInternal();
                refreferencedEntity = new StructReference(struct0);
                _internal.referencedEntity = refreferencedEntity.Handle;
            }
            refparentEntity?.Dispose();
            if (ParentEntity != null)
            {
                var struct1 = ParentEntity.ToInternal();
                refparentEntity = new StructReference(struct1);
                _internal.parentEntity = refparentEntity.Handle;
            }
            refcontainer?.Dispose();
            if (Container != null)
            {
                var struct2 = Container.ToInternal();
                refcontainer = new StructReference(struct2);
                _internal.container = refcontainer.Handle;
            }
            _internal.role = (uint)Role;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refreferencedEntity?.Dispose();
            refparentEntity?.Dispose();
            refcontainer?.Dispose();
        }

    }

    public partial class IndexerCallbacks : QBDisposableObject
    {
        public IndexerCallbacks()
        {
        }

        public IndexerCallbacks(QuantumBinding.Clang.Interop.IndexerCallbacks _internal)
        {
            AbortQuery = _internal.abortQuery;
            Diagnostic = _internal.diagnostic;
            EnteredMainFile = _internal.enteredMainFile;
            PpIncludedFile = _internal.ppIncludedFile;
            ImportedASTFile = _internal.importedASTFile;
            StartedTranslationUnit = _internal.startedTranslationUnit;
            IndexDeclaration = _internal.indexDeclaration;
            IndexEntityReference = _internal.indexEntityReference;
        }

        public System.IntPtr AbortQuery { get; set; }
        public System.IntPtr Diagnostic { get; set; }
        public System.IntPtr EnteredMainFile { get; set; }
        public System.IntPtr PpIncludedFile { get; set; }
        public System.IntPtr ImportedASTFile { get; set; }
        public System.IntPtr StartedTranslationUnit { get; set; }
        public System.IntPtr IndexDeclaration { get; set; }
        public System.IntPtr IndexEntityReference { get; set; }

        public QuantumBinding.Clang.Interop.IndexerCallbacks ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.IndexerCallbacks();
            _internal.abortQuery = AbortQuery;
            _internal.diagnostic = Diagnostic;
            _internal.enteredMainFile = EnteredMainFile;
            _internal.ppIncludedFile = PpIncludedFile;
            _internal.importedASTFile = ImportedASTFile;
            _internal.startedTranslationUnit = StartedTranslationUnit;
            _internal.indexDeclaration = IndexDeclaration;
            _internal.indexEntityReference = IndexEntityReference;
            return _internal;
        }
    }

    public partial class QBComment : QBDisposableObject
    {
        public QBComment()
        {
        }

        public QBComment(QuantumBinding.Clang.Interop.CXComment _internal)
        {
            ASTNode = _internal.ASTNode;
            TranslationUnit = new QBTranslationUnit(_internal.TranslationUnit);
        }

        public System.IntPtr ASTNode { get; set; }
        public QBTranslationUnit TranslationUnit { get; set; }

        public QuantumBinding.Clang.Interop.CXComment ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXComment();
            _internal.ASTNode = ASTNode;
            _internal.TranslationUnit = TranslationUnit;
            return _internal;
        }
    }


}
