// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace QuantumBinding.Clang.Interop
{
    using System.Security;
    using System;
    using System.Runtime.InteropServices;
    using QuantumBinding.Clang;

    public static class ClangInterop
    {
        public const string LibraryPath = "libclang";

        ///<summary>
        /// Annotate the given set of tokens by providing cursors for each token that can be mapped to a specific entity within the abstract syntax tree.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_annotateTokens", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_annotateTokens([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] QuantumBinding.Clang.Interop.CXToken[] Tokens, [In] uint NumTokens, [In, Out] ref System.IntPtr Cursors);

        ///<summary>
        /// Returns text of the specified word-like argument.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_BlockCommandComment_getArgText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_BlockCommandComment_getArgText([In] QuantumBinding.Clang.Interop.CXComment Comment, [In] uint ArgIdx);

        ///<summary>
        /// Returns name of the block command.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_BlockCommandComment_getCommandName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_BlockCommandComment_getCommandName([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns number of word-like arguments.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_BlockCommandComment_getNumArgs", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_BlockCommandComment_getNumArgs([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns paragraph argument of the block command.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_BlockCommandComment_getParagraph", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXComment clang_BlockCommandComment_getParagraph([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Perform code completion at a given location in a translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteAt", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCodeCompleteResults clang_codeCompleteAt([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string complete_filename, [In] uint complete_line, [In] uint complete_column, [In] System.IntPtr unsaved_files, [In] uint num_unsaved_files, [In] uint options);

        ///<summary>
        /// Returns the cursor kind for the container for the current code completion context. The container is only guaranteed to be set for contexts where a container exists (i.e. member accesses or Objective-C message sends); if there is not a container, this function will return CXCursor_InvalidCode.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteGetContainerKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursorKind clang_codeCompleteGetContainerKind([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results, [Out] out uint IsIncomplete);

        ///<summary>
        /// Returns the USR for the container for the current code completion context. If there is not a container for the current context, this function will return the empty string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteGetContainerUSR", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_codeCompleteGetContainerUSR([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results);

        ///<summary>
        /// Determines what completions are appropriate for the context the given code completion.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteGetContexts", CallingConvention = CallingConvention.Cdecl)]
        internal static extern ulong clang_codeCompleteGetContexts([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results);

        ///<summary>
        /// Retrieve a diagnostic associated with the given code completion.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteGetDiagnostic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnostic clang_codeCompleteGetDiagnostic([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results, [In] uint Index);

        ///<summary>
        /// Determine the number of diagnostics produced prior to the location where code completion was performed.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteGetNumDiagnostics", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_codeCompleteGetNumDiagnostics([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results);

        ///<summary>
        /// Returns the currently-entered selector for an Objective-C message send, formatted like "initWithFoo:bar:". Only guaranteed to return a non-empty string for CXCompletionContext_ObjCInstanceMessage and CXCompletionContext_ObjCClassMessage.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_codeCompleteGetObjCSelector", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_codeCompleteGetObjCSelector([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results);

        ///<summary>
        /// Returns the specified child of the AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Comment_getChild", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXComment clang_Comment_getChild([In] QuantumBinding.Clang.Interop.CXComment Comment, [In] uint ChildIdx);

        ///<summary>
        /// Returns the type of the AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Comment_getKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCommentKind clang_Comment_getKind([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns number of children of the AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Comment_getNumChildren", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Comment_getNumChildren([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// A CXComment_Paragraph node is considered whitespace if it contains only CXComment_Text nodes that are empty or whitespace.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Comment_isWhitespace", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Comment_isWhitespace([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Construct a USR for a specified Objective-C category.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_constructUSR_ObjCCategory", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_constructUSR_ObjCCategory([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string class_name, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string category_name);

        ///<summary>
        /// Construct a USR for a specified Objective-C class.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_constructUSR_ObjCClass", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_constructUSR_ObjCClass([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string class_name);

        ///<summary>
        /// Construct a USR for a specified Objective-C instance variable and the USR for its containing class.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_constructUSR_ObjCIvar", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_constructUSR_ObjCIvar([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string name, [In] QuantumBinding.Clang.Interop.CXString classUSR);

        ///<summary>
        /// Construct a USR for a specified Objective-C method and the USR for its containing class.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_constructUSR_ObjCMethod", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_constructUSR_ObjCMethod([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string name, [In] uint isInstanceMethod, [In] QuantumBinding.Clang.Interop.CXString classUSR);

        ///<summary>
        /// Construct a USR for a specified Objective-C property and the USR for its containing class.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_constructUSR_ObjCProperty", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_constructUSR_ObjCProperty([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string property, [In] QuantumBinding.Clang.Interop.CXString classUSR);

        ///<summary>
        /// Construct a USR for a specified Objective-C protocol.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_constructUSR_ObjCProtocol", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_constructUSR_ObjCProtocol([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string protocol_name);

        ///<summary>
        /// Creates an empty CXCursorSet.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_createCXCursorSet", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursorSet clang_createCXCursorSet();

        ///<summary>
        /// Provides a shared context for creating translation units.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_createIndex", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIndex clang_createIndex([In] int excludeDeclarationsFromPCH, [In] int displayDiagnostics);

        ///<summary>
        /// Same as clang_createTranslationUnit2, but returns the CXTranslationUnit instead of an error code. In case of an error this routine returns a NULL CXTranslationUnit, without further detailed error codes.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_createTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTranslationUnit clang_createTranslationUnit([In] QuantumBinding.Clang.Interop.CXIndex CIdx, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string ast_filename);

        ///<summary>
        /// Create a translation unit from an AST file ( -emit-ast).
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_createTranslationUnit2", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_createTranslationUnit2([In] QuantumBinding.Clang.Interop.CXIndex CIdx, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string ast_filename, [Out] out QuantumBinding.Clang.Interop.CXTranslationUnit out_TU);

        ///<summary>
        /// Return the CXTranslationUnit for a given source file and the provided command line arguments one would pass to the compiler.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_createTranslationUnitFromSourceFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTranslationUnit clang_createTranslationUnitFromSourceFile([In] QuantumBinding.Clang.Interop.CXIndex CIdx, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_filename, [In] int num_clang_command_line_args, string[] clang_command_line_args, [In] uint num_unsaved_files, [In] System.IntPtr unsaved_files);

        ///<summary>
        /// If cursor is a statement declaration tries to evaluate the statement and if its variable, tries to evaluate its initializer, into its corresponding type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_Evaluate", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXEvalResult clang_Cursor_Evaluate([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the argument cursor of a function or method.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getArgument", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_Cursor_getArgument([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint i);

        ///<summary>
        /// Given a cursor that represents a documentable entity (e.g., declaration), return the associated first paragraph.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getBriefCommentText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Cursor_getBriefCommentText([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor that represents a declaration, return the associated comment's source range. The range may include multiple consecutive comments with whitespace in between.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getCommentRange", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_Cursor_getCommentRange([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the CXStrings representing the mangled symbols of the C++ constructor or destructor at the cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getCXXManglings", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXStringSet clang_Cursor_getCXXManglings([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Retrieve the CXString representing the mangled name of the cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getMangling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Cursor_getMangling([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Given a CXCursor_ModuleImportDecl cursor, return the associated module.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getModule", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXModule clang_Cursor_getModule([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the number of non-variadic arguments associated with a given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getNumArguments", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Cursor_getNumArguments([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns the number of template args of a function decl representing a template specialization.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getNumTemplateArguments", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Cursor_getNumTemplateArguments([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor that represents an Objective-C method or parameter declaration, return the associated Objective-C qualifiers for the return type or the parameter respectively. The bits are formed from CXObjCDeclQualifierKind.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getObjCDeclQualifiers", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_getObjCDeclQualifiers([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the CXStrings representing the mangled symbols of the ObjC class interface or implementation at the cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getObjCManglings", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXStringSet clang_Cursor_getObjCManglings([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Given a cursor that represents a property declaration, return the associated property attributes. The bits are formed from CXObjCPropertyAttrKind.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getObjCPropertyAttributes", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_getObjCPropertyAttributes([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint reserved);

        ///<summary>
        /// Given a cursor that represents a property declaration, return the name of the method that implements the getter.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getObjCPropertyGetterName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Cursor_getObjCPropertyGetterName([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor that represents a property declaration, return the name of the method that implements the setter, if any.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getObjCPropertySetterName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Cursor_getObjCPropertySetterName([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// If the cursor points to a selector identifier in an Objective-C method or message expression, this returns the selector index.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getObjCSelectorIndex", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Cursor_getObjCSelectorIndex([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Return the offset of the field represented by the Cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getOffsetOfField", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_Cursor_getOffsetOfField([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor that represents a documentable entity (e.g., declaration), return the associated parsed comment as a CXComment_FullComment AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getParsedComment", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXComment clang_Cursor_getParsedComment([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor that represents a declaration, return the associated comment text, including comment markers.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getRawCommentText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Cursor_getRawCommentText([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor pointing to an Objective-C message or property reference, or C++ method call, returns the CXType of the receiver.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getReceiverType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Cursor_getReceiverType([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve a range for a piece that forms the cursors spelling name. Most of the times there is only one range for the complete spelling but for Objective-C methods and Objective-C message expressions, there are multiple pieces for each selector identifier.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getSpellingNameRange", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_Cursor_getSpellingNameRange([In] QuantumBinding.Clang.Interop.CXCursor param0, [In] uint pieceIndex, [In] uint options);

        ///<summary>
        /// Returns the storage class for a function or variable declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getStorageClass", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CX_StorageClass clang_Cursor_getStorageClass([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Retrieve the kind of the I'th template argument of the CXCursor C.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getTemplateArgumentKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint I);

        ///<summary>
        /// Retrieve a CXType representing the type of a TemplateArgument of a function decl representing a template specialization.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getTemplateArgumentType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Cursor_getTemplateArgumentType([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint I);

        ///<summary>
        /// Retrieve the value of an Integral TemplateArgument (of a function decl representing a template specialization) as an unsigned long long.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getTemplateArgumentUnsignedValue", CallingConvention = CallingConvention.Cdecl)]
        internal static extern ulong clang_Cursor_getTemplateArgumentUnsignedValue([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint I);

        ///<summary>
        /// Retrieve the value of an Integral TemplateArgument (of a function decl representing a template specialization) as a signed long long.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getTemplateArgumentValue", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_Cursor_getTemplateArgumentValue([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint I);

        ///<summary>
        /// Returns the translation unit that a cursor originated from.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_getTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTranslationUnit clang_Cursor_getTranslationUnit([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Determine whether the given cursor has any attributes.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_hasAttrs", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_hasAttrs([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine whether the given cursor represents an anonymous record declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isAnonymous", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isAnonymous([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns non-zero if the cursor specifies a Record member that is a bitfield.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isBitField", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isBitField([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Given a cursor pointing to a C++ method call or an Objective-C message, returns non-zero if the method/message is "dynamic", meaning:
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isDynamicCall", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Cursor_isDynamicCall([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns non-zero if the given cursor points to a symbol marked with external_source_symbol attribute.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isExternalSymbol", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isExternalSymbol([In] QuantumBinding.Clang.Interop.CXCursor C, [In] System.IntPtr language, [In] System.IntPtr definedIn, ref uint isGenerated);

        ///<summary>
        /// Determine whether a CXCursor that is a function declaration, is an inline declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isFunctionInlined", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isFunctionInlined([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine whether a CXCursor that is a macro, is a builtin one.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isMacroBuiltin", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isMacroBuiltin([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine whether a CXCursor that is a macro, is function like.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isMacroFunctionLike", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isMacroFunctionLike([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns non-zero if cursor is null.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isNull", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Cursor_isNull([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Given a cursor that represents an Objective-C method or property declaration, return non-zero if the declaration was affected by "@optional". Returns zero if the cursor is not such a declaration or it is "@required".
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isObjCOptional", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isObjCOptional([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns non-zero if the given cursor is a variadic function or method.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Cursor_isVariadic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Cursor_isVariadic([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Queries a CXCursorSet to see if it contains a specific CXCursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXCursorSet_contains", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXCursorSet_contains([In] QuantumBinding.Clang.Interop.CXCursorSet cset, [In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Inserts a CXCursor into a CXCursorSet.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXCursorSet_insert", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXCursorSet_insert([In] QuantumBinding.Clang.Interop.CXCursorSet cset, [In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Gets the general options associated with a CXIndex.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXIndex_getGlobalOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXIndex_getGlobalOptions([In] QuantumBinding.Clang.Interop.CXIndex param0);

        ///<summary>
        /// Sets general options associated with a CXIndex.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXIndex_setGlobalOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_CXIndex_setGlobalOptions([In] QuantumBinding.Clang.Interop.CXIndex param0, [In] uint options);

        ///<summary>
        /// Sets the invocation emission path option in a CXIndex.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXIndex_setInvocationEmissionPathOption", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_CXIndex_setInvocationEmissionPathOption([In] QuantumBinding.Clang.Interop.CXIndex param0, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string Path);

        ///<summary>
        /// Determine if a C++ constructor is a converting constructor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXConstructor_isConvertingConstructor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXConstructor_isConvertingConstructor([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ constructor is a copy constructor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXConstructor_isCopyConstructor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXConstructor_isCopyConstructor([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ constructor is the default constructor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXConstructor_isDefaultConstructor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXConstructor_isDefaultConstructor([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ constructor is a move constructor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXConstructor_isMoveConstructor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXConstructor_isMoveConstructor([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ field is declared 'mutable'.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXField_isMutable", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXField_isMutable([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ member function or member function template is declared 'const'.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXMethod_isConst", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXMethod_isConst([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ method is declared '= default'.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXMethod_isDefaulted", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXMethod_isDefaulted([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ member function or member function template is pure virtual.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXMethod_isPureVirtual", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXMethod_isPureVirtual([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ member function or member function template is declared 'static'.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXMethod_isStatic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXMethod_isStatic([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ member function or member function template is explicitly declared 'virtual' or if it overrides a virtual method from one of the base classes.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXMethod_isVirtual", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXMethod_isVirtual([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine if a C++ record is abstract, i.e. whether a class or struct has a pure virtual member function.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_CXXRecord_isAbstract", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_CXXRecord_isAbstract([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns a default set of code-completion options that can be passed to clang_codeCompleteAt().
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_defaultCodeCompleteOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_defaultCodeCompleteOptions();

        ///<summary>
        /// Retrieve the set of display options most similar to the default behavior of the clang compiler.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_defaultDiagnosticDisplayOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_defaultDiagnosticDisplayOptions();

        ///<summary>
        /// Returns the set of flags that is suitable for parsing a translation unit that is being edited.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_defaultEditingTranslationUnitOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_defaultEditingTranslationUnitOptions();

        ///<summary>
        /// Returns the set of flags that is suitable for reparsing a translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_defaultReparseOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_defaultReparseOptions([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU);

        ///<summary>
        /// Returns the set of flags that is suitable for saving a translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_defaultSaveOptions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_defaultSaveOptions([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU);

        ///<summary>
        /// Free the given set of code-completion results.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeCodeCompleteResults", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeCodeCompleteResults([In] System.IntPtr Results);

        ///<summary>
        /// Disposes a CXCursorSet and releases its associated memory.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeCXCursorSet", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeCXCursorSet([In] QuantumBinding.Clang.Interop.CXCursorSet cset);

        ///<summary>
        /// Free the memory associated with a CXPlatformAvailability structure.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeCXPlatformAvailability", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeCXPlatformAvailability([In] System.IntPtr availability);

        [DllImport(LibraryPath, EntryPoint = "clang_disposeCXTUResourceUsage", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeCXTUResourceUsage([In] QuantumBinding.Clang.Interop.CXTUResourceUsage usage);

        ///<summary>
        /// Destroy a diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeDiagnostic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeDiagnostic([In] QuantumBinding.Clang.Interop.CXDiagnostic Diagnostic);

        ///<summary>
        /// Release a CXDiagnosticSet and all of its contained diagnostics.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeDiagnosticSet", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeDiagnosticSet([In] QuantumBinding.Clang.Interop.CXDiagnosticSet Diags);

        ///<summary>
        /// Destroy the given index.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeIndex", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeIndex([In] QuantumBinding.Clang.Interop.CXIndex index);

        ///<summary>
        /// Free the set of overridden cursors returned by clang_getOverriddenCursors().
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeOverriddenCursors", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeOverriddenCursors([In] System.IntPtr overridden);

        ///<summary>
        /// Destroy the given CXSourceRangeList.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeSourceRangeList", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeSourceRangeList([In] System.IntPtr ranges);

        ///<summary>
        /// Free the given string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeString", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeString([In] QuantumBinding.Clang.Interop.CXString @string);

        ///<summary>
        /// Free the given string set.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeStringSet", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeStringSet([In] System.IntPtr set);

        ///<summary>
        /// Free the given set of tokens.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeTokens", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeTokens([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] System.IntPtr Tokens, [In] uint NumTokens);

        ///<summary>
        /// Destroy the specified CXTranslationUnit object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_disposeTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_disposeTranslationUnit([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0);

        [DllImport(LibraryPath, EntryPoint = "clang_enableStackTraces", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_enableStackTraces();

        ///<summary>
        /// Determine if an enum declaration refers to a scoped enum.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EnumDecl_isScoped", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_EnumDecl_isScoped([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine whether two cursors are equivalent.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_equalCursors", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_equalCursors([In] QuantumBinding.Clang.Interop.CXCursor param0, [In] QuantumBinding.Clang.Interop.CXCursor param1);

        ///<summary>
        /// Determine whether two source locations, which must refer into the same translation unit, refer to exactly the same point in the source code.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_equalLocations", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_equalLocations([In] QuantumBinding.Clang.Interop.CXSourceLocation loc1, [In] QuantumBinding.Clang.Interop.CXSourceLocation loc2);

        ///<summary>
        /// Determine whether two ranges are equivalent.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_equalRanges", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_equalRanges([In] QuantumBinding.Clang.Interop.CXSourceRange range1, [In] QuantumBinding.Clang.Interop.CXSourceRange range2);

        ///<summary>
        /// Determine whether two CXTypes represent the same type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_equalTypes", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_equalTypes([In] QuantumBinding.Clang.Interop.CXType A, [In] QuantumBinding.Clang.Interop.CXType B);

        ///<summary>
        /// Disposes the created Eval memory.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_EvalResult_dispose([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns the evaluation result as double if the kind is double.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_getAsDouble", CallingConvention = CallingConvention.Cdecl)]
        internal static extern double clang_EvalResult_getAsDouble([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns the evaluation result as integer if the kind is Int.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_getAsInt", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_EvalResult_getAsInt([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns the evaluation result as a long long integer if the kind is Int. This prevents overflows that may happen if the result is returned with clang_EvalResult_getAsInt.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_getAsLongLong", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_EvalResult_getAsLongLong([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns the evaluation result as a constant string if the kind is other than Int or float. User must not free this pointer, instead call clang_EvalResult_dispose on the CXEvalResult returned by clang_Cursor_Evaluate.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_getAsStr", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))]
        internal static extern string clang_EvalResult_getAsStr([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns the evaluation result as an unsigned integer if the kind is Int and clang_EvalResult_isUnsignedInt is non-zero.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_getAsUnsigned", CallingConvention = CallingConvention.Cdecl)]
        internal static extern ulong clang_EvalResult_getAsUnsigned([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns the kind of the evaluated result.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_getKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXEvalResultKind clang_EvalResult_getKind([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        ///<summary>
        /// Returns a non-zero value if the kind is Int and the evaluation result resulted in an unsigned integer.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_EvalResult_isUnsignedInt", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_EvalResult_isUnsignedInt([In] QuantumBinding.Clang.Interop.CXEvalResult E);

        [DllImport(LibraryPath, EntryPoint = "clang_executeOnThread", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_executeOnThread([In] System.IntPtr fn, [In, Out] System.IntPtr user_data, [In] uint stack_size);

        ///<summary>
        /// Returns non-zero if the file1 and file2 point to the same file, or they are both NULL.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_File_isEqual", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_File_isEqual([In] QuantumBinding.Clang.Interop.CXFile file1, [In] QuantumBinding.Clang.Interop.CXFile file2);

        ///<summary>
        /// Returns the real path name of file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_File_tryGetRealPathName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_File_tryGetRealPathName([In] QuantumBinding.Clang.Interop.CXFile file);

        ///<summary>
        /// Find #import/#include directives in a specific file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_findIncludesInFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXResult clang_findIncludesInFile([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] QuantumBinding.Clang.Interop.CXFile file, [In] QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor visitor);

        ///<summary>
        /// Find references of a declaration in a specific file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_findReferencesInFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXResult clang_findReferencesInFile([In] QuantumBinding.Clang.Interop.CXCursor cursor, [In] QuantumBinding.Clang.Interop.CXFile file, [In] QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor visitor);

        ///<summary>
        /// Format the given diagnostic in a manner that is suitable for display.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_formatDiagnostic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_formatDiagnostic([In] QuantumBinding.Clang.Interop.CXDiagnostic Diagnostic, [In] uint Options);

        ///<summary>
        /// free memory allocated by libclang, such as the buffer returned by CXVirtualFileOverlay() or clang_ModuleMapDescriptor_writeToBuffer().
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_free", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_free([In, Out] System.IntPtr buffer);

        ///<summary>
        /// Convert a given full parsed comment to an HTML fragment.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_FullComment_getAsHTML", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_FullComment_getAsHTML([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Convert a given full parsed comment to an XML document.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_FullComment_getAsXML", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_FullComment_getAsXML([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns the address space of the given type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getAddressSpace", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getAddressSpace([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve all ranges from all files that were skipped by the preprocessor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getAllSkippedRanges", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRangeList clang_getAllSkippedRanges([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu);

        ///<summary>
        /// Retrieve the type of a parameter of a function type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getArgType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getArgType([In] QuantumBinding.Clang.Interop.CXType T, [In] uint i);

        ///<summary>
        /// Return the element type of an array type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getArrayElementType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getArrayElementType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Return the array size of a constant array.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getArraySize", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_getArraySize([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Return the timestamp for use with Clang's -fbuild-session-timestamp= option.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getBuildSessionTimestamp", CallingConvention = CallingConvention.Cdecl)]
        internal static extern ulong clang_getBuildSessionTimestamp();

        ///<summary>
        /// Retrieve the canonical cursor corresponding to the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCanonicalCursor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getCanonicalCursor([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Return the canonical type for a CXType.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCanonicalType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getCanonicalType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the child diagnostics of a CXDiagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getChildDiagnostics", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnosticSet clang_getChildDiagnostics([In] QuantumBinding.Clang.Interop.CXDiagnostic D);

        ///<summary>
        /// Return a version string, suitable for showing to a user, but not intended to be parsed (the format is not guaranteed to be stable).
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getClangVersion", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getClangVersion();

        ///<summary>
        /// Retrieve the annotation associated with the given completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionAnnotation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCompletionAnnotation([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string, [In] uint annotation_number);

        ///<summary>
        /// Determine the availability of the entity that this code-completion string refers to.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionAvailability", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXAvailabilityKind clang_getCompletionAvailability([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string);

        ///<summary>
        /// Retrieve the brief documentation comment attached to the declaration that corresponds to the given completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionBriefComment", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCompletionBriefComment([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string);

        ///<summary>
        /// Retrieve the completion string associated with a particular chunk within a completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionChunkCompletionString", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCompletionString clang_getCompletionChunkCompletionString([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string, [In] uint chunk_number);

        ///<summary>
        /// Determine the kind of a particular chunk within a completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionChunkKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCompletionChunkKind clang_getCompletionChunkKind([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string, [In] uint chunk_number);

        ///<summary>
        /// Retrieve the text associated with a particular chunk within a completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionChunkText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCompletionChunkText([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string, [In] uint chunk_number);

        ///<summary>
        /// Fix-its that *must* be applied before inserting the text for the corresponding completion.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionFixIt", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCompletionFixIt([In] System.IntPtr results, [In] uint completion_index, [In] uint fixit_index, [In] System.IntPtr replacement_range);

        ///<summary>
        /// Retrieve the number of annotations associated with the given completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionNumAnnotations", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getCompletionNumAnnotations([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string);

        ///<summary>
        /// Retrieve the number of fix-its for the given completion index.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionNumFixIts", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getCompletionNumFixIts([In] System.IntPtr results, [In] uint completion_index);

        ///<summary>
        /// Retrieve the parent context of the given completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionParent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCompletionParent([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string, ref int kind);

        ///<summary>
        /// Determine the priority of this code completion.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCompletionPriority", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getCompletionPriority([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string);

        ///<summary>
        /// Retrieve the character data associated with the given string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCString", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))]
        internal static extern string clang_getCString([In] QuantumBinding.Clang.Interop.CXString @string);

        ///<summary>
        /// Map a source location to the cursor that describes the entity at that location in the source code.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getCursor([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXSourceLocation param1);

        ///<summary>
        /// Determine the availability of the entity that this cursor refers to, taking the current target platform into account.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorAvailability", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXAvailabilityKind clang_getCursorAvailability([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Retrieve a completion string for an arbitrary declaration or macro definition cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorCompletionString", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCompletionString clang_getCursorCompletionString([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// For a cursor that is either a reference to or a declaration of some entity, retrieve a cursor that describes the definition of that entity.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorDefinition", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getCursorDefinition([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Retrieve the display name for the entity referenced by this cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorDisplayName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCursorDisplayName([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Retrieve the exception specification type associated with a given cursor. This is a value of type CXCursor_ExceptionSpecificationKind.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorExceptionSpecificationType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_getCursorExceptionSpecificationType([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the physical extent of the source construct referenced by the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorExtent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_getCursorExtent([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Retrieve the kind of the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursorKind clang_getCursorKind([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// for debug/testing
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorKindSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCursorKindSpelling([In] CXCursorKind Kind);

        ///<summary>
        /// Determine the "language" of the entity referred to by a given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorLanguage", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXLanguageKind clang_getCursorLanguage([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Determine the lexical parent of the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorLexicalParent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getCursorLexicalParent([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Determine the linkage of the entity referred to by a given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorLinkage", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXLinkageKind clang_getCursorLinkage([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Retrieve the physical location of the source constructor referenced by the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getCursorLocation([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Determine the availability of the entity that this cursor refers to on any platforms for which availability information is known.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorPlatformAvailability", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_getCursorPlatformAvailability([In] QuantumBinding.Clang.Interop.CXCursor cursor, [In] int always_deprecated, [In] System.IntPtr deprecated_message, ref int always_unavailable, [In] System.IntPtr unavailable_message, [In] QuantumBinding.Clang.Interop.CXPlatformAvailability[] availability, [In] int availability_size);

        ///<summary>
        /// Pretty print declarations.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorPrettyPrinted", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCursorPrettyPrinted([In] QuantumBinding.Clang.Interop.CXCursor Cursor, [In] QuantumBinding.Clang.Interop.CXPrintingPolicy Policy);

        ///<summary>
        /// Retrieve the default policy for the cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorPrintingPolicy", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXPrintingPolicy clang_getCursorPrintingPolicy([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// For a cursor that is a reference, retrieve a cursor representing the entity that it references.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorReferenced", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getCursorReferenced([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Given a cursor that references something else, return the source range covering that reference.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorReferenceNameRange", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_getCursorReferenceNameRange([In] QuantumBinding.Clang.Interop.CXCursor C, [In] uint NameFlags, [In] uint PieceIndex);

        ///<summary>
        /// Retrieve the return type associated with a given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorResultType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getCursorResultType([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Determine the semantic parent of the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorSemanticParent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getCursorSemanticParent([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Retrieve a name for the entity referenced by this cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCursorSpelling([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Determine the "thread-local storage (TLS) kind" of the declaration referred to by a cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorTLSKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTLSKind clang_getCursorTLSKind([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Retrieve the type of a CXCursor (if any).
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getCursorType([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorUSR", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getCursorUSR([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Describe the visibility of the entity referred to by a cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCursorVisibility", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXVisibilityKind clang_getCursorVisibility([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Return the memory usage of a translation unit. This object should be released with clang_disposeCXTUResourceUsage().
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCXTUResourceUsage", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTUResourceUsage clang_getCXTUResourceUsage([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU);

        ///<summary>
        /// Returns the access control level for the referenced object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getCXXAccessSpecifier", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CX_CXXAccessSpecifier clang_getCXXAccessSpecifier([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Returns the Objective-C type encoding for the specified declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDeclObjCTypeEncoding", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getDeclObjCTypeEncoding([In] QuantumBinding.Clang.Interop.CXCursor C);

        [DllImport(LibraryPath, EntryPoint = "clang_getDefinitionSpellingAndExtent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getDefinitionSpellingAndExtent([In] QuantumBinding.Clang.Interop.CXCursor param0, string[] startBuf, string[] endBuf, ref uint startLine, ref uint startColumn, ref uint endLine, ref uint endColumn);

        ///<summary>
        /// Retrieve a diagnostic associated with the given translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnostic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnostic clang_getDiagnostic([In] QuantumBinding.Clang.Interop.CXTranslationUnit Unit, [In] uint Index);

        ///<summary>
        /// Retrieve the category number for this diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticCategory", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getDiagnosticCategory([In] QuantumBinding.Clang.Interop.CXDiagnostic param0);

        ///<summary>
        /// Retrieve the name of a particular diagnostic category. This is now deprecated. Use clang_getDiagnosticCategoryText() instead.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticCategoryName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getDiagnosticCategoryName([In] uint Category);

        ///<summary>
        /// Retrieve the diagnostic category text for a given diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticCategoryText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getDiagnosticCategoryText([In] QuantumBinding.Clang.Interop.CXDiagnostic param0);

        ///<summary>
        /// Retrieve the replacement information for a given fix-it.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticFixIt", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getDiagnosticFixIt([In] QuantumBinding.Clang.Interop.CXDiagnostic Diagnostic, [In] uint FixIt, [In] System.IntPtr ReplacementRange);

        ///<summary>
        /// Retrieve a diagnostic associated with the given CXDiagnosticSet.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticInSet", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnostic clang_getDiagnosticInSet([In] QuantumBinding.Clang.Interop.CXDiagnosticSet Diags, [In] uint Index);

        ///<summary>
        /// Retrieve the source location of the given diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getDiagnosticLocation([In] QuantumBinding.Clang.Interop.CXDiagnostic param0);

        ///<summary>
        /// Determine the number of fix-it hints associated with the given diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticNumFixIts", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getDiagnosticNumFixIts([In] QuantumBinding.Clang.Interop.CXDiagnostic Diagnostic);

        ///<summary>
        /// Determine the number of source ranges associated with the given diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticNumRanges", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getDiagnosticNumRanges([In] QuantumBinding.Clang.Interop.CXDiagnostic param0);

        ///<summary>
        /// Retrieve the name of the command-line option that enabled this diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticOption", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getDiagnosticOption([In] QuantumBinding.Clang.Interop.CXDiagnostic Diag, [In] System.IntPtr Disable);

        ///<summary>
        /// Retrieve a source range associated with the diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticRange", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_getDiagnosticRange([In] QuantumBinding.Clang.Interop.CXDiagnostic Diagnostic, [In] uint Range);

        ///<summary>
        /// Retrieve the complete set of diagnostics associated with a translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticSetFromTU", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnosticSet clang_getDiagnosticSetFromTU([In] QuantumBinding.Clang.Interop.CXTranslationUnit Unit);

        ///<summary>
        /// Determine the severity of the given diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticSeverity", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnosticSeverity clang_getDiagnosticSeverity([In] QuantumBinding.Clang.Interop.CXDiagnostic param0);

        ///<summary>
        /// Retrieve the text of the given diagnostic.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getDiagnosticSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getDiagnosticSpelling([In] QuantumBinding.Clang.Interop.CXDiagnostic param0);

        ///<summary>
        /// Return the element type of an array, complex, or vector type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getElementType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getElementType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the integer value of an enum constant declaration as an unsigned long long.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getEnumConstantDeclUnsignedValue", CallingConvention = CallingConvention.Cdecl)]
        internal static extern ulong clang_getEnumConstantDeclUnsignedValue([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the integer value of an enum constant declaration as a signed long long.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getEnumConstantDeclValue", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_getEnumConstantDeclValue([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the integer type of an enum declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getEnumDeclIntegerType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getEnumDeclIntegerType([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the exception specification type associated with a function type. This is a value of type CXCursor_ExceptionSpecificationKind.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getExceptionSpecificationType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_getExceptionSpecificationType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getExpansionLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getExpansionLocation([In] QuantumBinding.Clang.Interop.CXSourceLocation location, [Out] out QuantumBinding.Clang.Interop.CXFile file, [Out] out uint line, [Out] out uint column, [Out] out uint offset);

        ///<summary>
        /// Retrieve the bit width of a bit field declaration as an integer.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFieldDeclBitWidth", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_getFieldDeclBitWidth([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve a file handle within the given translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXFile clang_getFile([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string file_name);

        ///<summary>
        /// Retrieve the buffer associated with the given file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFileContents", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))]
        internal static extern string clang_getFileContents([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] QuantumBinding.Clang.Interop.CXFile file, [Out] out ulong size);

        ///<summary>
        /// Retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFileLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getFileLocation([In] QuantumBinding.Clang.Interop.CXSourceLocation location, [Out] out QuantumBinding.Clang.Interop.CXFile file, [Out] out uint line, [Out] out uint column, [Out] out uint offset);

        ///<summary>
        /// Retrieve the complete file and path name of the given file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFileName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getFileName([In] QuantumBinding.Clang.Interop.CXFile SFile);

        ///<summary>
        /// Retrieve the last modification time of the given file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFileTime", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_getFileTime([In] QuantumBinding.Clang.Interop.CXFile SFile);

        ///<summary>
        /// Retrieve the unique ID for the given file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFileUniqueID", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_getFileUniqueID([In] QuantumBinding.Clang.Interop.CXFile file, [Out] out QuantumBinding.Clang.Interop.CXFileUniqueID outID);

        ///<summary>
        /// Retrieve the calling convention associated with a function type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getFunctionTypeCallingConv", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCallingConv clang_getFunctionTypeCallingConv([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// For cursors representing an iboutletcollection attribute, this function returns the collection element type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getIBOutletCollectionType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getIBOutletCollectionType([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Retrieve the file that is included by the given inclusion directive cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getIncludedFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXFile clang_getIncludedFile([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Visit the set of preprocessor inclusions in a translation unit. The visitor function is called with the provided data for every included file. This does not include headers included by the PCH file (unless one is inspecting the inclusions in the PCH file itself).
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getInclusions", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getInclusions([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] CXInclusionVisitor visitor, [In] QuantumBinding.Clang.Interop.CXClientData client_data);

        ///<summary>
        /// Legacy API to retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getInstantiationLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getInstantiationLocation([In] QuantumBinding.Clang.Interop.CXSourceLocation location, [Out] out QuantumBinding.Clang.Interop.CXFile file, [Out] out uint line, [Out] out uint column, [Out] out uint offset);

        ///<summary>
        /// Retrieves the source location associated with a given file/line/column in a particular translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getLocation([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] QuantumBinding.Clang.Interop.CXFile file, [In] uint line, [In] uint column);

        ///<summary>
        /// Retrieves the source location associated with a given character offset in a particular translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getLocationForOffset", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getLocationForOffset([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] QuantumBinding.Clang.Interop.CXFile file, [In] uint offset);

        ///<summary>
        /// Given a CXFile header file, return the module that contains it, if one exists.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getModuleForFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXModule clang_getModuleForFile([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXFile param1);

        ///<summary>
        /// Retrieve the NULL cursor, which represents no entity.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNullCursor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getNullCursor();

        ///<summary>
        /// Retrieve a NULL (invalid) source location.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNullLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getNullLocation();

        ///<summary>
        /// Retrieve a NULL (invalid) source range.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNullRange", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_getNullRange();

        ///<summary>
        /// Retrieve the number of non-variadic parameters associated with a function type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNumArgTypes", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_getNumArgTypes([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the number of chunks in the given code-completion string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNumCompletionChunks", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getNumCompletionChunks([In] QuantumBinding.Clang.Interop.CXCompletionString completion_string);

        ///<summary>
        /// Determine the number of diagnostics produced for the given translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNumDiagnostics", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getNumDiagnostics([In] QuantumBinding.Clang.Interop.CXTranslationUnit Unit);

        ///<summary>
        /// Determine the number of diagnostics in a CXDiagnosticSet.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNumDiagnosticsInSet", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getNumDiagnosticsInSet([In] QuantumBinding.Clang.Interop.CXDiagnosticSet Diags);

        ///<summary>
        /// Return the number of elements of an array or vector type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNumElements", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_getNumElements([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Determine the number of overloaded declarations referenced by a CXCursor_OverloadedDeclRef cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getNumOverloadedDecls", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_getNumOverloadedDecls([In] QuantumBinding.Clang.Interop.CXCursor cursor);

        ///<summary>
        /// Retrieve a cursor for one of the overloaded declarations referenced by a CXCursor_OverloadedDeclRef cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getOverloadedDecl", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getOverloadedDecl([In] QuantumBinding.Clang.Interop.CXCursor cursor, [In] uint index);

        ///<summary>
        /// Determine the set of methods that are overridden by the given method.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getOverriddenCursors", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getOverriddenCursors([In] QuantumBinding.Clang.Interop.CXCursor cursor, [In, Out] ref System.IntPtr overridden, [Out] out uint num_overridden);

        ///<summary>
        /// For pointer types, returns the type of the pointee.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getPointeeType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getPointeeType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the file, line and column represented by the given source location, as specified in a # line directive.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getPresumedLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getPresumedLocation([In] QuantumBinding.Clang.Interop.CXSourceLocation location, [Out] out QuantumBinding.Clang.Interop.CXString filename, [Out] out uint line, [Out] out uint column);

        ///<summary>
        /// Retrieve a source range given the beginning and ending source locations.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getRange", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_getRange([In] QuantumBinding.Clang.Interop.CXSourceLocation begin, [In] QuantumBinding.Clang.Interop.CXSourceLocation end);

        ///<summary>
        /// Retrieve a source location representing the last character within a source range.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getRangeEnd", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getRangeEnd([In] QuantumBinding.Clang.Interop.CXSourceRange range);

        ///<summary>
        /// Retrieve a source location representing the first character within a source range.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getRangeStart", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getRangeStart([In] QuantumBinding.Clang.Interop.CXSourceRange range);

        ///<summary>
        /// Retrieve a remapping.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getRemappings", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXRemapping clang_getRemappings([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string path);

        ///<summary>
        /// Retrieve a remapping.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getRemappingsFromFileList", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXRemapping clang_getRemappingsFromFileList(string[] filePaths, [In] uint numFiles);

        ///<summary>
        /// Retrieve the return type associated with a function type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getResultType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getResultType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve all ranges that were skipped by the preprocessor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getSkippedRanges", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRangeList clang_getSkippedRanges([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] QuantumBinding.Clang.Interop.CXFile file);

        ///<summary>
        /// Given a cursor that may represent a specialization or instantiation of a template, retrieve the cursor that represents the template that it specializes or from which it was instantiated.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getSpecializedCursorTemplate", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getSpecializedCursorTemplate([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getSpellingLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_getSpellingLocation([In] QuantumBinding.Clang.Interop.CXSourceLocation location, [Out] out QuantumBinding.Clang.Interop.CXFile file, [Out] out uint line, [Out] out uint column, [Out] out uint offset);

        ///<summary>
        /// Given a cursor that represents a template, determine the cursor kind of the specializations would be generated by instantiating the template.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTemplateCursorKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursorKind clang_getTemplateCursorKind([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Get the raw lexical token starting with the given location.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getToken", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXToken clang_getToken([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] QuantumBinding.Clang.Interop.CXSourceLocation Location);

        ///<summary>
        /// Retrieve a source range that covers the given token.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTokenExtent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceRange clang_getTokenExtent([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXToken param1);

        ///<summary>
        /// Determine the kind of the given token.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTokenKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTokenKind clang_getTokenKind([In] QuantumBinding.Clang.Interop.CXToken param0);

        ///<summary>
        /// Retrieve the source location of the given token.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTokenLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_getTokenLocation([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXToken param1);

        ///<summary>
        /// Determine the spelling of the given token.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTokenSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getTokenSpelling([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXToken param1);

        ///<summary>
        /// Retrieve the cursor that represents the given translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTranslationUnitCursor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getTranslationUnitCursor([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0);

        ///<summary>
        /// Get the original translation unit source file name.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTranslationUnitSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getTranslationUnitSpelling([In] QuantumBinding.Clang.Interop.CXTranslationUnit CTUnit);

        ///<summary>
        /// Get target information for this translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTranslationUnitTargetInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTargetInfo clang_getTranslationUnitTargetInfo([In] QuantumBinding.Clang.Interop.CXTranslationUnit CTUnit);

        ///<summary>
        /// Returns the human-readable null-terminated C string that represents the name of the memory category. This string should never be freed.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTUResourceUsageName", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))]
        internal static extern string clang_getTUResourceUsageName([In] CXTUResourceUsageKind kind);

        ///<summary>
        /// Return the cursor for the declaration of the given type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTypeDeclaration", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_getTypeDeclaration([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the underlying type of a typedef declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTypedefDeclUnderlyingType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_getTypedefDeclUnderlyingType([In] QuantumBinding.Clang.Interop.CXCursor C);

        ///<summary>
        /// Returns the typedef name of the given type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTypedefName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getTypedefName([In] QuantumBinding.Clang.Interop.CXType CT);

        ///<summary>
        /// Retrieve the spelling of a given CXTypeKind.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTypeKindSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getTypeKindSpelling([In] CXTypeKind K);

        ///<summary>
        /// Pretty-print the underlying type using the rules of the language of the translation unit from which it came.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_getTypeSpelling", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_getTypeSpelling([In] QuantumBinding.Clang.Interop.CXType CT);

        ///<summary>
        /// Compute a hash value for the given cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_hashCursor", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_hashCursor([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Returns name of the specified attribute.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_HTMLStartTag_getAttrName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_HTMLStartTag_getAttrName([In] QuantumBinding.Clang.Interop.CXComment Comment, [In] uint AttrIdx);

        ///<summary>
        /// Returns value of the specified attribute.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_HTMLStartTag_getAttrValue", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_HTMLStartTag_getAttrValue([In] QuantumBinding.Clang.Interop.CXComment Comment, [In] uint AttrIdx);

        ///<summary>
        /// Returns number of attributes (name-value pairs) attached to the start tag.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_HTMLStartTag_getNumAttrs", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_HTMLStartTag_getNumAttrs([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns non-zero if tag is self-closing (for example, <br />).
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_HTMLStartTagComment_isSelfClosing", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_HTMLStartTagComment_isSelfClosing([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Convert an HTML tag AST node to string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_HTMLTagComment_getAsString", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_HTMLTagComment_getAsString([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns HTML tag name.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_HTMLTagComment_getTagName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_HTMLTagComment_getTagName([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// For retrieving a custom CXIdxClientContainer attached to a container.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_index_getClientContainer", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxClientContainer clang_index_getClientContainer(System.IntPtr param0);

        ///<summary>
        /// For retrieving a custom CXIdxClientEntity attached to an entity.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_index_getClientEntity", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxClientEntity clang_index_getClientEntity(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getCXXClassDeclInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxCXXClassDeclInfo clang_index_getCXXClassDeclInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getIBOutletCollectionAttrInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxIBOutletCollectionAttrInfo clang_index_getIBOutletCollectionAttrInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getObjCCategoryDeclInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxObjCCategoryDeclInfo clang_index_getObjCCategoryDeclInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getObjCContainerDeclInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxObjCContainerDeclInfo clang_index_getObjCContainerDeclInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getObjCInterfaceDeclInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxObjCInterfaceDeclInfo clang_index_getObjCInterfaceDeclInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getObjCPropertyDeclInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxObjCPropertyDeclInfo clang_index_getObjCPropertyDeclInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_getObjCProtocolRefListInfo", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIdxObjCProtocolRefListInfo clang_index_getObjCProtocolRefListInfo(System.IntPtr param0);

        [DllImport(LibraryPath, EntryPoint = "clang_index_isEntityObjCContainerKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_index_isEntityObjCContainerKind([In] CXIdxEntityKind param0);

        ///<summary>
        /// For setting a custom CXIdxClientContainer attached to a container.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_index_setClientContainer", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_index_setClientContainer(System.IntPtr param0, [In] QuantumBinding.Clang.Interop.CXIdxClientContainer param1);

        ///<summary>
        /// For setting a custom CXIdxClientEntity attached to an entity.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_index_setClientEntity", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_index_setClientEntity(System.IntPtr param0, [In] QuantumBinding.Clang.Interop.CXIdxClientEntity param1);

        ///<summary>
        /// An indexing action/session, to be applied to one or multiple translation units.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_IndexAction_create", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXIndexAction clang_IndexAction_create([In] QuantumBinding.Clang.Interop.CXIndex CIdx);

        ///<summary>
        /// Destroy the given index action.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_IndexAction_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_IndexAction_dispose([In] QuantumBinding.Clang.Interop.CXIndexAction param0);

        ///<summary>
        /// Retrieve the CXSourceLocation represented by the given CXIdxLoc.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_indexLoc_getCXSourceLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXSourceLocation clang_indexLoc_getCXSourceLocation([In] QuantumBinding.Clang.Interop.CXIdxLoc loc);

        ///<summary>
        /// Retrieve the CXIdxFile, file, line, column, and offset represented by the given CXIdxLoc.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_indexLoc_getFileLocation", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_indexLoc_getFileLocation([In] QuantumBinding.Clang.Interop.CXIdxLoc loc, [Out] out QuantumBinding.Clang.Interop.CXIdxClientFile indexFile, [Out] out QuantumBinding.Clang.Interop.CXFile file, [Out] out uint line, [Out] out uint column, [Out] out uint offset);

        ///<summary>
        /// Index the given source file and the translation unit corresponding to that file via callbacks implemented through #IndexerCallbacks.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_indexSourceFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_indexSourceFile([In] QuantumBinding.Clang.Interop.CXIndexAction param0, [In] QuantumBinding.Clang.Interop.CXClientData client_data, [In] System.IntPtr index_callbacks, [In] uint index_callbacks_size, [In] uint index_options, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_filename, string[] command_line_args, [In] int num_command_line_args, [In] System.IntPtr unsaved_files, [In] uint num_unsaved_files, [Out] out QuantumBinding.Clang.Interop.CXTranslationUnit out_TU, [In] uint TU_options);

        ///<summary>
        /// Same as clang_indexSourceFile but requires a full command line for command_line_args including argv[0]. This is useful if the standard library paths are relative to the binary.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_indexSourceFileFullArgv", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_indexSourceFileFullArgv([In] QuantumBinding.Clang.Interop.CXIndexAction param0, [In] QuantumBinding.Clang.Interop.CXClientData client_data, [In] System.IntPtr index_callbacks, [In] uint index_callbacks_size, [In] uint index_options, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_filename, string[] command_line_args, [In] int num_command_line_args, [In] System.IntPtr unsaved_files, [In] uint num_unsaved_files, [Out] out QuantumBinding.Clang.Interop.CXTranslationUnit out_TU, [In] uint TU_options);

        ///<summary>
        /// Index the given translation unit via callbacks implemented through #IndexerCallbacks.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_indexTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_indexTranslationUnit([In] QuantumBinding.Clang.Interop.CXIndexAction param0, [In] QuantumBinding.Clang.Interop.CXClientData client_data, [In] System.IntPtr index_callbacks, [In] uint index_callbacks_size, [In] uint index_options, [In] QuantumBinding.Clang.Interop.CXTranslationUnit param5);

        ///<summary>
        /// Returns text of the specified argument.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_InlineCommandComment_getArgText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_InlineCommandComment_getArgText([In] QuantumBinding.Clang.Interop.CXComment Comment, [In] uint ArgIdx);

        ///<summary>
        /// Returns name of the inline command.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_InlineCommandComment_getCommandName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_InlineCommandComment_getCommandName([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns number of command arguments.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_InlineCommandComment_getNumArgs", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_InlineCommandComment_getNumArgs([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns the most appropriate rendering mode, chosen on command semantics in Doxygen.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_InlineCommandComment_getRenderKind", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCommentInlineCommandRenderKind clang_InlineCommandComment_getRenderKind([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns non-zero if Comment is inline content and has a newline immediately following it in the comment text. Newlines between paragraphs do not count.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_InlineContentComment_hasTrailingNewline", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_InlineContentComment_hasTrailingNewline([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Determine whether the given cursor kind represents an attribute.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isAttribute", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isAttribute([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether a CXType has the "const" qualifier set, without looking through typedefs that may have added "const" at a different level.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isConstQualifiedType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isConstQualifiedType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Determine whether the declaration pointed to by this cursor is also a definition of that entity.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isCursorDefinition", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isCursorDefinition([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Determine whether the given cursor kind represents a declaration.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isDeclaration", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isDeclaration([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether the given cursor kind represents an expression.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isExpression", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isExpression([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether the given header is guarded against multiple inclusions, either with the conventional #ifndef/#define/#endif macro guards or with #pragma once.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isFileMultipleIncludeGuarded", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isFileMultipleIncludeGuarded([In] QuantumBinding.Clang.Interop.CXTranslationUnit tu, [In] QuantumBinding.Clang.Interop.CXFile file);

        ///<summary>
        /// Return 1 if the CXType is a variadic function type, and 0 otherwise.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isFunctionTypeVariadic", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isFunctionTypeVariadic([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Determine whether the given cursor kind represents an invalid cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isInvalid", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isInvalid([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether the given declaration is invalid.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isInvalidDeclaration", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isInvalidDeclaration([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Return 1 if the CXType is a POD (plain old data) type, and 0 otherwise.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isPODType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isPODType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// * Determine whether the given cursor represents a preprocessing element, such as a preprocessor directive or macro instantiation.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isPreprocessing", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isPreprocessing([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether the given cursor kind represents a simple reference.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isReference", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isReference([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether a CXType has the "restrict" qualifier set, without looking through typedefs that may have added "restrict" at a different level.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isRestrictQualifiedType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isRestrictQualifiedType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Determine whether the given cursor kind represents a statement.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isStatement", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isStatement([In] CXCursorKind param0);

        ///<summary>
        /// Determine whether the given cursor kind represents a translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isTranslationUnit([In] CXCursorKind param0);

        ///<summary>
        /// * Determine whether the given cursor represents a currently unexposed piece of the AST (e.g., CXCursor_UnexposedStmt).
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isUnexposed", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isUnexposed([In] CXCursorKind param0);

        ///<summary>
        /// Returns 1 if the base class specified by the cursor with kind CX_CXXBaseSpecifier is virtual.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isVirtualBase", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isVirtualBase([In] QuantumBinding.Clang.Interop.CXCursor param0);

        ///<summary>
        /// Determine whether a CXType has the "volatile" qualifier set, without looking through typedefs that may have added "volatile" at a different level.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_isVolatileQualifiedType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_isVolatileQualifiedType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Deserialize a set of diagnostics from a Clang diagnostics bitcode file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_loadDiagnostics", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXDiagnosticSet clang_loadDiagnostics([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string file, [Out] out CXLoadDiag_Error error, [Out] out QuantumBinding.Clang.Interop.CXString errorString);

        ///<summary>
        /// Returns non-zero if the given source location is in the main file of the corresponding translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Location_isFromMainFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Location_isFromMainFile([In] QuantumBinding.Clang.Interop.CXSourceLocation location);

        ///<summary>
        /// Returns non-zero if the given source location is in a system header.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Location_isInSystemHeader", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Location_isInSystemHeader([In] QuantumBinding.Clang.Interop.CXSourceLocation location);

        ///<summary>
        /// Returns the module file where the provided module object came from.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_getASTFile", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXFile clang_Module_getASTFile([In] QuantumBinding.Clang.Interop.CXModule Module);

        ///<summary>
        /// Returns the full name of the module, e.g. "std.vector".
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_getFullName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Module_getFullName([In] QuantumBinding.Clang.Interop.CXModule Module);

        ///<summary>
        /// Returns the name of the module, e.g. for the 'std.vector' sub-module it will return "vector".
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_getName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Module_getName([In] QuantumBinding.Clang.Interop.CXModule Module);

        ///<summary>
        /// Returns the number of top level headers associated with this module.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_getNumTopLevelHeaders", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Module_getNumTopLevelHeaders([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXModule Module);

        ///<summary>
        /// Returns the parent of a sub-module or NULL if the given module is top-level, e.g. for 'std.vector' it will return the 'std' module.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_getParent", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXModule clang_Module_getParent([In] QuantumBinding.Clang.Interop.CXModule Module);

        ///<summary>
        /// Returns the specified top level header associated with the module.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_getTopLevelHeader", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXFile clang_Module_getTopLevelHeader([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0, [In] QuantumBinding.Clang.Interop.CXModule Module, [In] uint Index);

        ///<summary>
        /// Returns non-zero if the module is a system one.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Module_isSystem", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Module_isSystem([In] QuantumBinding.Clang.Interop.CXModule Module);

        ///<summary>
        /// Create a CXModuleMapDescriptor object. Must be disposed with clang_ModuleMapDescriptor_dispose().
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ModuleMapDescriptor_create", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXModuleMapDescriptor clang_ModuleMapDescriptor_create([In] uint options);

        ///<summary>
        /// Dispose a CXModuleMapDescriptor object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ModuleMapDescriptor_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_ModuleMapDescriptor_dispose([In] QuantumBinding.Clang.Interop.CXModuleMapDescriptor param0);

        ///<summary>
        /// Sets the framework module name that the module.map describes.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ModuleMapDescriptor_setFrameworkModuleName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_ModuleMapDescriptor_setFrameworkModuleName([In] QuantumBinding.Clang.Interop.CXModuleMapDescriptor param0, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string name);

        ///<summary>
        /// Sets the umbrealla header name that the module.map describes.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ModuleMapDescriptor_setUmbrellaHeader", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_ModuleMapDescriptor_setUmbrellaHeader([In] QuantumBinding.Clang.Interop.CXModuleMapDescriptor param0, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string name);

        ///<summary>
        /// Write out the CXModuleMapDescriptor object to a char buffer.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ModuleMapDescriptor_writeToBuffer", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_ModuleMapDescriptor_writeToBuffer([In] QuantumBinding.Clang.Interop.CXModuleMapDescriptor param0, [In] uint options, [Out] out System.IntPtr out_buffer_ptr, [Out] out uint out_buffer_size);

        ///<summary>
        /// Returns parameter passing direction.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ParamCommandComment_getDirection", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCommentParamPassDirection clang_ParamCommandComment_getDirection([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns zero-based parameter index in function prototype.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ParamCommandComment_getParamIndex", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_ParamCommandComment_getParamIndex([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns parameter name.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ParamCommandComment_getParamName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_ParamCommandComment_getParamName([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns non-zero if parameter passing direction was specified explicitly in the comment.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ParamCommandComment_isDirectionExplicit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_ParamCommandComment_isDirectionExplicit([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns non-zero if the parameter that this AST node represents was found in the function prototype and clang_ParamCommandComment_getParamIndex function will return a meaningful value.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_ParamCommandComment_isParamIndexValid", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_ParamCommandComment_isParamIndexValid([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Same as clang_parseTranslationUnit2, but returns the CXTranslationUnit instead of an error code. In case of an error this routine returns a NULL CXTranslationUnit, without further detailed error codes.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_parseTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTranslationUnit clang_parseTranslationUnit([In] QuantumBinding.Clang.Interop.CXIndex CIdx, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_filename, string[] command_line_args, [In] int num_command_line_args, [In] System.IntPtr unsaved_files, [In] uint num_unsaved_files, [In] uint options);

        ///<summary>
        /// Parse the given source file and the translation unit corresponding to that file.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_parseTranslationUnit2", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_parseTranslationUnit2([In] QuantumBinding.Clang.Interop.CXIndex CIdx, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_filename, string[] command_line_args, [In] int num_command_line_args, [In] QuantumBinding.Clang.Interop.CXUnsavedFile[] unsaved_files, [In] uint num_unsaved_files, [In] uint options, [Out] out QuantumBinding.Clang.Interop.CXTranslationUnit out_TU);

        ///<summary>
        /// Same as clang_parseTranslationUnit2 but requires a full command line for command_line_args including argv[0]. This is useful if the standard library paths are relative to the binary.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_parseTranslationUnit2FullArgv", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_parseTranslationUnit2FullArgv([In] QuantumBinding.Clang.Interop.CXIndex CIdx, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_filename, string[] command_line_args, [In] int num_command_line_args, [In] System.IntPtr unsaved_files, [In] uint num_unsaved_files, [In] uint options, [Out] out QuantumBinding.Clang.Interop.CXTranslationUnit out_TU);

        ///<summary>
        /// Release a printing policy.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_PrintingPolicy_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_PrintingPolicy_dispose([In] QuantumBinding.Clang.Interop.CXPrintingPolicy Policy);

        ///<summary>
        /// Get a property value for the given printing policy.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_PrintingPolicy_getProperty", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_PrintingPolicy_getProperty([In] QuantumBinding.Clang.Interop.CXPrintingPolicy Policy, [In] CXPrintingPolicyProperty Property);

        ///<summary>
        /// Set a property value for the given printing policy.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_PrintingPolicy_setProperty", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_PrintingPolicy_setProperty([In] QuantumBinding.Clang.Interop.CXPrintingPolicy Policy, [In] CXPrintingPolicyProperty Property, [In] uint Value);

        ///<summary>
        /// Returns non-zero if range is null.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Range_isNull", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Range_isNull([In] QuantumBinding.Clang.Interop.CXSourceRange range);

        ///<summary>
        /// Dispose the remapping.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_remap_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_remap_dispose([In] QuantumBinding.Clang.Interop.CXRemapping param0);

        ///<summary>
        /// Get the original and the associated filename from the remapping.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_remap_getFilenames", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_remap_getFilenames([In] QuantumBinding.Clang.Interop.CXRemapping param0, [In] uint index, [Out] out QuantumBinding.Clang.Interop.CXString original, [Out] out QuantumBinding.Clang.Interop.CXString transformed);

        ///<summary>
        /// Determine the number of remappings.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_remap_getNumFiles", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_remap_getNumFiles([In] QuantumBinding.Clang.Interop.CXRemapping param0);

        ///<summary>
        /// Reparse the source files that produced this translation unit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_reparseTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_reparseTranslationUnit([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] uint num_unsaved_files, [In] System.IntPtr unsaved_files, [In] uint options);

        ///<summary>
        /// Saves a translation unit into a serialized representation of that translation unit on disk.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_saveTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_saveTranslationUnit([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string FileName, [In] uint options);

        ///<summary>
        /// Sort the code-completion results in case-insensitive alphabetical order.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_sortCodeCompletionResults", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_sortCodeCompletionResults([In] QuantumBinding.Clang.Interop.CXCodeCompleteResults[] Results, [In] uint NumResults);

        ///<summary>
        /// Suspend a translation unit in order to free memory associated with it.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_suspendTranslationUnit", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_suspendTranslationUnit([In] QuantumBinding.Clang.Interop.CXTranslationUnit param0);

        ///<summary>
        /// Destroy the CXTargetInfo object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TargetInfo_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_TargetInfo_dispose([In] QuantumBinding.Clang.Interop.CXTargetInfo Info);

        ///<summary>
        /// Get the pointer width of the target in bits.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TargetInfo_getPointerWidth", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_TargetInfo_getPointerWidth([In] QuantumBinding.Clang.Interop.CXTargetInfo Info);

        ///<summary>
        /// Get the normalized target triple as a string.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TargetInfo_getTriple", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_TargetInfo_getTriple([In] QuantumBinding.Clang.Interop.CXTargetInfo Info);

        ///<summary>
        /// Returns text contained in the AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TextComment_getText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_TextComment_getText([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Enable/disable crash recovery.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_toggleCrashRecovery", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_toggleCrashRecovery([In] uint isEnabled);

        ///<summary>
        /// Tokenize the source code described by the given range into raw lexical tokens.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_tokenize", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_tokenize([In] QuantumBinding.Clang.Interop.CXTranslationUnit TU, [In] QuantumBinding.Clang.Interop.CXSourceRange Range, [In, Out] ref System.IntPtr Tokens, [Out] out uint NumTokens);

        ///<summary>
        /// Returns zero-based nesting depth of this parameter in the template parameter list.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TParamCommandComment_getDepth", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_TParamCommandComment_getDepth([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns zero-based parameter index in the template parameter list at a given nesting depth.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TParamCommandComment_getIndex", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_TParamCommandComment_getIndex([In] QuantumBinding.Clang.Interop.CXComment Comment, [In] uint Depth);

        ///<summary>
        /// Returns template parameter name.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TParamCommandComment_getParamName", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_TParamCommandComment_getParamName([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns non-zero if the parameter that this AST node represents was found in the template parameter list and clang_TParamCommandComment_getDepth and clang_TParamCommandComment_getIndex functions will return a meaningful value.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_TParamCommandComment_isParamPositionValid", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_TParamCommandComment_isParamPositionValid([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Return the alignment of a type in bytes as per C++[expr.alignof] standard.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getAlignOf", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_Type_getAlignOf([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Return the class type of an member pointer type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getClassType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Type_getClassType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the ref-qualifier kind of a function or method.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getCXXRefQualifier", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXRefQualifierKind clang_Type_getCXXRefQualifier([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Return the type that was modified by this attributed type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getModifiedType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Type_getModifiedType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the type named by the qualified-id.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getNamedType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Type_getNamedType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the nullability kind of a pointer type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getNullability", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXTypeNullabilityKind clang_Type_getNullability([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the number of protocol references associated with an ObjC object/id.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getNumObjCProtocolRefs", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Type_getNumObjCProtocolRefs([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retreive the number of type arguments associated with an ObjC object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getNumObjCTypeArgs", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Type_getNumObjCTypeArgs([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Returns the number of template arguments for given template specialization, or -1 if type T is not a template specialization.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getNumTemplateArguments", CallingConvention = CallingConvention.Cdecl)]
        internal static extern int clang_Type_getNumTemplateArguments([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Returns the Objective-C type encoding for the specified CXType.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getObjCEncoding", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_Type_getObjCEncoding([In] QuantumBinding.Clang.Interop.CXType type);

        ///<summary>
        /// Retrieves the base type of the ObjCObjectType.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getObjCObjectBaseType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Type_getObjCObjectBaseType([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Retrieve the decl for a protocol reference for an ObjC object/id.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getObjCProtocolDecl", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXCursor clang_Type_getObjCProtocolDecl([In] QuantumBinding.Clang.Interop.CXType T, [In] uint i);

        ///<summary>
        /// Retrieve a type argument associated with an ObjC object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getObjCTypeArg", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Type_getObjCTypeArg([In] QuantumBinding.Clang.Interop.CXType T, [In] uint i);

        ///<summary>
        /// Return the offset of a field named S in a record of type T in bits as it would be returned by __offsetof__ as per C++11[18.2p4]
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getOffsetOf", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_Type_getOffsetOf([In] QuantumBinding.Clang.Interop.CXType T, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string S);

        ///<summary>
        /// Return the size of a type in bytes as per C++[expr.sizeof] standard.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getSizeOf", CallingConvention = CallingConvention.Cdecl)]
        internal static extern long clang_Type_getSizeOf([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Returns the type template argument of a template class specialization at given index.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_getTemplateArgumentAsType", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXType clang_Type_getTemplateArgumentAsType([In] QuantumBinding.Clang.Interop.CXType T, [In] uint i);

        ///<summary>
        /// Determine if a typedef is 'transparent' tag.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_isTransparentTagTypedef", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Type_isTransparentTagTypedef([In] QuantumBinding.Clang.Interop.CXType T);

        ///<summary>
        /// Visit the fields of a particular type.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_Type_visitFields", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_Type_visitFields([In] QuantumBinding.Clang.Interop.CXType T, [In] CXFieldVisitor visitor, [In] QuantumBinding.Clang.Interop.CXClientData client_data);

        ///<summary>
        /// Returns text contained in the AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VerbatimBlockLineComment_getText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_VerbatimBlockLineComment_getText([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Returns text contained in the AST node.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VerbatimLineComment_getText", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXString clang_VerbatimLineComment_getText([In] QuantumBinding.Clang.Interop.CXComment Comment);

        ///<summary>
        /// Map an absolute virtual file path to an absolute real one. The virtual path must be canonicalized (not contain "."/"..").
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VirtualFileOverlay_addFileMapping", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_VirtualFileOverlay_addFileMapping([In] QuantumBinding.Clang.Interop.CXVirtualFileOverlay param0, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string virtualPath, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string realPath);

        ///<summary>
        /// Create a CXVirtualFileOverlay object. Must be disposed with clang_VirtualFileOverlay_dispose().
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VirtualFileOverlay_create", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXVirtualFileOverlay clang_VirtualFileOverlay_create([In] uint options);

        ///<summary>
        /// Dispose a CXVirtualFileOverlay object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VirtualFileOverlay_dispose", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void clang_VirtualFileOverlay_dispose([In] QuantumBinding.Clang.Interop.CXVirtualFileOverlay param0);

        ///<summary>
        /// Set the case sensitivity for the CXVirtualFileOverlay object. The CXVirtualFileOverlay object is case-sensitive by default, this option can be used to override the default.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VirtualFileOverlay_setCaseSensitivity", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_VirtualFileOverlay_setCaseSensitivity([In] QuantumBinding.Clang.Interop.CXVirtualFileOverlay param0, [In] int caseSensitive);

        ///<summary>
        /// Write out the CXVirtualFileOverlay object to a char buffer.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_VirtualFileOverlay_writeToBuffer", CallingConvention = CallingConvention.Cdecl)]
        internal static extern CXErrorCode clang_VirtualFileOverlay_writeToBuffer([In] QuantumBinding.Clang.Interop.CXVirtualFileOverlay param0, [In] uint options, [Out] out System.IntPtr out_buffer_ptr, [Out] out uint out_buffer_size);

        ///<summary>
        /// Visit the children of a particular cursor.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "clang_visitChildren", CallingConvention = CallingConvention.Cdecl)]
        internal static extern uint clang_visitChildren([In] QuantumBinding.Clang.Interop.CXCursor parent, [In] CXCursorVisitor visitor, [In] QuantumBinding.Clang.Interop.CXClientData client_data);

    }


}

