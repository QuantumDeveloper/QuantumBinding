// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace QuantumBinding.Clang
{
    using System;
    using System.Runtime.InteropServices;

    ///<summary>
    /// Error codes returned by libclang routines.
    ///</summary>
    public enum CXErrorCode : uint
    {
        ///<summary>
        /// No error.
        ///</summary>
        CXError_Success = 0,

        ///<summary>
        /// A generic error code, no further details are available.
        ///</summary>
        CXError_Failure = 1,

        ///<summary>
        /// libclang crashed while performing the requested operation.
        ///</summary>
        CXError_Crashed = 2,

        ///<summary>
        /// The function detected that the arguments violate the function contract.
        ///</summary>
        CXError_InvalidArguments = 3,

        ///<summary>
        /// An AST deserialization error has occurred.
        ///</summary>
        CXError_ASTReadError = 4,

    }

    ///<summary>
    /// Describes the availability of a particular entity, which indicates whether the use of this entity will result in a warning or error due to it being deprecated or unavailable.
    ///</summary>
    public enum CXAvailabilityKind : uint
    {
        ///<summary>
        /// The entity is available.
        ///</summary>
        CXAvailability_Available = 0,

        ///<summary>
        /// The entity is available, but has been deprecated (and its use is not recommended).
        ///</summary>
        CXAvailability_Deprecated = 1,

        ///<summary>
        /// The entity is not available; any use of it will be an error.
        ///</summary>
        CXAvailability_NotAvailable = 2,

        ///<summary>
        /// The entity is available, but not accessible; any use of it will be an error.
        ///</summary>
        CXAvailability_NotAccessible = 3,

    }

    ///<summary>
    /// Describes the exception specification of a cursor.
    ///</summary>
    public enum CXCursor_ExceptionSpecificationKind : uint
    {
        ///<summary>
        /// The cursor has no exception specification.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_None = 0,

        ///<summary>
        /// The cursor has exception specification throw()
        ///</summary>
        CXCursor_ExceptionSpecificationKind_DynamicNone = 1,

        ///<summary>
        /// The cursor has exception specification throw(T1, T2)
        ///</summary>
        CXCursor_ExceptionSpecificationKind_Dynamic = 2,

        ///<summary>
        /// The cursor has exception specification throw(...).
        ///</summary>
        CXCursor_ExceptionSpecificationKind_MSAny = 3,

        ///<summary>
        /// The cursor has exception specification basic noexcept.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4,

        ///<summary>
        /// The cursor has exception specification computed noexcept.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5,

        ///<summary>
        /// The exception specification has not yet been evaluated.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_Unevaluated = 6,

        ///<summary>
        /// The exception specification has not yet been instantiated.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_Uninstantiated = 7,

        ///<summary>
        /// The exception specification has not been parsed yet.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_Unparsed = 8,

        ///<summary>
        /// The cursor has a __declspec(nothrow) exception specification.
        ///</summary>
        CXCursor_ExceptionSpecificationKind_NoThrow = 9,

    }

    public enum CXGlobalOptFlags : uint
    {
        ///<summary>
        /// Used to indicate that no special CXIndex options are needed.
        ///</summary>
        CXGlobalOpt_None = 0,

        ///<summary>
        /// Used to indicate that threads that libclang creates for indexing purposes should use background priority.
        ///</summary>
        CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 1,

        ///<summary>
        /// Used to indicate that threads that libclang creates for editing purposes should use background priority.
        ///</summary>
        CXGlobalOpt_ThreadBackgroundPriorityForEditing = 2,

        ///<summary>
        /// Used to indicate that all threads that libclang creates should use background priority.
        ///</summary>
        CXGlobalOpt_ThreadBackgroundPriorityForAll = 3,

    }

    ///<summary>
    /// Describes the severity of a particular diagnostic.
    ///</summary>
    public enum CXDiagnosticSeverity : uint
    {
        ///<summary>
        /// A diagnostic that has been suppressed, e.g., by a command-line option.
        ///</summary>
        CXDiagnostic_Ignored = 0,

        ///<summary>
        /// This diagnostic is a note that should be attached to the previous (non-note) diagnostic.
        ///</summary>
        CXDiagnostic_Note = 1,

        ///<summary>
        /// This diagnostic indicates suspicious code that may not be wrong.
        ///</summary>
        CXDiagnostic_Warning = 2,

        ///<summary>
        /// This diagnostic indicates that the code is ill-formed.
        ///</summary>
        CXDiagnostic_Error = 3,

        ///<summary>
        /// This diagnostic indicates that the code is ill-formed such that future parser recovery is unlikely to produce useful results.
        ///</summary>
        CXDiagnostic_Fatal = 4,

    }

    ///<summary>
    /// Describes the kind of error that occurred (if any) in a call to clang_loadDiagnostics.
    ///</summary>
    public enum CXLoadDiag_Error : uint
    {
        ///<summary>
        /// Indicates that no error occurred.
        ///</summary>
        CXLoadDiag_None = 0,

        ///<summary>
        /// Indicates that an unknown error occurred while attempting to deserialize diagnostics.
        ///</summary>
        CXLoadDiag_Unknown = 1,

        ///<summary>
        /// Indicates that the file containing the serialized diagnostics could not be opened.
        ///</summary>
        CXLoadDiag_CannotLoad = 2,

        ///<summary>
        /// Indicates that the serialized diagnostics file is invalid or corrupt.
        ///</summary>
        CXLoadDiag_InvalidFile = 3,

    }

    ///<summary>
    /// Options to control the display of diagnostics.
    ///</summary>
    [Flags]
    public enum CXDiagnosticDisplayOptions : uint
    {
        ///<summary>
        /// Display the source-location information where the diagnostic was located.
        ///</summary>
        CXDiagnostic_DisplaySourceLocation = 1,

        ///<summary>
        /// If displaying the source-location information of the diagnostic, also include the column number.
        ///</summary>
        CXDiagnostic_DisplayColumn = 2,

        ///<summary>
        /// If displaying the source-location information of the diagnostic, also include information about source ranges in a machine-parsable format.
        ///</summary>
        CXDiagnostic_DisplaySourceRanges = 4,

        ///<summary>
        /// Display the option name associated with this diagnostic, if any.
        ///</summary>
        CXDiagnostic_DisplayOption = 8,

        ///<summary>
        /// Display the category number associated with this diagnostic, if any.
        ///</summary>
        CXDiagnostic_DisplayCategoryId = 16,

        ///<summary>
        /// Display the category name associated with this diagnostic, if any.
        ///</summary>
        CXDiagnostic_DisplayCategoryName = 32,

    }

    ///<summary>
    /// Flags that control the creation of translation units.
    ///</summary>
    [Flags]
    public enum CXTranslationUnit_Flags : uint
    {
        ///<summary>
        /// Used to indicate that no special translation-unit options are needed.
        ///</summary>
        CXTranslationUnit_None = 0,

        ///<summary>
        /// Used to indicate that the parser should construct a "detailed" preprocessing record, including all macro definitions and instantiations.
        ///</summary>
        CXTranslationUnit_DetailedPreprocessingRecord = 1,

        ///<summary>
        /// Used to indicate that the translation unit is incomplete.
        ///</summary>
        CXTranslationUnit_Incomplete = 2,

        ///<summary>
        /// Used to indicate that the translation unit should be built with an implicit precompiled header for the preamble.
        ///</summary>
        CXTranslationUnit_PrecompiledPreamble = 4,

        ///<summary>
        /// Used to indicate that the translation unit should cache some code-completion results with each reparse of the source file.
        ///</summary>
        CXTranslationUnit_CacheCompletionResults = 8,

        ///<summary>
        /// Used to indicate that the translation unit will be serialized with clang_saveTranslationUnit.
        ///</summary>
        CXTranslationUnit_ForSerialization = 16,

        ///<summary>
        /// DEPRECATED: Enabled chained precompiled preambles in C++.
        ///</summary>
        CXTranslationUnit_CXXChainedPCH = 32,

        ///<summary>
        /// Used to indicate that function/method bodies should be skipped while parsing.
        ///</summary>
        CXTranslationUnit_SkipFunctionBodies = 64,

        ///<summary>
        /// Used to indicate that brief documentation comments should be included into the set of code completions returned from this translation unit.
        ///</summary>
        CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128,

        ///<summary>
        /// Used to indicate that the precompiled preamble should be created on the first parse. Otherwise it will be created on the first reparse. This trades runtime on the first parse (serializing the preamble takes time) for reduced runtime on the second parse (can now reuse the preamble).
        ///</summary>
        CXTranslationUnit_CreatePreambleOnFirstParse = 256,

        ///<summary>
        /// Do not stop processing when fatal errors are encountered.
        ///</summary>
        CXTranslationUnit_KeepGoing = 512,

        ///<summary>
        /// Sets the preprocessor in a mode for parsing a single file only.
        ///</summary>
        CXTranslationUnit_SingleFileParse = 1024,

        ///<summary>
        /// Used in combination with CXTranslationUnit_SkipFunctionBodies to constrain the skipping of function bodies to the preamble.
        ///</summary>
        CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048,

        ///<summary>
        /// Used to indicate that attributed types should be included in CXType.
        ///</summary>
        CXTranslationUnit_IncludeAttributedTypes = 4096,

        ///<summary>
        /// Used to indicate that implicit attributes should be visited.
        ///</summary>
        CXTranslationUnit_VisitImplicitAttributes = 8192,

        ///<summary>
        /// Used to indicate that non-errors from included files should be ignored.
        ///</summary>
        CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384,

        ///<summary>
        /// Tells the preprocessor not to skip excluded conditional blocks.
        ///</summary>
        CXTranslationUnit_RetainExcludedConditionalBlocks = 32768,

    }

    ///<summary>
    /// Flags that control how translation units are saved.
    ///</summary>
    [Flags]
    public enum CXSaveTranslationUnit_Flags : uint
    {
        ///<summary>
        /// Used to indicate that no special saving options are needed.
        ///</summary>
        CXSaveTranslationUnit_None = 0,

    }

    ///<summary>
    /// Describes the kind of error that occurred (if any) in a call to clang_saveTranslationUnit().
    ///</summary>
    public enum CXSaveError : uint
    {
        ///<summary>
        /// Indicates that no error occurred while saving a translation unit.
        ///</summary>
        CXSaveError_None = 0,

        ///<summary>
        /// Indicates that an unknown error occurred while attempting to save the file.
        ///</summary>
        CXSaveError_Unknown = 1,

        ///<summary>
        /// Indicates that errors during translation prevented this attempt to save the translation unit.
        ///</summary>
        CXSaveError_TranslationErrors = 2,

        ///<summary>
        /// Indicates that the translation unit to be saved was somehow invalid (e.g., NULL).
        ///</summary>
        CXSaveError_InvalidTU = 3,

    }

    ///<summary>
    /// Flags that control the reparsing of translation units.
    ///</summary>
    [Flags]
    public enum CXReparse_Flags : uint
    {
        ///<summary>
        /// Used to indicate that no special reparsing options are needed.
        ///</summary>
        CXReparse_None = 0,

    }

    ///<summary>
    /// Categorizes how memory is being used by a translation unit.
    ///</summary>
    public enum CXTUResourceUsageKind : uint
    {
        CXTUResourceUsage_AST = 1,

        CXTUResourceUsage_Identifiers = 2,

        CXTUResourceUsage_Selectors = 3,

        CXTUResourceUsage_GlobalCompletionResults = 4,

        CXTUResourceUsage_SourceManagerContentCache = 5,

        CXTUResourceUsage_AST_SideTables = 6,

        CXTUResourceUsage_SourceManager_Membuffer_Malloc = 7,

        CXTUResourceUsage_SourceManager_Membuffer_MMap = 8,

        CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 9,

        CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 10,

        CXTUResourceUsage_Preprocessor = 11,

        CXTUResourceUsage_PreprocessingRecord = 12,

        CXTUResourceUsage_SourceManager_DataStructures = 13,

        CXTUResourceUsage_Preprocessor_HeaderSearch = 14,

        CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = 1,

        CXTUResourceUsage_MEMORY_IN_BYTES_END = 14,

        CXTUResourceUsage_First = 1,

        CXTUResourceUsage_Last = 14,

    }

    ///<summary>
    /// Describes the kind of entity that a cursor refers to.
    ///</summary>
    public enum CXCursorKind : uint
    {
        ///<summary>
        /// Declarations
        ///</summary>
        CXCursor_UnexposedDecl = 1,

        ///<summary>
        /// A C or C++ struct.
        ///</summary>
        CXCursor_StructDecl = 2,

        ///<summary>
        /// A C or C++ union.
        ///</summary>
        CXCursor_UnionDecl = 3,

        ///<summary>
        /// A C++ class.
        ///</summary>
        CXCursor_ClassDecl = 4,

        ///<summary>
        /// An enumeration.
        ///</summary>
        CXCursor_EnumDecl = 5,

        ///<summary>
        /// A field (in C) or non-static data member (in C++) in a struct, union, or C++ class.
        ///</summary>
        CXCursor_FieldDecl = 6,

        ///<summary>
        /// An enumerator constant.
        ///</summary>
        CXCursor_EnumConstantDecl = 7,

        ///<summary>
        /// A function.
        ///</summary>
        CXCursor_FunctionDecl = 8,

        ///<summary>
        /// A variable.
        ///</summary>
        CXCursor_VarDecl = 9,

        ///<summary>
        /// A function or method parameter.
        ///</summary>
        CXCursor_ParmDecl = 10,

        ///<summary>
        /// An Objective-C @interface.
        ///</summary>
        CXCursor_ObjCInterfaceDecl = 11,

        ///<summary>
        /// An Objective-C @interface for a category.
        ///</summary>
        CXCursor_ObjCCategoryDecl = 12,

        ///<summary>
        /// An Objective-C @protocol declaration.
        ///</summary>
        CXCursor_ObjCProtocolDecl = 13,

        ///<summary>
        /// An Objective-C @property declaration.
        ///</summary>
        CXCursor_ObjCPropertyDecl = 14,

        ///<summary>
        /// An Objective-C instance variable.
        ///</summary>
        CXCursor_ObjCIvarDecl = 15,

        ///<summary>
        /// An Objective-C instance method.
        ///</summary>
        CXCursor_ObjCInstanceMethodDecl = 16,

        ///<summary>
        /// An Objective-C class method.
        ///</summary>
        CXCursor_ObjCClassMethodDecl = 17,

        ///<summary>
        /// An Objective-C @implementation.
        ///</summary>
        CXCursor_ObjCImplementationDecl = 18,

        ///<summary>
        /// An Objective-C @implementation for a category.
        ///</summary>
        CXCursor_ObjCCategoryImplDecl = 19,

        ///<summary>
        /// A typedef.
        ///</summary>
        CXCursor_TypedefDecl = 20,

        ///<summary>
        /// A C++ class method.
        ///</summary>
        CXCursor_CXXMethod = 21,

        ///<summary>
        /// A C++ namespace.
        ///</summary>
        CXCursor_Namespace = 22,

        ///<summary>
        /// A linkage specification, e.g. 'extern "C"'.
        ///</summary>
        CXCursor_LinkageSpec = 23,

        ///<summary>
        /// A C++ constructor.
        ///</summary>
        CXCursor_Constructor = 24,

        ///<summary>
        /// A C++ destructor.
        ///</summary>
        CXCursor_Destructor = 25,

        ///<summary>
        /// A C++ conversion function.
        ///</summary>
        CXCursor_ConversionFunction = 26,

        ///<summary>
        /// A C++ template type parameter.
        ///</summary>
        CXCursor_TemplateTypeParameter = 27,

        ///<summary>
        /// A C++ non-type template parameter.
        ///</summary>
        CXCursor_NonTypeTemplateParameter = 28,

        ///<summary>
        /// A C++ template template parameter.
        ///</summary>
        CXCursor_TemplateTemplateParameter = 29,

        ///<summary>
        /// A C++ function template.
        ///</summary>
        CXCursor_FunctionTemplate = 30,

        ///<summary>
        /// A C++ class template.
        ///</summary>
        CXCursor_ClassTemplate = 31,

        ///<summary>
        /// A C++ class template partial specialization.
        ///</summary>
        CXCursor_ClassTemplatePartialSpecialization = 32,

        ///<summary>
        /// A C++ namespace alias declaration.
        ///</summary>
        CXCursor_NamespaceAlias = 33,

        ///<summary>
        /// A C++ using directive.
        ///</summary>
        CXCursor_UsingDirective = 34,

        ///<summary>
        /// A C++ using declaration.
        ///</summary>
        CXCursor_UsingDeclaration = 35,

        ///<summary>
        /// A C++ alias declaration
        ///</summary>
        CXCursor_TypeAliasDecl = 36,

        ///<summary>
        /// An Objective-C @synthesize definition.
        ///</summary>
        CXCursor_ObjCSynthesizeDecl = 37,

        ///<summary>
        /// An Objective-C @dynamic definition.
        ///</summary>
        CXCursor_ObjCDynamicDecl = 38,

        ///<summary>
        /// An access specifier.
        ///</summary>
        CXCursor_CXXAccessSpecifier = 39,

        ///<summary>
        /// An access specifier.
        ///</summary>
        CXCursor_FirstDecl = 1,

        ///<summary>
        /// An access specifier.
        ///</summary>
        CXCursor_LastDecl = 39,

        ///<summary>
        /// Decl references
        ///</summary>
        CXCursor_FirstRef = 40,

        CXCursor_ObjCSuperClassRef = 40,

        CXCursor_ObjCProtocolRef = 41,

        CXCursor_ObjCClassRef = 42,

        ///<summary>
        /// A reference to a type declaration.
        ///</summary>
        CXCursor_TypeRef = 43,

        ///<summary>
        /// A reference to a type declaration.
        ///</summary>
        CXCursor_CXXBaseSpecifier = 44,

        ///<summary>
        /// A reference to a class template, function template, template template parameter, or class template partial specialization.
        ///</summary>
        CXCursor_TemplateRef = 45,

        ///<summary>
        /// A reference to a namespace or namespace alias.
        ///</summary>
        CXCursor_NamespaceRef = 46,

        ///<summary>
        /// A reference to a member of a struct, union, or class that occurs in some non-expression context, e.g., a designated initializer.
        ///</summary>
        CXCursor_MemberRef = 47,

        ///<summary>
        /// A reference to a labeled statement.
        ///</summary>
        CXCursor_LabelRef = 48,

        ///<summary>
        /// A reference to a set of overloaded functions or function templates that has not yet been resolved to a specific function or function template.
        ///</summary>
        CXCursor_OverloadedDeclRef = 49,

        ///<summary>
        /// A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list.
        ///</summary>
        CXCursor_VariableRef = 50,

        ///<summary>
        /// A reference to a variable that occurs in some non-expression context, e.g., a C++ lambda capture list.
        ///</summary>
        CXCursor_LastRef = 50,

        ///<summary>
        /// Error conditions
        ///</summary>
        CXCursor_FirstInvalid = 70,

        ///<summary>
        /// Error conditions
        ///</summary>
        CXCursor_InvalidFile = 70,

        ///<summary>
        /// Error conditions
        ///</summary>
        CXCursor_NoDeclFound = 71,

        ///<summary>
        /// Error conditions
        ///</summary>
        CXCursor_NotImplemented = 72,

        ///<summary>
        /// Error conditions
        ///</summary>
        CXCursor_InvalidCode = 73,

        ///<summary>
        /// Error conditions
        ///</summary>
        CXCursor_LastInvalid = 73,

        ///<summary>
        /// Expressions
        ///</summary>
        CXCursor_FirstExpr = 100,

        ///<summary>
        /// An expression whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_UnexposedExpr = 100,

        ///<summary>
        /// An expression that refers to some value declaration, such as a function, variable, or enumerator.
        ///</summary>
        CXCursor_DeclRefExpr = 101,

        ///<summary>
        /// An expression that refers to a member of a struct, union, class, Objective-C class, etc.
        ///</summary>
        CXCursor_MemberRefExpr = 102,

        ///<summary>
        /// An expression that calls a function.
        ///</summary>
        CXCursor_CallExpr = 103,

        ///<summary>
        /// An expression that sends a message to an Objective-C object or class.
        ///</summary>
        CXCursor_ObjCMessageExpr = 104,

        ///<summary>
        /// An expression that represents a block literal.
        ///</summary>
        CXCursor_BlockExpr = 105,

        ///<summary>
        /// An integer literal.
        ///</summary>
        CXCursor_IntegerLiteral = 106,

        ///<summary>
        /// A floating point number literal.
        ///</summary>
        CXCursor_FloatingLiteral = 107,

        ///<summary>
        /// An imaginary number literal.
        ///</summary>
        CXCursor_ImaginaryLiteral = 108,

        ///<summary>
        /// A string literal.
        ///</summary>
        CXCursor_StringLiteral = 109,

        ///<summary>
        /// A character literal.
        ///</summary>
        CXCursor_CharacterLiteral = 110,

        ///<summary>
        /// A parenthesized expression, e.g. "(1)".
        ///</summary>
        CXCursor_ParenExpr = 111,

        ///<summary>
        /// This represents the unary-expression's (except sizeof and alignof).
        ///</summary>
        CXCursor_UnaryOperator = 112,

        ///<summary>
        /// [C99 6.5.2.1] Array Subscripting.
        ///</summary>
        CXCursor_ArraySubscriptExpr = 113,

        ///<summary>
        /// A builtin binary operation expression such as "x + y" or "x <= y".
        ///</summary>
        CXCursor_BinaryOperator = 114,

        ///<summary>
        /// Compound assignment such as "+=".
        ///</summary>
        CXCursor_CompoundAssignOperator = 115,

        ///<summary>
        /// The ?: ternary operator.
        ///</summary>
        CXCursor_ConditionalOperator = 116,

        ///<summary>
        /// An explicit cast in C (C99 6.5.4) or a C-style cast in C++ (C++ [expr.cast]), which uses the syntax (Type)expr.
        ///</summary>
        CXCursor_CStyleCastExpr = 117,

        ///<summary>
        /// [C99 6.5.2.5]
        ///</summary>
        CXCursor_CompoundLiteralExpr = 118,

        ///<summary>
        /// Describes an C or C++ initializer list.
        ///</summary>
        CXCursor_InitListExpr = 119,

        ///<summary>
        /// The GNU address of label extension, representing &&label.
        ///</summary>
        CXCursor_AddrLabelExpr = 120,

        ///<summary>
        /// This is the GNU Statement Expression extension: ({int X=4; X;})
        ///</summary>
        CXCursor_StmtExpr = 121,

        ///<summary>
        /// Represents a C11 generic selection.
        ///</summary>
        CXCursor_GenericSelectionExpr = 122,

        ///<summary>
        /// Implements the GNU __null extension, which is a name for a null pointer constant that has integral type (e.g., int or long) and is the same size and alignment as a pointer.
        ///</summary>
        CXCursor_GNUNullExpr = 123,

        ///<summary>
        /// C++'s static_cast<> expression.
        ///</summary>
        CXCursor_CXXStaticCastExpr = 124,

        ///<summary>
        /// C++'s dynamic_cast<> expression.
        ///</summary>
        CXCursor_CXXDynamicCastExpr = 125,

        ///<summary>
        /// C++'s reinterpret_cast<> expression.
        ///</summary>
        CXCursor_CXXReinterpretCastExpr = 126,

        ///<summary>
        /// C++'s const_cast<> expression.
        ///</summary>
        CXCursor_CXXConstCastExpr = 127,

        ///<summary>
        /// Represents an explicit C++ type conversion that uses "functional" notion (C++ [expr.type.conv]).
        ///</summary>
        CXCursor_CXXFunctionalCastExpr = 128,

        ///<summary>
        /// OpenCL's addrspace_cast<> expression.
        ///</summary>
        CXCursor_CXXAddrspaceCastExpr = 129,

        ///<summary>
        /// A C++ typeid expression (C++ [expr.typeid]).
        ///</summary>
        CXCursor_CXXTypeidExpr = 130,

        ///<summary>
        /// [C++ 2.13.5] C++ Boolean Literal.
        ///</summary>
        CXCursor_CXXBoolLiteralExpr = 131,

        ///<summary>
        /// [C++0x 2.14.7] C++ Pointer Literal.
        ///</summary>
        CXCursor_CXXNullPtrLiteralExpr = 132,

        ///<summary>
        /// Represents the "this" expression in C++
        ///</summary>
        CXCursor_CXXThisExpr = 133,

        ///<summary>
        /// [C++ 15] C++ Throw Expression.
        ///</summary>
        CXCursor_CXXThrowExpr = 134,

        ///<summary>
        /// A new expression for memory allocation and constructor calls, e.g: "new CXXNewExpr(foo)".
        ///</summary>
        CXCursor_CXXNewExpr = 135,

        ///<summary>
        /// A delete expression for memory deallocation and destructor calls, e.g. "delete[] pArray".
        ///</summary>
        CXCursor_CXXDeleteExpr = 136,

        ///<summary>
        /// A unary expression. (noexcept, sizeof, or other traits)
        ///</summary>
        CXCursor_UnaryExpr = 137,

        ///<summary>
        /// An Objective-C string literal i.e. "foo".
        ///</summary>
        CXCursor_ObjCStringLiteral = 138,

        ///<summary>
        /// An Objective-C @encode expression.
        ///</summary>
        CXCursor_ObjCEncodeExpr = 139,

        ///<summary>
        /// An Objective-C @selector expression.
        ///</summary>
        CXCursor_ObjCSelectorExpr = 140,

        ///<summary>
        /// An Objective-C @protocol expression.
        ///</summary>
        CXCursor_ObjCProtocolExpr = 141,

        ///<summary>
        /// An Objective-C "bridged" cast expression, which casts between Objective-C pointers and C pointers, transferring ownership in the process.
        ///</summary>
        CXCursor_ObjCBridgedCastExpr = 142,

        ///<summary>
        /// Represents a C++0x pack expansion that produces a sequence of expressions.
        ///</summary>
        CXCursor_PackExpansionExpr = 143,

        ///<summary>
        /// Represents an expression that computes the length of a parameter pack.
        ///</summary>
        CXCursor_SizeOfPackExpr = 144,

        ///<summary>
        /// Represents a C++ lambda expression that produces a local function object.
        ///</summary>
        CXCursor_LambdaExpr = 145,

        ///<summary>
        /// Objective-c Boolean Literal.
        ///</summary>
        CXCursor_ObjCBoolLiteralExpr = 146,

        ///<summary>
        /// Represents the "self" expression in an Objective-C method.
        ///</summary>
        CXCursor_ObjCSelfExpr = 147,

        ///<summary>
        /// OpenMP 5.0 [2.1.5, Array Section].
        ///</summary>
        CXCursor_OMPArraySectionExpr = 148,

        ///<summary>
        /// Represents an (...) check.
        ///</summary>
        CXCursor_ObjCAvailabilityCheckExpr = 149,

        ///<summary>
        /// Fixed point literal
        ///</summary>
        CXCursor_FixedPointLiteral = 150,

        ///<summary>
        /// OpenMP 5.0 [2.1.4, Array Shaping].
        ///</summary>
        CXCursor_OMPArrayShapingExpr = 151,

        ///<summary>
        /// OpenMP 5.0 [2.1.6 Iterators]
        ///</summary>
        CXCursor_OMPIteratorExpr = 152,

        ///<summary>
        /// OpenMP 5.0 [2.1.6 Iterators]
        ///</summary>
        CXCursor_LastExpr = 152,

        ///<summary>
        /// Statements
        ///</summary>
        CXCursor_FirstStmt = 200,

        ///<summary>
        /// A statement whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_UnexposedStmt = 200,

        ///<summary>
        /// A labelled statement in a function.
        ///</summary>
        CXCursor_LabelStmt = 201,

        ///<summary>
        /// A group of statements like { stmt stmt }.
        ///</summary>
        CXCursor_CompoundStmt = 202,

        ///<summary>
        /// A case statement.
        ///</summary>
        CXCursor_CaseStmt = 203,

        ///<summary>
        /// A default statement.
        ///</summary>
        CXCursor_DefaultStmt = 204,

        ///<summary>
        /// An if statement
        ///</summary>
        CXCursor_IfStmt = 205,

        ///<summary>
        /// A switch statement.
        ///</summary>
        CXCursor_SwitchStmt = 206,

        ///<summary>
        /// A while statement.
        ///</summary>
        CXCursor_WhileStmt = 207,

        ///<summary>
        /// A do statement.
        ///</summary>
        CXCursor_DoStmt = 208,

        ///<summary>
        /// A for statement.
        ///</summary>
        CXCursor_ForStmt = 209,

        ///<summary>
        /// A goto statement.
        ///</summary>
        CXCursor_GotoStmt = 210,

        ///<summary>
        /// An indirect goto statement.
        ///</summary>
        CXCursor_IndirectGotoStmt = 211,

        ///<summary>
        /// A continue statement.
        ///</summary>
        CXCursor_ContinueStmt = 212,

        ///<summary>
        /// A break statement.
        ///</summary>
        CXCursor_BreakStmt = 213,

        ///<summary>
        /// A return statement.
        ///</summary>
        CXCursor_ReturnStmt = 214,

        ///<summary>
        /// A GCC inline assembly statement extension.
        ///</summary>
        CXCursor_GCCAsmStmt = 215,

        ///<summary>
        /// A GCC inline assembly statement extension.
        ///</summary>
        CXCursor_AsmStmt = 215,

        ///<summary>
        /// Objective-C's overall @try-@catch-@finally statement.
        ///</summary>
        CXCursor_ObjCAtTryStmt = 216,

        ///<summary>
        /// Objective-C's @catch statement.
        ///</summary>
        CXCursor_ObjCAtCatchStmt = 217,

        ///<summary>
        /// Objective-C's @finally statement.
        ///</summary>
        CXCursor_ObjCAtFinallyStmt = 218,

        ///<summary>
        /// Objective-C's @throw statement.
        ///</summary>
        CXCursor_ObjCAtThrowStmt = 219,

        ///<summary>
        /// Objective-C's @synchronized statement.
        ///</summary>
        CXCursor_ObjCAtSynchronizedStmt = 220,

        ///<summary>
        /// Objective-C's autorelease pool statement.
        ///</summary>
        CXCursor_ObjCAutoreleasePoolStmt = 221,

        ///<summary>
        /// Objective-C's collection statement.
        ///</summary>
        CXCursor_ObjCForCollectionStmt = 222,

        ///<summary>
        /// C++'s catch statement.
        ///</summary>
        CXCursor_CXXCatchStmt = 223,

        ///<summary>
        /// C++'s try statement.
        ///</summary>
        CXCursor_CXXTryStmt = 224,

        ///<summary>
        /// C++'s for (* : *) statement.
        ///</summary>
        CXCursor_CXXForRangeStmt = 225,

        ///<summary>
        /// Windows Structured Exception Handling's try statement.
        ///</summary>
        CXCursor_SEHTryStmt = 226,

        ///<summary>
        /// Windows Structured Exception Handling's except statement.
        ///</summary>
        CXCursor_SEHExceptStmt = 227,

        ///<summary>
        /// Windows Structured Exception Handling's finally statement.
        ///</summary>
        CXCursor_SEHFinallyStmt = 228,

        ///<summary>
        /// A MS inline assembly statement extension.
        ///</summary>
        CXCursor_MSAsmStmt = 229,

        ///<summary>
        /// The null statement ";": C99 6.8.3p3.
        ///</summary>
        CXCursor_NullStmt = 230,

        ///<summary>
        /// Adaptor class for mixing declarations with statements and expressions.
        ///</summary>
        CXCursor_DeclStmt = 231,

        ///<summary>
        /// OpenMP parallel directive.
        ///</summary>
        CXCursor_OMPParallelDirective = 232,

        ///<summary>
        /// OpenMP SIMD directive.
        ///</summary>
        CXCursor_OMPSimdDirective = 233,

        ///<summary>
        /// OpenMP for directive.
        ///</summary>
        CXCursor_OMPForDirective = 234,

        ///<summary>
        /// OpenMP sections directive.
        ///</summary>
        CXCursor_OMPSectionsDirective = 235,

        ///<summary>
        /// OpenMP section directive.
        ///</summary>
        CXCursor_OMPSectionDirective = 236,

        ///<summary>
        /// OpenMP single directive.
        ///</summary>
        CXCursor_OMPSingleDirective = 237,

        ///<summary>
        /// OpenMP parallel for directive.
        ///</summary>
        CXCursor_OMPParallelForDirective = 238,

        ///<summary>
        /// OpenMP parallel sections directive.
        ///</summary>
        CXCursor_OMPParallelSectionsDirective = 239,

        ///<summary>
        /// OpenMP task directive.
        ///</summary>
        CXCursor_OMPTaskDirective = 240,

        ///<summary>
        /// OpenMP master directive.
        ///</summary>
        CXCursor_OMPMasterDirective = 241,

        ///<summary>
        /// OpenMP critical directive.
        ///</summary>
        CXCursor_OMPCriticalDirective = 242,

        ///<summary>
        /// OpenMP taskyield directive.
        ///</summary>
        CXCursor_OMPTaskyieldDirective = 243,

        ///<summary>
        /// OpenMP barrier directive.
        ///</summary>
        CXCursor_OMPBarrierDirective = 244,

        ///<summary>
        /// OpenMP taskwait directive.
        ///</summary>
        CXCursor_OMPTaskwaitDirective = 245,

        ///<summary>
        /// OpenMP flush directive.
        ///</summary>
        CXCursor_OMPFlushDirective = 246,

        ///<summary>
        /// Windows Structured Exception Handling's leave statement.
        ///</summary>
        CXCursor_SEHLeaveStmt = 247,

        ///<summary>
        /// OpenMP ordered directive.
        ///</summary>
        CXCursor_OMPOrderedDirective = 248,

        ///<summary>
        /// OpenMP atomic directive.
        ///</summary>
        CXCursor_OMPAtomicDirective = 249,

        ///<summary>
        /// OpenMP for SIMD directive.
        ///</summary>
        CXCursor_OMPForSimdDirective = 250,

        ///<summary>
        /// OpenMP parallel for SIMD directive.
        ///</summary>
        CXCursor_OMPParallelForSimdDirective = 251,

        ///<summary>
        /// OpenMP target directive.
        ///</summary>
        CXCursor_OMPTargetDirective = 252,

        ///<summary>
        /// OpenMP teams directive.
        ///</summary>
        CXCursor_OMPTeamsDirective = 253,

        ///<summary>
        /// OpenMP taskgroup directive.
        ///</summary>
        CXCursor_OMPTaskgroupDirective = 254,

        ///<summary>
        /// OpenMP cancellation point directive.
        ///</summary>
        CXCursor_OMPCancellationPointDirective = 255,

        ///<summary>
        /// OpenMP cancel directive.
        ///</summary>
        CXCursor_OMPCancelDirective = 256,

        ///<summary>
        /// OpenMP target data directive.
        ///</summary>
        CXCursor_OMPTargetDataDirective = 257,

        ///<summary>
        /// OpenMP taskloop directive.
        ///</summary>
        CXCursor_OMPTaskLoopDirective = 258,

        ///<summary>
        /// OpenMP taskloop simd directive.
        ///</summary>
        CXCursor_OMPTaskLoopSimdDirective = 259,

        ///<summary>
        /// OpenMP distribute directive.
        ///</summary>
        CXCursor_OMPDistributeDirective = 260,

        ///<summary>
        /// OpenMP target enter data directive.
        ///</summary>
        CXCursor_OMPTargetEnterDataDirective = 261,

        ///<summary>
        /// OpenMP target exit data directive.
        ///</summary>
        CXCursor_OMPTargetExitDataDirective = 262,

        ///<summary>
        /// OpenMP target parallel directive.
        ///</summary>
        CXCursor_OMPTargetParallelDirective = 263,

        ///<summary>
        /// OpenMP target parallel for directive.
        ///</summary>
        CXCursor_OMPTargetParallelForDirective = 264,

        ///<summary>
        /// OpenMP target update directive.
        ///</summary>
        CXCursor_OMPTargetUpdateDirective = 265,

        ///<summary>
        /// OpenMP distribute parallel for directive.
        ///</summary>
        CXCursor_OMPDistributeParallelForDirective = 266,

        ///<summary>
        /// OpenMP distribute parallel for simd directive.
        ///</summary>
        CXCursor_OMPDistributeParallelForSimdDirective = 267,

        ///<summary>
        /// OpenMP distribute simd directive.
        ///</summary>
        CXCursor_OMPDistributeSimdDirective = 268,

        ///<summary>
        /// OpenMP target parallel for simd directive.
        ///</summary>
        CXCursor_OMPTargetParallelForSimdDirective = 269,

        ///<summary>
        /// OpenMP target simd directive.
        ///</summary>
        CXCursor_OMPTargetSimdDirective = 270,

        ///<summary>
        /// OpenMP teams distribute directive.
        ///</summary>
        CXCursor_OMPTeamsDistributeDirective = 271,

        ///<summary>
        /// OpenMP teams distribute simd directive.
        ///</summary>
        CXCursor_OMPTeamsDistributeSimdDirective = 272,

        ///<summary>
        /// OpenMP teams distribute parallel for simd directive.
        ///</summary>
        CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273,

        ///<summary>
        /// OpenMP teams distribute parallel for directive.
        ///</summary>
        CXCursor_OMPTeamsDistributeParallelForDirective = 274,

        ///<summary>
        /// OpenMP target teams directive.
        ///</summary>
        CXCursor_OMPTargetTeamsDirective = 275,

        ///<summary>
        /// OpenMP target teams distribute directive.
        ///</summary>
        CXCursor_OMPTargetTeamsDistributeDirective = 276,

        ///<summary>
        /// OpenMP target teams distribute parallel for directive.
        ///</summary>
        CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277,

        ///<summary>
        /// OpenMP target teams distribute parallel for simd directive.
        ///</summary>
        CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278,

        ///<summary>
        /// OpenMP target teams distribute simd directive.
        ///</summary>
        CXCursor_OMPTargetTeamsDistributeSimdDirective = 279,

        ///<summary>
        /// C++2a std::bit_cast expression.
        ///</summary>
        CXCursor_BuiltinBitCastExpr = 280,

        ///<summary>
        /// OpenMP master taskloop directive.
        ///</summary>
        CXCursor_OMPMasterTaskLoopDirective = 281,

        ///<summary>
        /// OpenMP parallel master taskloop directive.
        ///</summary>
        CXCursor_OMPParallelMasterTaskLoopDirective = 282,

        ///<summary>
        /// OpenMP master taskloop simd directive.
        ///</summary>
        CXCursor_OMPMasterTaskLoopSimdDirective = 283,

        ///<summary>
        /// OpenMP parallel master taskloop simd directive.
        ///</summary>
        CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284,

        ///<summary>
        /// OpenMP parallel master directive.
        ///</summary>
        CXCursor_OMPParallelMasterDirective = 285,

        ///<summary>
        /// OpenMP depobj directive.
        ///</summary>
        CXCursor_OMPDepobjDirective = 286,

        ///<summary>
        /// OpenMP scan directive.
        ///</summary>
        CXCursor_OMPScanDirective = 287,

        ///<summary>
        /// OpenMP scan directive.
        ///</summary>
        CXCursor_LastStmt = 287,

        ///<summary>
        /// Cursor that represents the translation unit itself.
        ///</summary>
        CXCursor_TranslationUnit = 300,

        ///<summary>
        /// Attributes
        ///</summary>
        CXCursor_FirstAttr = 400,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_UnexposedAttr = 400,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_IBActionAttr = 401,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_IBOutletAttr = 402,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_IBOutletCollectionAttr = 403,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CXXFinalAttr = 404,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CXXOverrideAttr = 405,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_AnnotateAttr = 406,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_AsmLabelAttr = 407,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_PackedAttr = 408,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_PureAttr = 409,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ConstAttr = 410,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_NoDuplicateAttr = 411,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CUDAConstantAttr = 412,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CUDADeviceAttr = 413,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CUDAGlobalAttr = 414,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CUDAHostAttr = 415,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_CUDASharedAttr = 416,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_VisibilityAttr = 417,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_DLLExport = 418,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_DLLImport = 419,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_NSReturnsRetained = 420,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_NSReturnsNotRetained = 421,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_NSReturnsAutoreleased = 422,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_NSConsumesSelf = 423,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_NSConsumed = 424,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCException = 425,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCNSObject = 426,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCIndependentClass = 427,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCPreciseLifetime = 428,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCReturnsInnerPointer = 429,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCRequiresSuper = 430,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCRootClass = 431,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCSubclassingRestricted = 432,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCExplicitProtocolImpl = 433,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCDesignatedInitializer = 434,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCRuntimeVisible = 435,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ObjCBoxable = 436,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_FlagEnum = 437,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_ConvergentAttr = 438,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_WarnUnusedAttr = 439,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_WarnUnusedResultAttr = 440,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_AlignedAttr = 441,

        ///<summary>
        /// An attribute whose specific kind is not exposed via this interface.
        ///</summary>
        CXCursor_LastAttr = 441,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_PreprocessingDirective = 500,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_MacroDefinition = 501,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_MacroExpansion = 502,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_MacroInstantiation = 502,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_InclusionDirective = 503,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_FirstPreprocessing = 500,

        ///<summary>
        /// Preprocessing
        ///</summary>
        CXCursor_LastPreprocessing = 503,

        ///<summary>
        /// Extra Declarations
        ///</summary>
        CXCursor_ModuleImportDecl = 600,

        ///<summary>
        /// Extra Declarations
        ///</summary>
        CXCursor_TypeAliasTemplateDecl = 601,

        ///<summary>
        /// A static_assert or _Static_assert node
        ///</summary>
        CXCursor_StaticAssert = 602,

        ///<summary>
        /// a friend declaration.
        ///</summary>
        CXCursor_FriendDecl = 603,

        ///<summary>
        /// a friend declaration.
        ///</summary>
        CXCursor_FirstExtraDecl = 600,

        ///<summary>
        /// a friend declaration.
        ///</summary>
        CXCursor_LastExtraDecl = 603,

        ///<summary>
        /// A code completion overload candidate.
        ///</summary>
        CXCursor_OverloadCandidate = 700,

    }

    ///<summary>
    /// Describe the linkage of the entity referred to by a cursor.
    ///</summary>
    public enum CXLinkageKind : uint
    {
        ///<summary>
        /// This value indicates that no linkage information is available for a provided CXCursor.
        ///</summary>
        CXLinkage_Invalid = 0,

        ///<summary>
        /// This is the linkage for variables, parameters, and so on that have automatic storage. This covers normal (non-extern) local variables.
        ///</summary>
        CXLinkage_NoLinkage = 1,

        ///<summary>
        /// This is the linkage for static variables and static functions.
        ///</summary>
        CXLinkage_Internal = 2,

        ///<summary>
        /// This is the linkage for entities with external linkage that live in C++ anonymous namespaces.
        ///</summary>
        CXLinkage_UniqueExternal = 3,

        ///<summary>
        /// This is the linkage for entities with true, external linkage.
        ///</summary>
        CXLinkage_External = 4,

    }

    public enum CXVisibilityKind : uint
    {
        ///<summary>
        /// This value indicates that no visibility information is available for a provided CXCursor.
        ///</summary>
        CXVisibility_Invalid = 0,

        ///<summary>
        /// Symbol not seen by the linker.
        ///</summary>
        CXVisibility_Hidden = 1,

        ///<summary>
        /// Symbol seen by the linker but resolves to a symbol inside this object.
        ///</summary>
        CXVisibility_Protected = 2,

        ///<summary>
        /// Symbol seen by the linker and acts like a normal symbol.
        ///</summary>
        CXVisibility_Default = 3,

    }

    ///<summary>
    /// Describe the "language" of the entity referred to by a cursor.
    ///</summary>
    public enum CXLanguageKind : uint
    {
        CXLanguage_Invalid = 0,

        CXLanguage_C = 1,

        CXLanguage_ObjC = 2,

        CXLanguage_CPlusPlus = 3,

    }

    ///<summary>
    /// Describe the "thread-local storage (TLS) kind" of the declaration referred to by a cursor.
    ///</summary>
    [Flags]
    public enum CXTLSKind : uint
    {
        CXTLS_None = 0,

        CXTLS_Dynamic = 1,

        CXTLS_Static = 2,

    }

    ///<summary>
    /// Describes the kind of type
    ///</summary>
    public enum CXTypeKind : uint
    {
        ///<summary>
        /// Represents an invalid type (e.g., where no type is available).
        ///</summary>
        CXType_Invalid = 0,

        ///<summary>
        /// A type whose specific kind is not exposed via this interface.
        ///</summary>
        CXType_Unexposed = 1,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Void = 2,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Bool = 3,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Char_U = 4,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_UChar = 5,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Char16 = 6,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Char32 = 7,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_UShort = 8,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_UInt = 9,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ULong = 10,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ULongLong = 11,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_UInt128 = 12,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Char_S = 13,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_SChar = 14,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_WChar = 15,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Short = 16,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Int = 17,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Long = 18,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_LongLong = 19,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Int128 = 20,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Float = 21,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Double = 22,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_LongDouble = 23,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_NullPtr = 24,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Overload = 25,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Dependent = 26,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ObjCId = 27,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ObjCClass = 28,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ObjCSel = 29,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Float128 = 30,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Half = 31,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Float16 = 32,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ShortAccum = 33,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Accum = 34,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_LongAccum = 35,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_UShortAccum = 36,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_UAccum = 37,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ULongAccum = 38,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_BFloat16 = 39,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_FirstBuiltin = 2,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_LastBuiltin = 39,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Complex = 100,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Pointer = 101,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_BlockPointer = 102,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_LValueReference = 103,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_RValueReference = 104,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Record = 105,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Enum = 106,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Typedef = 107,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ObjCInterface = 108,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ObjCObjectPointer = 109,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_FunctionNoProto = 110,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_FunctionProto = 111,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_ConstantArray = 112,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Vector = 113,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_IncompleteArray = 114,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_VariableArray = 115,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_DependentSizedArray = 116,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_MemberPointer = 117,

        ///<summary>
        /// Builtin types
        ///</summary>
        CXType_Auto = 118,

        ///<summary>
        /// Represents a type that was referred to using an elaborated type keyword.
        ///</summary>
        CXType_Elaborated = 119,

        ///<summary>
        /// OpenCL PipeType.
        ///</summary>
        CXType_Pipe = 120,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dRO = 121,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dArrayRO = 122,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dBufferRO = 123,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dRO = 124,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayRO = 125,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dDepthRO = 126,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayDepthRO = 127,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dMSAARO = 128,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayMSAARO = 129,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dMSAADepthRO = 130,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayMSAADepthRO = 131,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage3dRO = 132,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dWO = 133,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dArrayWO = 134,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dBufferWO = 135,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dWO = 136,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayWO = 137,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dDepthWO = 138,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayDepthWO = 139,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dMSAAWO = 140,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayMSAAWO = 141,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dMSAADepthWO = 142,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayMSAADepthWO = 143,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage3dWO = 144,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dRW = 145,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dArrayRW = 146,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage1dBufferRW = 147,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dRW = 148,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayRW = 149,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dDepthRW = 150,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayDepthRW = 151,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dMSAARW = 152,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayMSAARW = 153,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dMSAADepthRW = 154,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage2dArrayMSAADepthRW = 155,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLImage3dRW = 156,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLSampler = 157,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLEvent = 158,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLQueue = 159,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLReserveID = 160,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_ObjCObject = 161,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_ObjCTypeParam = 162,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_Attributed = 163,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCMcePayload = 164,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCImePayload = 165,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCRefPayload = 166,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCSicPayload = 167,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCMceResult = 168,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCImeResult = 169,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCRefResult = 170,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCSicResult = 171,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_ExtVector = 176,

        ///<summary>
        /// OpenCL builtin types.
        ///</summary>
        CXType_Atomic = 177,

    }

    ///<summary>
    /// Describes the calling convention of a function type
    ///</summary>
    public enum CXCallingConv : uint
    {
        CXCallingConv_Default = 0,

        CXCallingConv_C = 1,

        CXCallingConv_X86StdCall = 2,

        CXCallingConv_X86FastCall = 3,

        CXCallingConv_X86ThisCall = 4,

        CXCallingConv_X86Pascal = 5,

        CXCallingConv_AAPCS = 6,

        CXCallingConv_AAPCS_VFP = 7,

        CXCallingConv_X86RegCall = 8,

        CXCallingConv_IntelOclBicc = 9,

        CXCallingConv_Win64 = 10,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_X86_64Win64 = 10,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_X86_64SysV = 11,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_X86VectorCall = 12,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_Swift = 13,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_PreserveMost = 14,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_PreserveAll = 15,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_AArch64VectorCall = 16,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_Invalid = 100,

        ///<summary>
        /// Alias for compatibility with older versions of API.
        ///</summary>
        CXCallingConv_Unexposed = 200,

    }

    ///<summary>
    /// Describes the kind of a template argument.
    ///</summary>
    public enum CXTemplateArgumentKind : uint
    {
        CXTemplateArgumentKind_Null = 0,

        CXTemplateArgumentKind_Type = 1,

        CXTemplateArgumentKind_Declaration = 2,

        CXTemplateArgumentKind_NullPtr = 3,

        CXTemplateArgumentKind_Integral = 4,

        CXTemplateArgumentKind_Template = 5,

        CXTemplateArgumentKind_TemplateExpansion = 6,

        CXTemplateArgumentKind_Expression = 7,

        CXTemplateArgumentKind_Pack = 8,

        ///<summary>
        /// Indicates an error case, preventing the kind from being deduced.
        ///</summary>
        CXTemplateArgumentKind_Invalid = 9,

    }

    public enum CXTypeNullabilityKind : uint
    {
        ///<summary>
        /// Values of this type can never be null.
        ///</summary>
        CXTypeNullability_NonNull = 0,

        ///<summary>
        /// Values of this type can be null.
        ///</summary>
        CXTypeNullability_Nullable = 1,

        ///<summary>
        /// Whether values of this type can be null is (explicitly) unspecified. This captures a (fairly rare) case where we can't conclude anything about the nullability of the type even though it has been considered.
        ///</summary>
        CXTypeNullability_Unspecified = 2,

        ///<summary>
        /// Nullability is not applicable to this type.
        ///</summary>
        CXTypeNullability_Invalid = 3,

    }

    ///<summary>
    /// List the possible error codes for clang_Type_getSizeOf, clang_Type_getAlignOf, clang_Type_getOffsetOf and clang_Cursor_getOffsetOf.
    ///</summary>
    public enum CXTypeLayoutError : int
    {
        ///<summary>
        /// Type is of kind CXType_Invalid.
        ///</summary>
        CXTypeLayoutError_Invalid = -1,

        ///<summary>
        /// The type is an incomplete Type.
        ///</summary>
        CXTypeLayoutError_Incomplete = -2,

        ///<summary>
        /// The type is a dependent Type.
        ///</summary>
        CXTypeLayoutError_Dependent = -3,

        ///<summary>
        /// The type is not a constant size type.
        ///</summary>
        CXTypeLayoutError_NotConstantSize = -4,

        ///<summary>
        /// The Field name is not valid for this record.
        ///</summary>
        CXTypeLayoutError_InvalidFieldName = -5,

        ///<summary>
        /// The type is undeduced.
        ///</summary>
        CXTypeLayoutError_Undeduced = -6,

    }

    [Flags]
    public enum CXRefQualifierKind : uint
    {
        ///<summary>
        /// No ref-qualifier was provided.
        ///</summary>
        CXRefQualifier_None = 0,

        ///<summary>
        /// An lvalue ref-qualifier was provided ( &).
        ///</summary>
        CXRefQualifier_LValue = 1,

        ///<summary>
        /// An rvalue ref-qualifier was provided ( &&).
        ///</summary>
        CXRefQualifier_RValue = 2,

    }

    ///<summary>
    /// Represents the C++ access control level to a base class for a cursor with kind CX_CXXBaseSpecifier.
    ///</summary>
    public enum CX_CXXAccessSpecifier : uint
    {
        CX_CXXInvalidAccessSpecifier = 0,

        CX_CXXPublic = 1,

        CX_CXXProtected = 2,

        CX_CXXPrivate = 3,

    }

    ///<summary>
    /// Represents the storage classes as declared in the source. CX_SC_Invalid was added for the case that the passed cursor in not a declaration.
    ///</summary>
    public enum CX_StorageClass : uint
    {
        CX_SC_Invalid = 0,

        CX_SC_None = 1,

        CX_SC_Extern = 2,

        CX_SC_Static = 3,

        CX_SC_PrivateExtern = 4,

        CX_SC_OpenCLWorkGroupLocal = 5,

        CX_SC_Auto = 6,

        CX_SC_Register = 7,

    }

    ///<summary>
    /// Describes how the traversal of the children of a particular cursor should proceed after visiting a particular child cursor.
    ///</summary>
    [Flags]
    public enum CXChildVisitResult : uint
    {
        ///<summary>
        /// Terminates the cursor traversal.
        ///</summary>
        CXChildVisit_Break = 0,

        ///<summary>
        /// Continues the cursor traversal with the next sibling of the cursor just visited, without visiting its children.
        ///</summary>
        CXChildVisit_Continue = 1,

        ///<summary>
        /// Recursively traverse the children of this cursor, using the same visitor and client data.
        ///</summary>
        CXChildVisit_Recurse = 2,

    }

    ///<summary>
    /// Properties for the printing policy.
    ///</summary>
    public enum CXPrintingPolicyProperty : uint
    {
        CXPrintingPolicy_Indentation = 0,

        CXPrintingPolicy_SuppressSpecifiers = 1,

        CXPrintingPolicy_SuppressTagKeyword = 2,

        CXPrintingPolicy_IncludeTagDefinition = 3,

        CXPrintingPolicy_SuppressScope = 4,

        CXPrintingPolicy_SuppressUnwrittenScope = 5,

        CXPrintingPolicy_SuppressInitializers = 6,

        CXPrintingPolicy_ConstantArraySizeAsWritten = 7,

        CXPrintingPolicy_AnonymousTagLocations = 8,

        CXPrintingPolicy_SuppressStrongLifetime = 9,

        CXPrintingPolicy_SuppressLifetimeQualifiers = 10,

        CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11,

        CXPrintingPolicy_Bool = 12,

        CXPrintingPolicy_Restrict = 13,

        CXPrintingPolicy_Alignof = 14,

        CXPrintingPolicy_UnderscoreAlignof = 15,

        CXPrintingPolicy_UseVoidForZeroParams = 16,

        CXPrintingPolicy_TerseOutput = 17,

        CXPrintingPolicy_PolishForDeclaration = 18,

        CXPrintingPolicy_Half = 19,

        CXPrintingPolicy_MSWChar = 20,

        CXPrintingPolicy_IncludeNewlines = 21,

        CXPrintingPolicy_MSVCFormatting = 22,

        CXPrintingPolicy_ConstantsAsWritten = 23,

        CXPrintingPolicy_SuppressImplicitBase = 24,

        CXPrintingPolicy_FullyQualifiedName = 25,

        CXPrintingPolicy_LastProperty = 25,

    }

    ///<summary>
    /// Property attributes for a CXCursor_ObjCPropertyDecl.
    ///</summary>
    [Flags]
    public enum CXObjCPropertyAttrKind : uint
    {
        CXObjCPropertyAttr_noattr = 0,

        CXObjCPropertyAttr_readonly = 1,

        CXObjCPropertyAttr_getter = 2,

        CXObjCPropertyAttr_assign = 4,

        CXObjCPropertyAttr_readwrite = 8,

        CXObjCPropertyAttr_retain = 16,

        CXObjCPropertyAttr_copy = 32,

        CXObjCPropertyAttr_nonatomic = 64,

        CXObjCPropertyAttr_setter = 128,

        CXObjCPropertyAttr_atomic = 256,

        CXObjCPropertyAttr_weak = 512,

        CXObjCPropertyAttr_strong = 1024,

        CXObjCPropertyAttr_unsafe_unretained = 2048,

        CXObjCPropertyAttr_class = 4096,

    }

    ///<summary>
    /// 'Qualifiers' written next to the return and parameter types in Objective-C method declarations.
    ///</summary>
    [Flags]
    public enum CXObjCDeclQualifierKind : uint
    {
        CXObjCDeclQualifier_None = 0,

        CXObjCDeclQualifier_In = 1,

        CXObjCDeclQualifier_Inout = 2,

        CXObjCDeclQualifier_Out = 4,

        CXObjCDeclQualifier_Bycopy = 8,

        CXObjCDeclQualifier_Byref = 16,

        CXObjCDeclQualifier_Oneway = 32,

    }

    [Flags]
    public enum CXNameRefFlags : uint
    {
        ///<summary>
        /// Include the nested-name-specifier, e.g. Foo:: in x.Foo::y, in the range.
        ///</summary>
        CXNameRange_WantQualifier = 1,

        ///<summary>
        /// Include the explicit template arguments, e.g. <int> in x.f<int>, in the range.
        ///</summary>
        CXNameRange_WantTemplateArgs = 2,

        ///<summary>
        /// If the name is non-contiguous, return the full spanning range.
        ///</summary>
        CXNameRange_WantSinglePiece = 4,

    }

    ///<summary>
    /// Describes a kind of token.
    ///</summary>
    public enum CXTokenKind : uint
    {
        ///<summary>
        /// A token that contains some kind of punctuation.
        ///</summary>
        CXToken_Punctuation = 0,

        ///<summary>
        /// A language keyword.
        ///</summary>
        CXToken_Keyword = 1,

        ///<summary>
        /// An identifier (that is not a keyword).
        ///</summary>
        CXToken_Identifier = 2,

        ///<summary>
        /// A numeric, string, or character literal.
        ///</summary>
        CXToken_Literal = 3,

        ///<summary>
        /// A comment.
        ///</summary>
        CXToken_Comment = 4,

    }

    ///<summary>
    /// Describes a single piece of text within a code-completion string.
    ///</summary>
    public enum CXCompletionChunkKind : uint
    {
        ///<summary>
        /// A code-completion string that describes "optional" text that could be a part of the template (but is not required).
        ///</summary>
        CXCompletionChunk_Optional = 0,

        ///<summary>
        /// Text that a user would be expected to type to get this code-completion result.
        ///</summary>
        CXCompletionChunk_TypedText = 1,

        ///<summary>
        /// Text that should be inserted as part of a code-completion result.
        ///</summary>
        CXCompletionChunk_Text = 2,

        ///<summary>
        /// Placeholder text that should be replaced by the user.
        ///</summary>
        CXCompletionChunk_Placeholder = 3,

        ///<summary>
        /// Informative text that should be displayed but never inserted as part of the template.
        ///</summary>
        CXCompletionChunk_Informative = 4,

        ///<summary>
        /// Text that describes the current parameter when code-completion is referring to function call, message send, or template specialization.
        ///</summary>
        CXCompletionChunk_CurrentParameter = 5,

        ///<summary>
        /// A left parenthesis ('('), used to initiate a function call or signal the beginning of a function parameter list.
        ///</summary>
        CXCompletionChunk_LeftParen = 6,

        ///<summary>
        /// A right parenthesis (')'), used to finish a function call or signal the end of a function parameter list.
        ///</summary>
        CXCompletionChunk_RightParen = 7,

        ///<summary>
        /// A left bracket ('[').
        ///</summary>
        CXCompletionChunk_LeftBracket = 8,

        ///<summary>
        /// A right bracket (']').
        ///</summary>
        CXCompletionChunk_RightBracket = 9,

        ///<summary>
        /// A left brace ('{').
        ///</summary>
        CXCompletionChunk_LeftBrace = 10,

        ///<summary>
        /// A right brace ('}').
        ///</summary>
        CXCompletionChunk_RightBrace = 11,

        ///<summary>
        /// A left angle bracket ('<').
        ///</summary>
        CXCompletionChunk_LeftAngle = 12,

        ///<summary>
        /// A right angle bracket ('>').
        ///</summary>
        CXCompletionChunk_RightAngle = 13,

        ///<summary>
        /// A comma separator (',').
        ///</summary>
        CXCompletionChunk_Comma = 14,

        ///<summary>
        /// Text that specifies the result type of a given result.
        ///</summary>
        CXCompletionChunk_ResultType = 15,

        ///<summary>
        /// A colon (':').
        ///</summary>
        CXCompletionChunk_Colon = 16,

        ///<summary>
        /// A semicolon (';').
        ///</summary>
        CXCompletionChunk_SemiColon = 17,

        ///<summary>
        /// An '=' sign.
        ///</summary>
        CXCompletionChunk_Equal = 18,

        ///<summary>
        /// Horizontal space (' ').
        ///</summary>
        CXCompletionChunk_HorizontalSpace = 19,

        ///<summary>
        /// Vertical space ('\n'), after which it is generally a good idea to perform indentation.
        ///</summary>
        CXCompletionChunk_VerticalSpace = 20,

    }

    ///<summary>
    /// Flags that can be passed to clang_codeCompleteAt() to modify its behavior.
    ///</summary>
    [Flags]
    public enum CXCodeComplete_Flags : uint
    {
        ///<summary>
        /// Whether to include macros within the set of code completions returned.
        ///</summary>
        CXCodeComplete_IncludeMacros = 1,

        ///<summary>
        /// Whether to include code patterns for language constructs within the set of code completions, e.g., for loops.
        ///</summary>
        CXCodeComplete_IncludeCodePatterns = 2,

        ///<summary>
        /// Whether to include brief documentation within the set of code completions returned.
        ///</summary>
        CXCodeComplete_IncludeBriefComments = 4,

        ///<summary>
        /// Whether to speed up completion by omitting top- or namespace-level entities defined in the preamble. There's no guarantee any particular entity is omitted. This may be useful if the headers are indexed externally.
        ///</summary>
        CXCodeComplete_SkipPreamble = 8,

        ///<summary>
        /// Whether to include completions with small fix-its, e.g. change '.' to '->' on member access, etc.
        ///</summary>
        CXCodeComplete_IncludeCompletionsWithFixIts = 16,

    }

    ///<summary>
    /// Bits that represent the context under which completion is occurring.
    ///</summary>
    public enum CXCompletionContext : uint
    {
        ///<summary>
        /// The context for completions is unexposed, as only Clang results should be included. (This is equivalent to having no context bits set.)
        ///</summary>
        CXCompletionContext_Unexposed = 0,

        ///<summary>
        /// Completions for any possible type should be included in the results.
        ///</summary>
        CXCompletionContext_AnyType = 1,

        ///<summary>
        /// Completions for any possible value (variables, function calls, etc.) should be included in the results.
        ///</summary>
        CXCompletionContext_AnyValue = 2,

        ///<summary>
        /// Completions for values that resolve to an Objective-C object should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCObjectValue = 4,

        ///<summary>
        /// Completions for values that resolve to an Objective-C selector should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCSelectorValue = 8,

        ///<summary>
        /// Completions for values that resolve to a C++ class type should be included in the results.
        ///</summary>
        CXCompletionContext_CXXClassTypeValue = 16,

        ///<summary>
        /// Completions for fields of the member being accessed using the dot operator should be included in the results.
        ///</summary>
        CXCompletionContext_DotMemberAccess = 32,

        ///<summary>
        /// Completions for fields of the member being accessed using the arrow operator should be included in the results.
        ///</summary>
        CXCompletionContext_ArrowMemberAccess = 64,

        ///<summary>
        /// Completions for properties of the Objective-C object being accessed using the dot operator should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCPropertyAccess = 128,

        ///<summary>
        /// Completions for enum tags should be included in the results.
        ///</summary>
        CXCompletionContext_EnumTag = 256,

        ///<summary>
        /// Completions for union tags should be included in the results.
        ///</summary>
        CXCompletionContext_UnionTag = 512,

        ///<summary>
        /// Completions for struct tags should be included in the results.
        ///</summary>
        CXCompletionContext_StructTag = 1024,

        ///<summary>
        /// Completions for C++ class names should be included in the results.
        ///</summary>
        CXCompletionContext_ClassTag = 2048,

        ///<summary>
        /// Completions for C++ namespaces and namespace aliases should be included in the results.
        ///</summary>
        CXCompletionContext_Namespace = 4096,

        ///<summary>
        /// Completions for C++ nested name specifiers should be included in the results.
        ///</summary>
        CXCompletionContext_NestedNameSpecifier = 8192,

        ///<summary>
        /// Completions for Objective-C interfaces (classes) should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCInterface = 16384,

        ///<summary>
        /// Completions for Objective-C protocols should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCProtocol = 32768,

        ///<summary>
        /// Completions for Objective-C categories should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCCategory = 65536,

        ///<summary>
        /// Completions for Objective-C instance messages should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCInstanceMessage = 131072,

        ///<summary>
        /// Completions for Objective-C class messages should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCClassMessage = 262144,

        ///<summary>
        /// Completions for Objective-C selector names should be included in the results.
        ///</summary>
        CXCompletionContext_ObjCSelectorName = 524288,

        ///<summary>
        /// Completions for preprocessor macro names should be included in the results.
        ///</summary>
        CXCompletionContext_MacroName = 1048576,

        ///<summary>
        /// Natural language completions should be included in the results.
        ///</summary>
        CXCompletionContext_NaturalLanguage = 2097152,

        ///<summary>
        /// #include file completions should be included in the results.
        ///</summary>
        CXCompletionContext_IncludedFile = 4194304,

        ///<summary>
        /// The current context is unknown, so set all contexts.
        ///</summary>
        CXCompletionContext_Unknown = 8388607,

    }

    public enum CXEvalResultKind : uint
    {
        CXEval_Int = 1,

        CXEval_Float = 2,

        CXEval_ObjCStrLiteral = 3,

        CXEval_StrLiteral = 4,

        CXEval_CFStr = 5,

        CXEval_Other = 6,

        CXEval_UnExposed = 0,

    }

    ///<summary>
    /// @{
    ///</summary>
    [Flags]
    public enum CXVisitorResult : uint
    {
        CXVisit_Break = 0,

        CXVisit_Continue = 1,

    }

    [Flags]
    public enum CXResult : uint
    {
        ///<summary>
        /// Function returned successfully.
        ///</summary>
        CXResult_Success = 0,

        ///<summary>
        /// One of the parameters was invalid for the function.
        ///</summary>
        CXResult_Invalid = 1,

        ///<summary>
        /// The function was terminated by a callback (e.g. it returned CXVisit_Break)
        ///</summary>
        CXResult_VisitBreak = 2,

    }

    public enum CXIdxEntityKind : uint
    {
        CXIdxEntity_Unexposed = 0,

        CXIdxEntity_Typedef = 1,

        CXIdxEntity_Function = 2,

        CXIdxEntity_Variable = 3,

        CXIdxEntity_Field = 4,

        CXIdxEntity_EnumConstant = 5,

        CXIdxEntity_ObjCClass = 6,

        CXIdxEntity_ObjCProtocol = 7,

        CXIdxEntity_ObjCCategory = 8,

        CXIdxEntity_ObjCInstanceMethod = 9,

        CXIdxEntity_ObjCClassMethod = 10,

        CXIdxEntity_ObjCProperty = 11,

        CXIdxEntity_ObjCIvar = 12,

        CXIdxEntity_Enum = 13,

        CXIdxEntity_Struct = 14,

        CXIdxEntity_Union = 15,

        CXIdxEntity_CXXClass = 16,

        CXIdxEntity_CXXNamespace = 17,

        CXIdxEntity_CXXNamespaceAlias = 18,

        CXIdxEntity_CXXStaticVariable = 19,

        CXIdxEntity_CXXStaticMethod = 20,

        CXIdxEntity_CXXInstanceMethod = 21,

        CXIdxEntity_CXXConstructor = 22,

        CXIdxEntity_CXXDestructor = 23,

        CXIdxEntity_CXXConversionFunction = 24,

        CXIdxEntity_CXXTypeAlias = 25,

        CXIdxEntity_CXXInterface = 26,

    }

    public enum CXIdxEntityLanguage : uint
    {
        CXIdxEntityLang_None = 0,

        CXIdxEntityLang_C = 1,

        CXIdxEntityLang_ObjC = 2,

        CXIdxEntityLang_CXX = 3,

        CXIdxEntityLang_Swift = 4,

    }

    ///<summary>
    /// Extra C++ template information for an entity. This can apply to: CXIdxEntity_Function CXIdxEntity_CXXClass CXIdxEntity_CXXStaticMethod CXIdxEntity_CXXInstanceMethod CXIdxEntity_CXXConstructor CXIdxEntity_CXXConversionFunction CXIdxEntity_CXXTypeAlias
    ///</summary>
    public enum CXIdxEntityCXXTemplateKind : uint
    {
        CXIdxEntity_NonTemplate = 0,

        CXIdxEntity_Template = 1,

        CXIdxEntity_TemplatePartialSpecialization = 2,

        CXIdxEntity_TemplateSpecialization = 3,

    }

    public enum CXIdxAttrKind : uint
    {
        CXIdxAttr_Unexposed = 0,

        CXIdxAttr_IBAction = 1,

        CXIdxAttr_IBOutlet = 2,

        CXIdxAttr_IBOutletCollection = 3,

    }

    [Flags]
    public enum CXIdxDeclInfoFlags : uint
    {
        CXIdxDeclFlag_Skipped = 1,

    }

    [Flags]
    public enum CXIdxObjCContainerKind : uint
    {
        CXIdxObjCContainer_ForwardRef = 0,

        CXIdxObjCContainer_Interface = 1,

        CXIdxObjCContainer_Implementation = 2,

    }

    ///<summary>
    /// Data for IndexerCallbacks#indexEntityReference.
    ///</summary>
    [Flags]
    public enum CXIdxEntityRefKind : uint
    {
        ///<summary>
        /// The entity is referenced directly in user's code.
        ///</summary>
        CXIdxEntityRef_Direct = 1,

        ///<summary>
        /// An implicit reference, e.g. a reference of an Objective-C method via the dot syntax.
        ///</summary>
        CXIdxEntityRef_Implicit = 2,

    }

    ///<summary>
    /// Roles that are attributed to symbol occurrences.
    ///</summary>
    [Flags]
    public enum CXSymbolRole : uint
    {
        CXSymbolRole_None = 0,

        CXSymbolRole_Declaration = 1,

        CXSymbolRole_Definition = 2,

        CXSymbolRole_Reference = 4,

        CXSymbolRole_Read = 8,

        CXSymbolRole_Write = 16,

        CXSymbolRole_Call = 32,

        CXSymbolRole_Dynamic = 64,

        CXSymbolRole_AddressOf = 128,

        CXSymbolRole_Implicit = 256,

    }

    [Flags]
    public enum CXIndexOptFlags : uint
    {
        ///<summary>
        /// Used to indicate that no special indexing options are needed.
        ///</summary>
        CXIndexOpt_None = 0,

        ///<summary>
        /// Used to indicate that IndexerCallbacks#indexEntityReference should be invoked for only one reference of an entity per source file that does not also include a declaration/definition of the entity.
        ///</summary>
        CXIndexOpt_SuppressRedundantRefs = 1,

        ///<summary>
        /// Function-local symbols should be indexed. If this is not set function-local symbols will be ignored.
        ///</summary>
        CXIndexOpt_IndexFunctionLocalSymbols = 2,

        ///<summary>
        /// Implicit function/class template instantiations should be indexed. If this is not set, implicit instantiations will be ignored.
        ///</summary>
        CXIndexOpt_IndexImplicitTemplateInstantiations = 4,

        ///<summary>
        /// Suppress all compiler warnings when parsing for indexing.
        ///</summary>
        CXIndexOpt_SuppressWarnings = 8,

        ///<summary>
        /// Skip a function/method body that was already parsed during an indexing session associated with a CXIndexAction object. Bodies in system headers are always skipped.
        ///</summary>
        CXIndexOpt_SkipParsedBodiesInSession = 16,

    }

    ///<summary>
    /// Describes the type of the comment AST node ( CXComment). A comment node can be considered block content (e. g., paragraph), inline content (plain text) or neither (the root AST node).
    ///</summary>
    public enum CXCommentKind : uint
    {
        ///<summary>
        /// Null comment. No AST node is constructed at the requested location because there is no text or a syntax error.
        ///</summary>
        CXComment_Null = 0,

        ///<summary>
        /// Plain text. Inline content.
        ///</summary>
        CXComment_Text = 1,

        ///<summary>
        /// A command with word-like arguments that is considered inline content.
        ///</summary>
        CXComment_InlineCommand = 2,

        ///<summary>
        /// HTML start tag with attributes (name-value pairs). Considered inline content.
        ///</summary>
        CXComment_HTMLStartTag = 3,

        ///<summary>
        /// HTML end tag. Considered inline content.
        ///</summary>
        CXComment_HTMLEndTag = 4,

        ///<summary>
        /// A paragraph, contains inline comment. The paragraph itself is block content.
        ///</summary>
        CXComment_Paragraph = 5,

        ///<summary>
        /// A command that has zero or more word-like arguments (number of word-like arguments depends on command name) and a paragraph as an argument. Block command is block content.
        ///</summary>
        CXComment_BlockCommand = 6,

        ///<summary>
        /// A \param or \arg command that describes the function parameter (name, passing direction, description).
        ///</summary>
        CXComment_ParamCommand = 7,

        ///<summary>
        /// A \tparam command that describes a template parameter (name and description).
        ///</summary>
        CXComment_TParamCommand = 8,

        ///<summary>
        /// A verbatim block command (e. g., preformatted code). Verbatim block has an opening and a closing command and contains multiple lines of text ( CXComment_VerbatimBlockLine child nodes).
        ///</summary>
        CXComment_VerbatimBlockCommand = 9,

        ///<summary>
        /// A line of text that is contained within a CXComment_VerbatimBlockCommand node.
        ///</summary>
        CXComment_VerbatimBlockLine = 10,

        ///<summary>
        /// A verbatim line command. Verbatim line has an opening command, a single line of text (up to the newline after the opening command) and has no closing command.
        ///</summary>
        CXComment_VerbatimLine = 11,

        ///<summary>
        /// A full comment attached to a declaration, contains block content.
        ///</summary>
        CXComment_FullComment = 12,

    }

    ///<summary>
    /// The most appropriate rendering mode for an inline command, chosen on command semantics in Doxygen.
    ///</summary>
    public enum CXCommentInlineCommandRenderKind : uint
    {
        ///<summary>
        /// Command argument should be rendered in a normal font.
        ///</summary>
        CXCommentInlineCommandRenderKind_Normal = 0,

        ///<summary>
        /// Command argument should be rendered in a bold font.
        ///</summary>
        CXCommentInlineCommandRenderKind_Bold = 1,

        ///<summary>
        /// Command argument should be rendered in a monospaced font.
        ///</summary>
        CXCommentInlineCommandRenderKind_Monospaced = 2,

        ///<summary>
        /// Command argument should be rendered emphasized (typically italic font).
        ///</summary>
        CXCommentInlineCommandRenderKind_Emphasized = 3,

        ///<summary>
        /// Command argument should not be rendered (since it only defines an anchor).
        ///</summary>
        CXCommentInlineCommandRenderKind_Anchor = 4,

    }

    ///<summary>
    /// Describes parameter passing direction for \param or \arg command.
    ///</summary>
    [Flags]
    public enum CXCommentParamPassDirection : uint
    {
        ///<summary>
        /// The parameter is an input parameter.
        ///</summary>
        CXCommentParamPassDirection_In = 0,

        ///<summary>
        /// The parameter is an output parameter.
        ///</summary>
        CXCommentParamPassDirection_Out = 1,

        ///<summary>
        /// The parameter is an input and output parameter.
        ///</summary>
        CXCommentParamPassDirection_InOut = 2,

    }


}

