// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.CompilerServices;

namespace QuantumBinding.Clang.Interop
{
    using System;
    using System.Runtime.InteropServices;
    using QuantumBinding.Clang;

    ///<summary>
    /// A character string.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXString
    {
        public System.IntPtr data;

        public uint private_flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXStringSet
    {
        public System.IntPtr Strings;

        public uint Count;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXVirtualFileOverlayImpl
    {
        public System.IntPtr pointer;

        public CXVirtualFileOverlayImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXModuleMapDescriptorImpl
    {
        public System.IntPtr pointer;

        public CXModuleMapDescriptorImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIndexImpl
    {
        public System.IntPtr pointer;

        public CXIndexImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXTargetInfoImpl
    {
        public System.IntPtr pointer;

        public CXTargetInfoImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXTranslationUnitImpl
    {
        public System.IntPtr pointer;

        public CXTranslationUnitImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXClientDataImpl
    {
        public System.IntPtr pointer;

        public CXClientDataImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// Provides the contents of a file that has not yet been saved to disk.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXUnsavedFile
    {
        ///<summary>
        /// The file whose contents have not yet been saved.
        ///</summary>
        public System.IntPtr Filename;

        ///<summary>
        /// A buffer containing the unsaved contents of this file.
        ///</summary>
        public System.IntPtr Contents;

        ///<summary>
        /// The length of the unsaved contents of this buffer.
        ///</summary>
        public uint Length;

    }

    ///<summary>
    /// Describes a version number of the form major.minor.subminor.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXVersion
    {
        ///<summary>
        /// The major version number, e.g., the '10' in '10.7.3'. A negative value indicates that there is no version number at all.
        ///</summary>
        public int Major;

        ///<summary>
        /// The minor version number, e.g., the '7' in '10.7.3'. This value will be negative if no minor version number was provided, e.g., for version '10'.
        ///</summary>
        public int Minor;

        ///<summary>
        /// The subminor version number, e.g., the '3' in '10.7.3'. This value will be negative if no minor or subminor version number was provided, e.g., in version '10' or '10.7'.
        ///</summary>
        public int Subminor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXFileImpl
    {
        public System.IntPtr pointer;

        public CXFileImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// Uniquely identifies a CXFile, that refers to the same underlying file, across an indexing session.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXFileUniqueID
    {
        public unsafe fixed ulong data[3];

    }

    ///<summary>
    /// Identifies a specific source location within a translation unit.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXSourceLocation
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public System.IntPtr[] ptr_data;

        public uint int_data;

    }

    ///<summary>
    /// Identifies a half-open character range in the source code.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXSourceRange
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public System.IntPtr[] ptr_data;

        public uint begin_int_data;

        public uint end_int_data;

    }

    ///<summary>
    /// Identifies an array of ranges.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXSourceRangeList
    {
        ///<summary>
        /// The number of ranges in the ranges array.
        ///</summary>
        public uint count;

        ///<summary>
        /// An array of CXSourceRanges.
        ///</summary>
        public System.IntPtr ranges;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXDiagnosticImpl
    {
        public System.IntPtr pointer;

        public CXDiagnosticImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXDiagnosticSetImpl
    {
        public System.IntPtr pointer;

        public CXDiagnosticSetImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXTUResourceUsageEntry
    {
        ///<summary>
        /// The memory usage category.
        ///</summary>
        public uint kind;

        ///<summary>
        /// Amount of resources used. The units will depend on the resource kind.
        ///</summary>
        public uint amount;

    }

    ///<summary>
    /// The memory usage of a CXTranslationUnit, broken into categories.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXTUResourceUsage
    {
        ///<summary>
        /// Private data member, used for queries.
        ///</summary>
        public System.IntPtr data;

        ///<summary>
        /// The number of entries in the 'entries' array.
        ///</summary>
        public uint numEntries;

        ///<summary>
        /// An array of key-value pairs, representing the breakdown of memory usage.
        ///</summary>
        public System.IntPtr entries;

    }

    ///<summary>
    /// A cursor representing some element in the abstract syntax tree for a translation unit.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXCursor
    {
        public uint kind;

        public int xdata;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
        public System.IntPtr[] data;

    }

    ///<summary>
    /// Describes the availability of a given entity on a particular platform, e.g., a particular class might only be available on Mac OS 10.7 or newer.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXPlatformAvailability
    {
        ///<summary>
        /// A string that describes the platform for which this structure provides availability information.
        ///</summary>
        public CXString Platform;

        ///<summary>
        /// The version number in which this entity was introduced.
        ///</summary>
        public CXVersion Introduced;

        ///<summary>
        /// The version number in which this entity was deprecated (but is still available).
        ///</summary>
        public CXVersion Deprecated;

        ///<summary>
        /// The version number in which this entity was obsoleted, and therefore is no longer available.
        ///</summary>
        public CXVersion Obsoleted;

        ///<summary>
        /// Whether the entity is unconditionally unavailable on this platform.
        ///</summary>
        public int Unavailable;

        ///<summary>
        /// An optional message to provide to a user of this API, e.g., to suggest replacement APIs.
        ///</summary>
        public CXString Message;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXCursorSetImpl
    {
        public System.IntPtr pointer;

        public CXCursorSetImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// The type of an element in the abstract syntax tree.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXType
    {
        public uint kind;

        // [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        // public System.IntPtr[] data;
        public __FixedBuffer data;
        
        
        public unsafe struct __FixedBuffer
        {
            public nuint item0;

            public nuint item1;

            public nuint this[int index]
            {
                get => Unsafe.Add(ref item0, index);
                set => Unsafe.Add(ref item0, index) = value;
            }
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXPrintingPolicyImpl
    {
        public System.IntPtr pointer;

        public CXPrintingPolicyImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXModuleImpl
    {
        public System.IntPtr pointer;

        public CXModuleImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// Describes a single preprocessing token.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXToken
    {
        public unsafe fixed uint int_data[4];

        public System.IntPtr ptr_data;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXCompletionStringImpl
    {
        public System.IntPtr pointer;

        public CXCompletionStringImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// A single result of code completion.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXCompletionResult
    {
        ///<summary>
        /// The kind of entity that this completion refers to.
        ///</summary>
        public uint CursorKind;

        ///<summary>
        /// The code-completion string that describes how to insert this code-completion result into the editing buffer.
        ///</summary>
        public CXCompletionStringImpl CompletionString;

    }

    ///<summary>
    /// Contains the results of code-completion.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXCodeCompleteResults
    {
        ///<summary>
        /// The code-completion results.
        ///</summary>
        public System.IntPtr Results;

        ///<summary>
        /// The number of code-completion results stored in the Results array.
        ///</summary>
        public uint NumResults;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXEvalResultImpl
    {
        public System.IntPtr pointer;

        public CXEvalResultImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXRemappingImpl
    {
        public System.IntPtr pointer;

        public CXRemappingImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXCursorAndRangeVisitor
    {
        public System.IntPtr context;

        public System.IntPtr visit;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxClientFileImpl
    {
        public System.IntPtr pointer;

        public CXIdxClientFileImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxClientEntityImpl
    {
        public System.IntPtr pointer;

        public CXIdxClientEntityImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxClientContainerImpl
    {
        public System.IntPtr pointer;

        public CXIdxClientContainerImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxClientASTFileImpl
    {
        public System.IntPtr pointer;

        public CXIdxClientASTFileImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// Source location passed to index callbacks.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxLoc
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public System.IntPtr[] ptr_data;

        public uint int_data;

    }

    ///<summary>
    /// Data for ppIncludedFile callback.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxIncludedFileInfo
    {
        ///<summary>
        /// Location of '#' in the #include/#import directive.
        ///</summary>
        public CXIdxLoc hashLoc;

        ///<summary>
        /// Filename as written in the #include/#import directive.
        ///</summary>
        public System.IntPtr filename;

        ///<summary>
        /// The actual file that the #include/#import directive resolved to.
        ///</summary>
        public CXFileImpl file;

        public int isImport;

        public int isAngled;

        ///<summary>
        /// Non-zero if the directive was automatically turned into a module import.
        ///</summary>
        public int isModuleImport;

    }

    ///<summary>
    /// Data for IndexerCallbacks#importedASTFile.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxImportedASTFileInfo
    {
        ///<summary>
        /// Top level AST file containing the imported PCH, module or submodule.
        ///</summary>
        public CXFileImpl file;

        ///<summary>
        /// The imported module or NULL if the AST file is a PCH.
        ///</summary>
        public CXModuleImpl module;

        ///<summary>
        /// Location where the file is imported. Applicable only for modules.
        ///</summary>
        public CXIdxLoc loc;

        ///<summary>
        /// Non-zero if an inclusion directive was automatically turned into a module import. Applicable only for modules.
        ///</summary>
        public int isImplicit;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxAttrInfo
    {
        public uint kind;

        public CXCursor cursor;

        public CXIdxLoc loc;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxEntityInfo
    {
        public uint kind;

        public uint templateKind;

        public uint lang;

        public System.IntPtr name;

        public System.IntPtr USR;

        public CXCursor cursor;

        public System.IntPtr attributes;

        public uint numAttributes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxContainerInfo
    {
        public CXCursor cursor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxIBOutletCollectionAttrInfo
    {
        public System.IntPtr attrInfo;

        public System.IntPtr objcClass;

        public CXCursor classCursor;

        public CXIdxLoc classLoc;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxDeclInfo
    {
        public System.IntPtr entityInfo;

        public CXCursor cursor;

        public CXIdxLoc loc;

        public System.IntPtr semanticContainer;

        ///<summary>
        /// Generally same as #semanticContainer but can be different in cases like out-of-line C++ member functions.
        ///</summary>
        public System.IntPtr lexicalContainer;

        public int isRedeclaration;

        public int isDefinition;

        public int isContainer;

        public System.IntPtr declAsContainer;

        ///<summary>
        /// Whether the declaration exists in code or was created implicitly by the compiler, e.g. implicit Objective-C methods for properties.
        ///</summary>
        public int isImplicit;

        public System.IntPtr attributes;

        public uint numAttributes;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxObjCContainerDeclInfo
    {
        public System.IntPtr declInfo;

        public uint kind;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxBaseClassInfo
    {
        public System.IntPtr @base;

        public CXCursor cursor;

        public CXIdxLoc loc;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxObjCProtocolRefInfo
    {
        public System.IntPtr protocol;

        public CXCursor cursor;

        public CXIdxLoc loc;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxObjCProtocolRefListInfo
    {
        public System.IntPtr protocols;

        public uint numProtocols;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxObjCInterfaceDeclInfo
    {
        public System.IntPtr containerInfo;

        public System.IntPtr superInfo;

        public System.IntPtr protocols;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxObjCCategoryDeclInfo
    {
        public System.IntPtr containerInfo;

        public System.IntPtr objcClass;

        public CXCursor classCursor;

        public CXIdxLoc classLoc;

        public System.IntPtr protocols;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxObjCPropertyDeclInfo
    {
        public System.IntPtr declInfo;

        public System.IntPtr getter;

        public System.IntPtr setter;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxCXXClassDeclInfo
    {
        public System.IntPtr declInfo;

        public System.IntPtr bases;

        public uint numBases;

    }

    ///<summary>
    /// Data for IndexerCallbacks#indexEntityReference.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIdxEntityRefInfo
    {
        public uint kind;

        ///<summary>
        /// Reference cursor.
        ///</summary>
        public CXCursor cursor;

        public CXIdxLoc loc;

        ///<summary>
        /// The entity that gets referenced.
        ///</summary>
        public System.IntPtr referencedEntity;

        ///<summary>
        /// Immediate "parent" of the reference. For example:
        ///</summary>
        public System.IntPtr parentEntity;

        ///<summary>
        /// Lexical container context of the reference.
        ///</summary>
        public System.IntPtr container;

        ///<summary>
        /// Sets of symbol roles of the reference.
        ///</summary>
        public uint role;

    }

    ///<summary>
    /// A group of callbacks used by #clang_indexSourceFile and #clang_indexTranslationUnit.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct IndexerCallbacks
    {
        ///<summary>
        /// Called periodically to check whether indexing should be aborted. Should return 0 to continue, and non-zero to abort.
        ///</summary>
        public System.IntPtr abortQuery;

        ///<summary>
        /// Called at the end of indexing; passes the complete diagnostic set.
        ///</summary>
        public System.IntPtr diagnostic;

        public System.IntPtr enteredMainFile;

        ///<summary>
        /// Called when a file gets #included/#imported.
        ///</summary>
        public System.IntPtr ppIncludedFile;

        ///<summary>
        /// Called when a AST file (PCH or module) gets imported.
        ///</summary>
        public System.IntPtr importedASTFile;

        ///<summary>
        /// Called at the beginning of indexing a translation unit.
        ///</summary>
        public System.IntPtr startedTranslationUnit;

        public System.IntPtr indexDeclaration;

        ///<summary>
        /// Called to index a reference of an entity.
        ///</summary>
        public System.IntPtr indexEntityReference;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXIndexActionImpl
    {
        public System.IntPtr pointer;

        public CXIndexActionImpl(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    ///<summary>
    /// A parsed comment.
    ///</summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CXComment
    {
        public System.IntPtr ASTNode;

        public CXTranslationUnitImpl TranslationUnit;

    }


}

