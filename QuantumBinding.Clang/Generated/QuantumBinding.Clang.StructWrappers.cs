// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace QuantumBinding.Clang
{
    using System.Runtime.InteropServices;
    using QuantumBinding.Clang;
    using QuantumBinding.Clang.Interop;

    public partial class QBString : QBDisposableObject
    {
        public QBString()
        {
        }

        public QBString(QuantumBinding.Clang.Interop.CXString _internal)
        {
            Data = _internal.data;
            Private_flags = _internal.private_flags;
        }

        public System.IntPtr Data { get; set; }
        public uint Private_flags { get; set; }
        ///<summary>
        /// Free the given string.
        ///</summary>
        public void disposeString()
        {
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeString(ToInternal());
        }

        ///<summary>
        /// Retrieve the character data associated with the given string.
        ///</summary>
        public string getCString()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCString(ToInternal());
        }


        public QuantumBinding.Clang.Interop.CXString ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXString();
            _internal.data = Data;
            _internal.private_flags = Private_flags;
            return _internal;
        }

        public static implicit operator QBString(QuantumBinding.Clang.Interop.CXString q)
        {
            return new QBString(q);
        }

    }

    public partial class QBStringSet : QBDisposableObject
    {
        private StructReference refStrings;

        public QBStringSet()
        {
        }

        public QBStringSet(QuantumBinding.Clang.Interop.CXStringSet _internal)
        {
            Strings = new QBString(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXString>(_internal.Strings));
            Marshal.FreeHGlobal(_internal.Strings);
            Count = _internal.Count;
        }

        public QBString Strings { get; set; }
        public uint Count { get; set; }
        ///<summary>
        /// Free the given string set.
        ///</summary>
        public void disposeStringSet()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeStringSet(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public QuantumBinding.Clang.Interop.CXStringSet ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXStringSet();
            refStrings?.Dispose();
            if (Strings != null)
            {
                var struct0 = Strings.ToInternal();
                refStrings = new StructReference(struct0);
                _internal.Strings = refStrings.Handle;
            }
            _internal.Count = Count;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refStrings?.Dispose();
        }


        public static implicit operator QBStringSet(QuantumBinding.Clang.Interop.CXStringSet q)
        {
            return new QBStringSet(q);
        }

    }

    public partial class QBUnsavedFile : QBDisposableObject
    {
        private StringReference refFilename;

        private StringReference refContents;

        public QBUnsavedFile()
        {
        }

        public QBUnsavedFile(QuantumBinding.Clang.Interop.CXUnsavedFile _internal)
        {
            Filename = Marshal.PtrToStringAnsi(_internal.Filename);
            Contents = Marshal.PtrToStringAnsi(_internal.Contents);
            Length = _internal.Length;
        }

        public string Filename { get; set; }
        public string Contents { get; set; }
        public uint Length { get; set; }

        public QuantumBinding.Clang.Interop.CXUnsavedFile ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXUnsavedFile();
            refFilename?.Dispose();
            if (Filename != null)
            {
                refFilename = new StringReference(Filename, false);
                _internal.Filename = refFilename.Handle;
            }
            refContents?.Dispose();
            if (Contents != null)
            {
                refContents = new StringReference(Contents, false);
                _internal.Contents = refContents.Handle;
            }
            _internal.Length = Length;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refFilename?.Dispose();
            refContents?.Dispose();
        }


        public static implicit operator QBUnsavedFile(QuantumBinding.Clang.Interop.CXUnsavedFile q)
        {
            return new QBUnsavedFile(q);
        }

    }

    public partial class QBVersion
    {
        public QBVersion()
        {
        }

        public QBVersion(QuantumBinding.Clang.Interop.CXVersion _internal)
        {
            Major = _internal.Major;
            Minor = _internal.Minor;
            Subminor = _internal.Subminor;
        }

        public int Major { get; set; }
        public int Minor { get; set; }
        public int Subminor { get; set; }

        public QuantumBinding.Clang.Interop.CXVersion ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXVersion();
            _internal.Major = Major;
            _internal.Minor = Minor;
            _internal.Subminor = Subminor;
            return _internal;
        }

        public static implicit operator QBVersion(QuantumBinding.Clang.Interop.CXVersion q)
        {
            return new QBVersion(q);
        }

    }

    public partial class QBFileUniqueID
    {
        public QBFileUniqueID()
        {
        }

        public QBFileUniqueID(QuantumBinding.Clang.Interop.CXFileUniqueID _internal)
        {
            var tmpArr0 = new ulong[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr0[i] = _internal.data[i];
                }
            }
            Data = tmpArr0;
        }

        public ulong[] Data { get; set; }

        public QuantumBinding.Clang.Interop.CXFileUniqueID ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXFileUniqueID();
            if(Data != null)
            {
                if (Data.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(Data), "Array is out of bounds. Size should not be more than 3");

                var inputArray0 = Data;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.data[i] = inputArray0[i];
                        }
                    }
                }
            }
            return _internal;
        }

        public static implicit operator QBFileUniqueID(QuantumBinding.Clang.Interop.CXFileUniqueID q)
        {
            return new QBFileUniqueID(q);
        }

    }

    public partial class QBSourceLocation
    {
        public QBSourceLocation()
        {
        }

        public QBSourceLocation(QuantumBinding.Clang.Interop.CXSourceLocation _internal)
        {
            Ptr_data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Ptr_data[i] = _internal.ptr_data[i];
            }
            Int_data = _internal.int_data;
        }

        public System.IntPtr[] Ptr_data { get; set; }
        public uint Int_data { get; set; }
        ///<summary>
        /// Determine whether two source locations, which must refer into the same translation unit, refer to exactly the same point in the source code.
        ///</summary>
        public uint equalLocations(QBSourceLocation loc2)
        {
            var arg1 = ReferenceEquals(loc2, null) ? new QuantumBinding.Clang.Interop.CXSourceLocation() : loc2.ToInternal();
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_equalLocations(ToInternal(), arg1);
            return result;
        }

        ///<summary>
        /// Retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        public void getExpansionLocation(out QuantumBinding.Clang.QBFile file, out uint line, out uint column, out uint offset)
        {
            CXFileImpl arg1;
            QuantumBinding.Clang.Interop.ClangInterop.clang_getExpansionLocation(ToInternal(), out arg1, out line, out column, out offset);
            file = new QBFile(arg1);
        }

        ///<summary>
        /// Retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        public void getFileLocation(out QuantumBinding.Clang.QBFile file, out uint line, out uint column, out uint offset)
        {
            CXFileImpl arg1;
            QuantumBinding.Clang.Interop.ClangInterop.clang_getFileLocation(ToInternal(), out arg1, out line, out column, out offset);
            file = new QBFile(arg1);
        }

        ///<summary>
        /// Legacy API to retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        public void getInstantiationLocation(out QuantumBinding.Clang.QBFile file, out uint line, out uint column, out uint offset)
        {
            CXFileImpl arg1;
            QuantumBinding.Clang.Interop.ClangInterop.clang_getInstantiationLocation(ToInternal(), out arg1, out line, out column, out offset);
            file = new QBFile(arg1);
        }

        ///<summary>
        /// Retrieve the file, line and column represented by the given source location, as specified in a # line directive.
        ///</summary>
        public void getPresumedLocation(out QBString filename, out uint line, out uint column)
        {
            CXString arg1;
            QuantumBinding.Clang.Interop.ClangInterop.clang_getPresumedLocation(ToInternal(), out arg1, out line, out column);
            filename = new QBString(arg1);
        }

        ///<summary>
        /// Retrieve a source range given the beginning and ending source locations.
        ///</summary>
        public QBSourceRange getRange(QBSourceLocation end)
        {
            var arg1 = ReferenceEquals(end, null) ? new QuantumBinding.Clang.Interop.CXSourceLocation() : end.ToInternal();
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_getRange(ToInternal(), arg1);
            return result;
        }

        ///<summary>
        /// Retrieve the file, line, column, and offset represented by the given source location.
        ///</summary>
        public void getSpellingLocation(out QuantumBinding.Clang.QBFile file, out uint line, out uint column, out uint offset)
        {
            CXFileImpl arg1;
            QuantumBinding.Clang.Interop.ClangInterop.clang_getSpellingLocation(ToInternal(), out arg1, out line, out column, out offset);
            file = new QBFile(arg1);
        }

        ///<summary>
        /// Returns non-zero if the given source location is in the main file of the corresponding translation unit.
        ///</summary>
        public int Location_isFromMainFile()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Location_isFromMainFile(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if the given source location is in a system header.
        ///</summary>
        public int Location_isInSystemHeader()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Location_isInSystemHeader(ToInternal());
        }


        public QuantumBinding.Clang.Interop.CXSourceLocation ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXSourceLocation();
            if(Ptr_data != null)
            {
                if (Ptr_data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Ptr_data), "Array is out of bounds. Size should not be more than 2");

                _internal.ptr_data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.ptr_data[i] = Ptr_data[i];
                }
            }
            _internal.int_data = Int_data;
            return _internal;
        }

        public static implicit operator QBSourceLocation(QuantumBinding.Clang.Interop.CXSourceLocation q)
        {
            return new QBSourceLocation(q);
        }

    }

    public partial class QBSourceRange
    {
        public QBSourceRange()
        {
        }

        public QBSourceRange(QuantumBinding.Clang.Interop.CXSourceRange _internal)
        {
            Ptr_data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Ptr_data[i] = _internal.ptr_data[i];
            }
            Begin_int_data = _internal.begin_int_data;
            End_int_data = _internal.end_int_data;
        }

        public System.IntPtr[] Ptr_data { get; set; }
        public uint Begin_int_data { get; set; }
        public uint End_int_data { get; set; }
        ///<summary>
        /// Determine whether two ranges are equivalent.
        ///</summary>
        public uint equalRanges(QBSourceRange range2)
        {
            var arg1 = ReferenceEquals(range2, null) ? new QuantumBinding.Clang.Interop.CXSourceRange() : range2.ToInternal();
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_equalRanges(ToInternal(), arg1);
            return result;
        }

        ///<summary>
        /// Retrieve a source location representing the last character within a source range.
        ///</summary>
        public QBSourceLocation getRangeEnd()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getRangeEnd(ToInternal());
        }

        ///<summary>
        /// Retrieve a source location representing the first character within a source range.
        ///</summary>
        public QBSourceLocation getRangeStart()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getRangeStart(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if range is null.
        ///</summary>
        public int Range_isNull()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Range_isNull(ToInternal());
        }


        public QuantumBinding.Clang.Interop.CXSourceRange ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXSourceRange();
            if(Ptr_data != null)
            {
                if (Ptr_data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Ptr_data), "Array is out of bounds. Size should not be more than 2");

                _internal.ptr_data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.ptr_data[i] = Ptr_data[i];
                }
            }
            _internal.begin_int_data = Begin_int_data;
            _internal.end_int_data = End_int_data;
            return _internal;
        }

        public static implicit operator QBSourceRange(QuantumBinding.Clang.Interop.CXSourceRange q)
        {
            return new QBSourceRange(q);
        }

    }

    public partial class QBSourceRangeList : QBDisposableObject
    {
        private StructReference refranges;

        public QBSourceRangeList()
        {
        }

        public QBSourceRangeList(QuantumBinding.Clang.Interop.CXSourceRangeList _internal)
        {
            Count = _internal.count;
            Ranges = new QBSourceRange(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXSourceRange>(_internal.ranges));
            Marshal.FreeHGlobal(_internal.ranges);
        }

        public uint Count { get; set; }
        public QBSourceRange Ranges { get; set; }
        ///<summary>
        /// Destroy the given CXSourceRangeList.
        ///</summary>
        public void disposeSourceRangeList()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeSourceRangeList(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public QuantumBinding.Clang.Interop.CXSourceRangeList ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXSourceRangeList();
            _internal.count = Count;
            refranges?.Dispose();
            if (Ranges != null)
            {
                var struct0 = Ranges.ToInternal();
                refranges = new StructReference(struct0);
                _internal.ranges = refranges.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refranges?.Dispose();
        }


        public static implicit operator QBSourceRangeList(QuantumBinding.Clang.Interop.CXSourceRangeList q)
        {
            return new QBSourceRangeList(q);
        }

    }

    public partial class QBTUResourceUsageEntry
    {
        public QBTUResourceUsageEntry()
        {
        }

        public QBTUResourceUsageEntry(QuantumBinding.Clang.Interop.CXTUResourceUsageEntry _internal)
        {
            Kind = (CXTUResourceUsageKind)_internal.kind;
            Amount = _internal.amount;
        }

        public CXTUResourceUsageKind Kind { get; set; }
        public uint Amount { get; set; }

        public QuantumBinding.Clang.Interop.CXTUResourceUsageEntry ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXTUResourceUsageEntry();
            _internal.kind = (uint)Kind;
            _internal.amount = Amount;
            return _internal;
        }

        public static implicit operator QBTUResourceUsageEntry(QuantumBinding.Clang.Interop.CXTUResourceUsageEntry q)
        {
            return new QBTUResourceUsageEntry(q);
        }

    }

    public partial class QBTUResourceUsage : QBDisposableObject
    {
        private StructReference refentries;

        public QBTUResourceUsage()
        {
        }

        public QBTUResourceUsage(QuantumBinding.Clang.Interop.CXTUResourceUsage _internal)
        {
            Data = _internal.data;
            NumEntries = _internal.numEntries;
            Entries = new QBTUResourceUsageEntry(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXTUResourceUsageEntry>(_internal.entries));
            Marshal.FreeHGlobal(_internal.entries);
        }

        public System.IntPtr Data { get; set; }
        public uint NumEntries { get; set; }
        public QBTUResourceUsageEntry Entries { get; set; }
        public void disposeCXTUResourceUsage()
        {
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeCXTUResourceUsage(ToInternal());
        }


        public QuantumBinding.Clang.Interop.CXTUResourceUsage ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXTUResourceUsage();
            _internal.data = Data;
            _internal.numEntries = NumEntries;
            refentries?.Dispose();
            if (Entries != null)
            {
                var struct0 = Entries.ToInternal();
                refentries = new StructReference(struct0);
                _internal.entries = refentries.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refentries?.Dispose();
        }


        public static implicit operator QBTUResourceUsage(QuantumBinding.Clang.Interop.CXTUResourceUsage q)
        {
            return new QBTUResourceUsage(q);
        }

    }

    public partial class QBCursor
    {
        public QBCursor()
        {
        }

        public QBCursor(QuantumBinding.Clang.Interop.CXCursor _internal)
        {
            Kind = (CXCursorKind)_internal.kind;
            Xdata = _internal.xdata;
            Data = new System.IntPtr[3];
            for (int i = 0; i < 3; ++i)
            {
                Data[i] = _internal.data[i];
            }
        }

        public CXCursorKind Kind { get; set; }
        public int Xdata { get; set; }
        public System.IntPtr[] Data { get; set; }
        ///<summary>
        /// If cursor is a statement declaration tries to evaluate the statement and if its variable, tries to evaluate its initializer, into its corresponding type. If it's an expression, tries to evaluate the expression.
        ///</summary>
        public QBEvalResult Cursor_Evaluate()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_Evaluate(ToInternal());
        }

        ///<summary>
        /// Retrieve the argument cursor of a function or method.
        ///</summary>
        public QBCursor Cursor_getArgument(uint i)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getArgument(ToInternal(), i);
        }

        ///<summary>
        /// Given a cursor that represents a documentable entity (e.g., declaration), return the associated first paragraph.
        ///</summary>
        public QBString Cursor_getBriefCommentText()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getBriefCommentText(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents a declaration, return the associated comment's source range. The range may include multiple consecutive comments with whitespace in between.
        ///</summary>
        public QBSourceRange Cursor_getCommentRange()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getCommentRange(ToInternal());
        }

        ///<summary>
        /// Retrieve the CXStrings representing the mangled symbols of the C++ constructor or destructor at the cursor.
        ///</summary>
        public QBStringSet Cursor_getCXXManglings()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getCXXManglings(ToInternal());
        }

        ///<summary>
        /// Retrieve the CXString representing the mangled name of the cursor.
        ///</summary>
        public QBString Cursor_getMangling()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getMangling(ToInternal());
        }

        ///<summary>
        /// Given a CXCursor_ModuleImportDecl cursor, return the associated module.
        ///</summary>
        public QBModule Cursor_getModule()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getModule(ToInternal());
        }

        ///<summary>
        /// Retrieve the number of non-variadic arguments associated with a given cursor.
        ///</summary>
        public int Cursor_getNumArguments()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getNumArguments(ToInternal());
        }

        ///<summary>
        /// Returns the number of template args of a function decl representing a template specialization.
        ///</summary>
        public int Cursor_getNumTemplateArguments()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getNumTemplateArguments(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents an Objective-C method or parameter declaration, return the associated Objective-C qualifiers for the return type or the parameter respectively. The bits are formed from CXObjCDeclQualifierKind.
        ///</summary>
        public uint Cursor_getObjCDeclQualifiers()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getObjCDeclQualifiers(ToInternal());
        }

        ///<summary>
        /// Retrieve the CXStrings representing the mangled symbols of the ObjC class interface or implementation at the cursor.
        ///</summary>
        public QBStringSet Cursor_getObjCManglings()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getObjCManglings(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents a property declaration, return the associated property attributes. The bits are formed from CXObjCPropertyAttrKind.
        ///</summary>
        public uint Cursor_getObjCPropertyAttributes(uint reserved)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getObjCPropertyAttributes(ToInternal(), reserved);
        }

        ///<summary>
        /// Given a cursor that represents a property declaration, return the name of the method that implements the getter.
        ///</summary>
        public QBString Cursor_getObjCPropertyGetterName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getObjCPropertyGetterName(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents a property declaration, return the name of the method that implements the setter, if any.
        ///</summary>
        public QBString Cursor_getObjCPropertySetterName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getObjCPropertySetterName(ToInternal());
        }

        ///<summary>
        /// If the cursor points to a selector identifier in an Objective-C method or message expression, this returns the selector index.
        ///</summary>
        public int Cursor_getObjCSelectorIndex()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getObjCSelectorIndex(ToInternal());
        }

        ///<summary>
        /// Return the offset of the field represented by the Cursor.
        ///</summary>
        public long Cursor_getOffsetOfField()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getOffsetOfField(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents a documentable entity (e.g., declaration), return the associated parsed comment as a CXComment_FullComment AST node.
        ///</summary>
        public QBComment Cursor_getParsedComment()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getParsedComment(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents a declaration, return the associated comment text, including comment markers.
        ///</summary>
        public QBString Cursor_getRawCommentText()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getRawCommentText(ToInternal());
        }

        ///<summary>
        /// Given a cursor pointing to an Objective-C message or property reference, or C++ method call, returns the CXType of the receiver.
        ///</summary>
        public QBType Cursor_getReceiverType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getReceiverType(ToInternal());
        }

        ///<summary>
        /// Retrieve a range for a piece that forms the cursors spelling name. Most of the times there is only one range for the complete spelling but for Objective-C methods and Objective-C message expressions, there are multiple pieces for each selector identifier.
        ///</summary>
        public QBSourceRange Cursor_getSpellingNameRange(uint pieceIndex, uint options)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getSpellingNameRange(ToInternal(), pieceIndex, options);
        }

        ///<summary>
        /// Returns the storage class for a function or variable declaration.
        ///</summary>
        public CX_StorageClass Cursor_getStorageClass()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getStorageClass(ToInternal());
        }

        ///<summary>
        /// Retrieve the kind of the I'th template argument of the CXCursor C.
        ///</summary>
        public CXTemplateArgumentKind Cursor_getTemplateArgumentKind(uint I)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getTemplateArgumentKind(ToInternal(), I);
        }

        ///<summary>
        /// Retrieve a CXType representing the type of a TemplateArgument of a function decl representing a template specialization.
        ///</summary>
        public QBType Cursor_getTemplateArgumentType(uint I)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getTemplateArgumentType(ToInternal(), I);
        }

        ///<summary>
        /// Retrieve the value of an Integral TemplateArgument (of a function decl representing a template specialization) as an unsigned long long.
        ///</summary>
        public ulong Cursor_getTemplateArgumentUnsignedValue(uint I)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getTemplateArgumentUnsignedValue(ToInternal(), I);
        }

        ///<summary>
        /// Retrieve the value of an Integral TemplateArgument (of a function decl representing a template specialization) as a signed long long.
        ///</summary>
        public long Cursor_getTemplateArgumentValue(uint I)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getTemplateArgumentValue(ToInternal(), I);
        }

        ///<summary>
        /// Returns the translation unit that a cursor originated from.
        ///</summary>
        public QBTranslationUnit Cursor_getTranslationUnit()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_getTranslationUnit(ToInternal());
        }

        ///<summary>
        /// Determine whether the given cursor has any attributes.
        ///</summary>
        public uint Cursor_hasAttrs()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_hasAttrs(ToInternal());
        }

        ///<summary>
        /// Determine whether the given cursor represents an anonymous tag or namespace
        ///</summary>
        public uint Cursor_isAnonymous()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isAnonymous(ToInternal());
        }

        ///<summary>
        /// Determine whether the given cursor represents an anonymous record declaration.
        ///</summary>
        public uint Cursor_isAnonymousRecordDecl()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isAnonymousRecordDecl(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if the cursor specifies a Record member that is a bitfield.
        ///</summary>
        public uint Cursor_isBitField()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isBitField(ToInternal());
        }

        ///<summary>
        /// Given a cursor pointing to a C++ method call or an Objective-C message, returns non-zero if the method/message is "dynamic", meaning:
        ///</summary>
        public int Cursor_isDynamicCall()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isDynamicCall(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if the given cursor points to a symbol marked with external_source_symbol attribute.
        ///</summary>
        public uint Cursor_isExternalSymbol(QBString language, QBString definedIn, ref uint isGenerated)
        {
            var arg1 = ReferenceEquals(language, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(language.ToInternal());
            var arg2 = ReferenceEquals(definedIn, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(definedIn.ToInternal());
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isExternalSymbol(ToInternal(), arg1, arg2, ref isGenerated);
            language?.Dispose();
            Marshal.FreeHGlobal(arg1);
            definedIn?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        ///<summary>
        /// Determine whether a CXCursor that is a function declaration, is an inline declaration.
        ///</summary>
        public uint Cursor_isFunctionInlined()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isFunctionInlined(ToInternal());
        }

        ///<summary>
        /// Determine whether the given cursor represents an inline namespace declaration.
        ///</summary>
        public uint Cursor_isInlineNamespace()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isInlineNamespace(ToInternal());
        }

        ///<summary>
        /// Determine whether a CXCursor that is a macro, is a builtin one.
        ///</summary>
        public uint Cursor_isMacroBuiltin()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isMacroBuiltin(ToInternal());
        }

        ///<summary>
        /// Determine whether a CXCursor that is a macro, is function like.
        ///</summary>
        public uint Cursor_isMacroFunctionLike()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isMacroFunctionLike(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if cursor is null.
        ///</summary>
        public int Cursor_isNull()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isNull(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents an Objective-C method or property declaration, return non-zero if the declaration was affected by "@optional". Returns zero if the cursor is not such a declaration or it is "@required".
        ///</summary>
        public uint Cursor_isObjCOptional()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isObjCOptional(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if the given cursor is a variadic function or method.
        ///</summary>
        public uint Cursor_isVariadic()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Cursor_isVariadic(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ constructor is a converting constructor.
        ///</summary>
        public uint CXXConstructor_isConvertingConstructor()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXConstructor_isConvertingConstructor(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ constructor is a copy constructor.
        ///</summary>
        public uint CXXConstructor_isCopyConstructor()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXConstructor_isCopyConstructor(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ constructor is the default constructor.
        ///</summary>
        public uint CXXConstructor_isDefaultConstructor()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXConstructor_isDefaultConstructor(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ constructor is a move constructor.
        ///</summary>
        public uint CXXConstructor_isMoveConstructor()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXConstructor_isMoveConstructor(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ field is declared 'mutable'.
        ///</summary>
        public uint CXXField_isMutable()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXField_isMutable(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ member function or member function template is declared 'const'.
        ///</summary>
        public uint CXXMethod_isConst()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXMethod_isConst(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ method is declared '= default'.
        ///</summary>
        public uint CXXMethod_isDefaulted()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXMethod_isDefaulted(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ member function or member function template is pure virtual.
        ///</summary>
        public uint CXXMethod_isPureVirtual()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXMethod_isPureVirtual(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ member function or member function template is declared 'static'.
        ///</summary>
        public uint CXXMethod_isStatic()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXMethod_isStatic(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ member function or member function template is explicitly declared 'virtual' or if it overrides a virtual method from one of the base classes.
        ///</summary>
        public uint CXXMethod_isVirtual()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXMethod_isVirtual(ToInternal());
        }

        ///<summary>
        /// Determine if a C++ record is abstract, i.e. whether a class or struct has a pure virtual member function.
        ///</summary>
        public uint CXXRecord_isAbstract()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_CXXRecord_isAbstract(ToInternal());
        }

        ///<summary>
        /// Free the set of overridden cursors returned by clang_getOverriddenCursors().
        ///</summary>
        public void disposeOverriddenCursors()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeOverriddenCursors(arg0);
            Marshal.FreeHGlobal(arg0);
        }

        ///<summary>
        /// Determine if an enum declaration refers to a scoped enum.
        ///</summary>
        public uint EnumDecl_isScoped()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_EnumDecl_isScoped(ToInternal());
        }

        ///<summary>
        /// Determine whether two cursors are equivalent.
        ///</summary>
        public uint equalCursors(QBCursor param1)
        {
            var arg1 = ReferenceEquals(param1, null) ? new QuantumBinding.Clang.Interop.CXCursor() : param1.ToInternal();
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_equalCursors(ToInternal(), arg1);
            return result;
        }

        ///<summary>
        /// Find references of a declaration in a specific file.
        ///</summary>
        public CXResult findReferencesInFile(QuantumBinding.Clang.QBFile file, QBCursorAndRangeVisitor visitor)
        {
            var arg1 = ReferenceEquals(file, null) ? new CXFileImpl() : (CXFileImpl)file;
            var arg2 = ReferenceEquals(visitor, null) ? new QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor() : visitor.ToInternal();
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_findReferencesInFile(ToInternal(), arg1, arg2);
            visitor?.Dispose();
            return result;
        }

        ///<summary>
        /// Retrieve the canonical cursor corresponding to the given cursor.
        ///</summary>
        public QBCursor getCanonicalCursor()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCanonicalCursor(ToInternal());
        }

        ///<summary>
        /// Determine the availability of the entity that this cursor refers to, taking the current target platform into account.
        ///</summary>
        public CXAvailabilityKind getCursorAvailability()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorAvailability(ToInternal());
        }

        ///<summary>
        /// Retrieve a completion string for an arbitrary declaration or macro definition cursor.
        ///</summary>
        public QBCompletionString getCursorCompletionString()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorCompletionString(ToInternal());
        }

        ///<summary>
        /// For a cursor that is either a reference to or a declaration of some entity, retrieve a cursor that describes the definition of that entity.
        ///</summary>
        public QBCursor getCursorDefinition()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorDefinition(ToInternal());
        }

        ///<summary>
        /// Retrieve the display name for the entity referenced by this cursor.
        ///</summary>
        public QBString getCursorDisplayName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorDisplayName(ToInternal());
        }

        ///<summary>
        /// Retrieve the exception specification type associated with a given cursor. This is a value of type CXCursor_ExceptionSpecificationKind.
        ///</summary>
        public int getCursorExceptionSpecificationType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorExceptionSpecificationType(ToInternal());
        }

        ///<summary>
        /// Retrieve the physical extent of the source construct referenced by the given cursor.
        ///</summary>
        public QBSourceRange getCursorExtent()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorExtent(ToInternal());
        }

        ///<summary>
        /// Retrieve the kind of the given cursor.
        ///</summary>
        public CXCursorKind getCursorKind()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorKind(ToInternal());
        }

        ///<summary>
        /// Determine the "language" of the entity referred to by a given cursor.
        ///</summary>
        public CXLanguageKind getCursorLanguage()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorLanguage(ToInternal());
        }

        ///<summary>
        /// Determine the lexical parent of the given cursor.
        ///</summary>
        public QBCursor getCursorLexicalParent()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorLexicalParent(ToInternal());
        }

        ///<summary>
        /// Determine the linkage of the entity referred to by a given cursor.
        ///</summary>
        public CXLinkageKind getCursorLinkage()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorLinkage(ToInternal());
        }

        ///<summary>
        /// Retrieve the physical location of the source constructor referenced by the given cursor.
        ///</summary>
        public QBSourceLocation getCursorLocation()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorLocation(ToInternal());
        }

        ///<summary>
        /// Determine the availability of the entity that this cursor refers to on any platforms for which availability information is known.
        ///</summary>
        public int getCursorPlatformAvailability(int always_deprecated, QBString deprecated_message, ref int always_unavailable, QBString unavailable_message, QBPlatformAvailability[] availability, int availability_size)
        {
            var arg1 = ReferenceEquals(deprecated_message, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(deprecated_message.ToInternal());
            var arg2 = ReferenceEquals(unavailable_message, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(unavailable_message.ToInternal());
            QuantumBinding.Clang.Interop.CXPlatformAvailability[] arg3 = null;
            arg3 = ReferenceEquals(availability, null) ? null : new QuantumBinding.Clang.Interop.CXPlatformAvailability[availability.Length];
            if (!ReferenceEquals(availability, null))
            {
                for (var i = 0U; i < availability.Length; ++i)
                {
                    arg3[i] = availability[i].ToInternal();
                }
            }
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorPlatformAvailability(ToInternal(), always_deprecated, arg1, ref always_unavailable, arg2, arg3, availability_size);
            deprecated_message?.Dispose();
            Marshal.FreeHGlobal(arg1);
            unavailable_message?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        ///<summary>
        /// Pretty print declarations.
        ///</summary>
        public QBString getCursorPrettyPrinted(QuantumBinding.Clang.QBPrintingPolicy Policy)
        {
            var arg1 = ReferenceEquals(Policy, null) ? new CXPrintingPolicyImpl() : (CXPrintingPolicyImpl)Policy;
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorPrettyPrinted(ToInternal(), arg1);
        }

        ///<summary>
        /// Retrieve the default policy for the cursor.
        ///</summary>
        public QBPrintingPolicy getCursorPrintingPolicy()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorPrintingPolicy(ToInternal());
        }

        ///<summary>
        /// For a cursor that is a reference, retrieve a cursor representing the entity that it references.
        ///</summary>
        public QBCursor getCursorReferenced()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorReferenced(ToInternal());
        }

        ///<summary>
        /// Given a cursor that references something else, return the source range covering that reference.
        ///</summary>
        public QBSourceRange getCursorReferenceNameRange(uint NameFlags, uint PieceIndex)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorReferenceNameRange(ToInternal(), NameFlags, PieceIndex);
        }

        ///<summary>
        /// Retrieve the return type associated with a given cursor.
        ///</summary>
        public QBType getCursorResultType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorResultType(ToInternal());
        }

        ///<summary>
        /// Determine the semantic parent of the given cursor.
        ///</summary>
        public QBCursor getCursorSemanticParent()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorSemanticParent(ToInternal());
        }

        ///<summary>
        /// Retrieve a name for the entity referenced by this cursor.
        ///</summary>
        public QBString getCursorSpelling()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorSpelling(ToInternal());
        }

        ///<summary>
        /// Determine the "thread-local storage (TLS) kind" of the declaration referred to by a cursor.
        ///</summary>
        public CXTLSKind getCursorTLSKind()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorTLSKind(ToInternal());
        }

        ///<summary>
        /// Retrieve the type of a CXCursor (if any).
        ///</summary>
        public QBType getCursorType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorType(ToInternal());
        }

        ///<summary>
        /// Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the given cursor.
        ///</summary>
        public QBString getCursorUSR()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorUSR(ToInternal());
        }

        ///<summary>
        /// Describe the visibility of the entity referred to by a cursor.
        ///</summary>
        public CXVisibilityKind getCursorVisibility()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCursorVisibility(ToInternal());
        }

        ///<summary>
        /// Returns the access control level for the referenced object.
        ///</summary>
        public CX_CXXAccessSpecifier getCXXAccessSpecifier()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCXXAccessSpecifier(ToInternal());
        }

        ///<summary>
        /// Returns the Objective-C type encoding for the specified declaration.
        ///</summary>
        public QBString getDeclObjCTypeEncoding()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getDeclObjCTypeEncoding(ToInternal());
        }

        public void getDefinitionSpellingAndExtent(in string[] startBuf, in string[] endBuf, ref uint startLine, ref uint startColumn, ref uint endLine, ref uint endColumn)
        {
            QuantumBinding.Clang.Interop.ClangInterop.clang_getDefinitionSpellingAndExtent(ToInternal(), startBuf, endBuf, ref startLine, ref startColumn, ref endLine, ref endColumn);
        }

        ///<summary>
        /// Retrieve the integer value of an enum constant declaration as an unsigned long long.
        ///</summary>
        public ulong getEnumConstantDeclUnsignedValue()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getEnumConstantDeclUnsignedValue(ToInternal());
        }

        ///<summary>
        /// Retrieve the integer value of an enum constant declaration as a signed long long.
        ///</summary>
        public long getEnumConstantDeclValue()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getEnumConstantDeclValue(ToInternal());
        }

        ///<summary>
        /// Retrieve the integer type of an enum declaration.
        ///</summary>
        public QBType getEnumDeclIntegerType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getEnumDeclIntegerType(ToInternal());
        }

        ///<summary>
        /// Retrieve the bit width of a bit field declaration as an integer.
        ///</summary>
        public int getFieldDeclBitWidth()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getFieldDeclBitWidth(ToInternal());
        }

        ///<summary>
        /// For cursors representing an iboutletcollection attribute, this function returns the collection element type.
        ///</summary>
        public QBType getIBOutletCollectionType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getIBOutletCollectionType(ToInternal());
        }

        ///<summary>
        /// Retrieve the file that is included by the given inclusion directive cursor.
        ///</summary>
        public QBFile getIncludedFile()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getIncludedFile(ToInternal());
        }

        ///<summary>
        /// Determine the number of overloaded declarations referenced by a CXCursor_OverloadedDeclRef cursor.
        ///</summary>
        public uint getNumOverloadedDecls()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getNumOverloadedDecls(ToInternal());
        }

        ///<summary>
        /// Retrieve a cursor for one of the overloaded declarations referenced by a CXCursor_OverloadedDeclRef cursor.
        ///</summary>
        public QBCursor getOverloadedDecl(uint index)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getOverloadedDecl(ToInternal(), index);
        }

        ///<summary>
        /// Determine the set of methods that are overridden by the given method.
        ///</summary>
        public void getOverriddenCursors(out QBCursor[] overridden, out uint num_overridden)
        {
            var arg1 = System.IntPtr.Zero;
            QuantumBinding.Clang.Interop.ClangInterop.clang_getOverriddenCursors(ToInternal(), ref arg1, out num_overridden);
            var _overridden = new QuantumBinding.Clang.Interop.CXCursor[num_overridden];
            MarshalUtils.IntPtrToManagedArray<QuantumBinding.Clang.Interop.CXCursor>(arg1, _overridden);
            overridden = new QBCursor[num_overridden];
            for (var i = 0U; i< num_overridden; ++i)
            {
                overridden[i] = new QBCursor(_overridden[i]);
            }
        }

        ///<summary>
        /// Given a cursor that may represent a specialization or instantiation of a template, retrieve the cursor that represents the template that it specializes or from which it was instantiated.
        ///</summary>
        public QBCursor getSpecializedCursorTemplate()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getSpecializedCursorTemplate(ToInternal());
        }

        ///<summary>
        /// Given a cursor that represents a template, determine the cursor kind of the specializations would be generated by instantiating the template.
        ///</summary>
        public CXCursorKind getTemplateCursorKind()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getTemplateCursorKind(ToInternal());
        }

        ///<summary>
        /// Retrieve the underlying type of a typedef declaration.
        ///</summary>
        public QBType getTypedefDeclUnderlyingType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getTypedefDeclUnderlyingType(ToInternal());
        }

        ///<summary>
        /// Compute a hash value for the given cursor.
        ///</summary>
        public uint hashCursor()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_hashCursor(ToInternal());
        }

        ///<summary>
        /// Determine whether the declaration pointed to by this cursor is also a definition of that entity.
        ///</summary>
        public uint isCursorDefinition()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isCursorDefinition(ToInternal());
        }

        ///<summary>
        /// Determine whether the given declaration is invalid.
        ///</summary>
        public uint isInvalidDeclaration()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isInvalidDeclaration(ToInternal());
        }

        ///<summary>
        /// Returns 1 if the base class specified by the cursor with kind CX_CXXBaseSpecifier is virtual.
        ///</summary>
        public uint isVirtualBase()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isVirtualBase(ToInternal());
        }

        ///<summary>
        /// Visit the children of a particular cursor.
        ///</summary>
        public uint visitChildren(System.IntPtr visitor, QuantumBinding.Clang.QBClientData client_data)
        {
            var arg1 = ReferenceEquals(client_data, null) ? new CXClientDataImpl() : (CXClientDataImpl)client_data;
            return QuantumBinding.Clang.Interop.ClangInterop.clang_visitChildren(ToInternal(), visitor, arg1);
        }


        public QuantumBinding.Clang.Interop.CXCursor ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCursor();
            _internal.kind = (uint)Kind;
            _internal.xdata = Xdata;
            if(Data != null)
            {
                if (Data.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(Data), "Array is out of bounds. Size should not be more than 3");

                _internal.data = new System.IntPtr[3];
                for (int i = 0; i < 3; ++i)
                {
                    _internal.data[i] = Data[i];
                }
            }
            return _internal;
        }

        public static implicit operator QBCursor(QuantumBinding.Clang.Interop.CXCursor q)
        {
            return new QBCursor(q);
        }

    }

    public partial class QBPlatformAvailability
    {
        public QBPlatformAvailability()
        {
        }

        public QBPlatformAvailability(QuantumBinding.Clang.Interop.CXPlatformAvailability _internal)
        {
            Platform = new QBString(_internal.Platform);
            Introduced = new QBVersion(_internal.Introduced);
            Deprecated = new QBVersion(_internal.Deprecated);
            Obsoleted = new QBVersion(_internal.Obsoleted);
            Unavailable = _internal.Unavailable;
            Message = new QBString(_internal.Message);
        }

        public QBString Platform { get; set; }
        public QBVersion Introduced { get; set; }
        public QBVersion Deprecated { get; set; }
        public QBVersion Obsoleted { get; set; }
        public int Unavailable { get; set; }
        public QBString Message { get; set; }
        ///<summary>
        /// Free the memory associated with a CXPlatformAvailability structure.
        ///</summary>
        public void disposeCXPlatformAvailability()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeCXPlatformAvailability(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public QuantumBinding.Clang.Interop.CXPlatformAvailability ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXPlatformAvailability();
            if (Platform != null)
            {
                _internal.Platform = Platform.ToInternal();
            }
            if (Introduced != null)
            {
                _internal.Introduced = Introduced.ToInternal();
            }
            if (Deprecated != null)
            {
                _internal.Deprecated = Deprecated.ToInternal();
            }
            if (Obsoleted != null)
            {
                _internal.Obsoleted = Obsoleted.ToInternal();
            }
            _internal.Unavailable = Unavailable;
            if (Message != null)
            {
                _internal.Message = Message.ToInternal();
            }
            return _internal;
        }

        public static implicit operator QBPlatformAvailability(QuantumBinding.Clang.Interop.CXPlatformAvailability q)
        {
            return new QBPlatformAvailability(q);
        }

    }

    public partial class QBType
    {
        public QBType()
        {
        }

        public QBType(QuantumBinding.Clang.Interop.CXType _internal)
        {
            Kind = (CXTypeKind)_internal.kind;
            Data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Data[i] = _internal.data[i];
            }
        }

        public CXTypeKind Kind { get; set; }
        public System.IntPtr[] Data { get; set; }
        ///<summary>
        /// Determine whether two CXTypes represent the same type.
        ///</summary>
        public uint equalTypes(QBType B)
        {
            var arg1 = ReferenceEquals(B, null) ? new QuantumBinding.Clang.Interop.CXType() : B.ToInternal();
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_equalTypes(ToInternal(), arg1);
            return result;
        }

        ///<summary>
        /// Returns the address space of the given type.
        ///</summary>
        public uint getAddressSpace()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getAddressSpace(ToInternal());
        }

        ///<summary>
        /// Retrieve the type of a parameter of a function type.
        ///</summary>
        public QBType getArgType(uint i)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getArgType(ToInternal(), i);
        }

        ///<summary>
        /// Return the element type of an array type.
        ///</summary>
        public QBType getArrayElementType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getArrayElementType(ToInternal());
        }

        ///<summary>
        /// Return the array size of a constant array.
        ///</summary>
        public long getArraySize()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getArraySize(ToInternal());
        }

        ///<summary>
        /// Return the canonical type for a CXType.
        ///</summary>
        public QBType getCanonicalType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getCanonicalType(ToInternal());
        }

        ///<summary>
        /// Return the element type of an array, complex, or vector type.
        ///</summary>
        public QBType getElementType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getElementType(ToInternal());
        }

        ///<summary>
        /// Retrieve the exception specification type associated with a function type. This is a value of type CXCursor_ExceptionSpecificationKind.
        ///</summary>
        public int getExceptionSpecificationType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getExceptionSpecificationType(ToInternal());
        }

        ///<summary>
        /// Retrieve the calling convention associated with a function type.
        ///</summary>
        public CXCallingConv getFunctionTypeCallingConv()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getFunctionTypeCallingConv(ToInternal());
        }

        ///<summary>
        /// Retrieve the number of non-variadic parameters associated with a function type.
        ///</summary>
        public int getNumArgTypes()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getNumArgTypes(ToInternal());
        }

        ///<summary>
        /// Return the number of elements of an array or vector type.
        ///</summary>
        public long getNumElements()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getNumElements(ToInternal());
        }

        ///<summary>
        /// For pointer types, returns the type of the pointee.
        ///</summary>
        public QBType getPointeeType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getPointeeType(ToInternal());
        }

        ///<summary>
        /// Retrieve the return type associated with a function type.
        ///</summary>
        public QBType getResultType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getResultType(ToInternal());
        }

        ///<summary>
        /// Return the cursor for the declaration of the given type.
        ///</summary>
        public QBCursor getTypeDeclaration()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getTypeDeclaration(ToInternal());
        }

        ///<summary>
        /// Returns the typedef name of the given type.
        ///</summary>
        public QBString getTypedefName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getTypedefName(ToInternal());
        }

        ///<summary>
        /// Pretty-print the underlying type using the rules of the language of the translation unit from which it came.
        ///</summary>
        public QBString getTypeSpelling()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getTypeSpelling(ToInternal());
        }

        ///<summary>
        /// Determine whether a CXType has the "const" qualifier set, without looking through typedefs that may have added "const" at a different level.
        ///</summary>
        public uint isConstQualifiedType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isConstQualifiedType(ToInternal());
        }

        ///<summary>
        /// Return 1 if the CXType is a variadic function type, and 0 otherwise.
        ///</summary>
        public uint isFunctionTypeVariadic()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isFunctionTypeVariadic(ToInternal());
        }

        ///<summary>
        /// Return 1 if the CXType is a POD (plain old data) type, and 0 otherwise.
        ///</summary>
        public uint isPODType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isPODType(ToInternal());
        }

        ///<summary>
        /// Determine whether a CXType has the "restrict" qualifier set, without looking through typedefs that may have added "restrict" at a different level.
        ///</summary>
        public uint isRestrictQualifiedType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isRestrictQualifiedType(ToInternal());
        }

        ///<summary>
        /// Determine whether a CXType has the "volatile" qualifier set, without looking through typedefs that may have added "volatile" at a different level.
        ///</summary>
        public uint isVolatileQualifiedType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_isVolatileQualifiedType(ToInternal());
        }

        ///<summary>
        /// Return the alignment of a type in bytes as per C++[expr.alignof] standard.
        ///</summary>
        public long Type_getAlignOf()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getAlignOf(ToInternal());
        }

        ///<summary>
        /// Return the class type of an member pointer type.
        ///</summary>
        public QBType Type_getClassType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getClassType(ToInternal());
        }

        ///<summary>
        /// Retrieve the ref-qualifier kind of a function or method.
        ///</summary>
        public CXRefQualifierKind Type_getCXXRefQualifier()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getCXXRefQualifier(ToInternal());
        }

        ///<summary>
        /// Return the type that was modified by this attributed type.
        ///</summary>
        public QBType Type_getModifiedType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getModifiedType(ToInternal());
        }

        ///<summary>
        /// Retrieve the type named by the qualified-id.
        ///</summary>
        public QBType Type_getNamedType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getNamedType(ToInternal());
        }

        ///<summary>
        /// Retrieve the nullability kind of a pointer type.
        ///</summary>
        public CXTypeNullabilityKind Type_getNullability()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getNullability(ToInternal());
        }

        ///<summary>
        /// Retrieve the number of protocol references associated with an ObjC object/id.
        ///</summary>
        public uint Type_getNumObjCProtocolRefs()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getNumObjCProtocolRefs(ToInternal());
        }

        ///<summary>
        /// Retrieve the number of type arguments associated with an ObjC object.
        ///</summary>
        public uint Type_getNumObjCTypeArgs()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getNumObjCTypeArgs(ToInternal());
        }

        ///<summary>
        /// Returns the number of template arguments for given template specialization, or -1 if type T is not a template specialization.
        ///</summary>
        public int Type_getNumTemplateArguments()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getNumTemplateArguments(ToInternal());
        }

        ///<summary>
        /// Returns the Objective-C type encoding for the specified CXType.
        ///</summary>
        public QBString Type_getObjCEncoding()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getObjCEncoding(ToInternal());
        }

        ///<summary>
        /// Retrieves the base type of the ObjCObjectType.
        ///</summary>
        public QBType Type_getObjCObjectBaseType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getObjCObjectBaseType(ToInternal());
        }

        ///<summary>
        /// Retrieve the decl for a protocol reference for an ObjC object/id.
        ///</summary>
        public QBCursor Type_getObjCProtocolDecl(uint i)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getObjCProtocolDecl(ToInternal(), i);
        }

        ///<summary>
        /// Retrieve a type argument associated with an ObjC object.
        ///</summary>
        public QBType Type_getObjCTypeArg(uint i)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getObjCTypeArg(ToInternal(), i);
        }

        ///<summary>
        /// Return the offset of a field named S in a record of type T in bits as it would be returned by __offsetof__ as per C++11[18.2p4]
        ///</summary>
        public long Type_getOffsetOf(string S)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getOffsetOf(ToInternal(), S);
        }

        ///<summary>
        /// Return the size of a type in bytes as per C++[expr.sizeof] standard.
        ///</summary>
        public long Type_getSizeOf()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getSizeOf(ToInternal());
        }

        ///<summary>
        /// Returns the type template argument of a template class specialization at given index.
        ///</summary>
        public QBType Type_getTemplateArgumentAsType(uint i)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getTemplateArgumentAsType(ToInternal(), i);
        }

        ///<summary>
        /// Gets the type contained by this atomic type.
        ///</summary>
        public QBType Type_getValueType()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_getValueType(ToInternal());
        }

        ///<summary>
        /// Determine if a typedef is 'transparent' tag.
        ///</summary>
        public uint Type_isTransparentTagTypedef()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_isTransparentTagTypedef(ToInternal());
        }

        ///<summary>
        /// Visit the fields of a particular type.
        ///</summary>
        public uint Type_visitFields(System.IntPtr visitor, QuantumBinding.Clang.QBClientData client_data)
        {
            var arg1 = ReferenceEquals(client_data, null) ? new CXClientDataImpl() : (CXClientDataImpl)client_data;
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Type_visitFields(ToInternal(), visitor, arg1);
        }


        public QuantumBinding.Clang.Interop.CXType ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXType();
            _internal.kind = (uint)Kind;
            if(Data != null)
            {
                if (Data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Data), "Array is out of bounds. Size should not be more than 2");

                _internal.data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.data[i] = Data[i];
                }
            }
            return _internal;
        }

        public static implicit operator QBType(QuantumBinding.Clang.Interop.CXType q)
        {
            return new QBType(q);
        }

    }

    public partial class QBToken : QBDisposableObject
    {
        public QBToken()
        {
        }

        public QBToken(QuantumBinding.Clang.Interop.CXToken _internal)
        {
            var tmpArr0 = new uint[4];
            unsafe
            {
                for (int i = 0; i < 4; ++i)
                {
                    tmpArr0[i] = _internal.int_data[i];
                }
            }
            Int_data = tmpArr0;
            Ptr_data = _internal.ptr_data;
        }

        public uint[] Int_data { get; set; }
        public System.IntPtr Ptr_data { get; set; }
        ///<summary>
        /// Determine the kind of the given token.
        ///</summary>
        public CXTokenKind getTokenKind()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_getTokenKind(ToInternal());
        }


        public QuantumBinding.Clang.Interop.CXToken ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXToken();
            if(Int_data != null)
            {
                if (Int_data.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Int_data), "Array is out of bounds. Size should not be more than 4");

                var inputArray0 = Int_data;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.int_data[i] = inputArray0[i];
                        }
                    }
                }
            }
            _internal.ptr_data = Ptr_data;
            return _internal;
        }

        public static implicit operator QBToken(QuantumBinding.Clang.Interop.CXToken q)
        {
            return new QBToken(q);
        }

    }

    public partial class QBCompletionResult
    {
        public QBCompletionResult()
        {
        }

        public QBCompletionResult(QuantumBinding.Clang.Interop.CXCompletionResult _internal)
        {
            CursorKind = (CXCursorKind)_internal.CursorKind;
            CompletionString = new QBCompletionString(_internal.CompletionString);
        }

        public CXCursorKind CursorKind { get; set; }
        public QBCompletionString CompletionString { get; set; }

        public QuantumBinding.Clang.Interop.CXCompletionResult ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCompletionResult();
            _internal.CursorKind = (uint)CursorKind;
            _internal.CompletionString = CompletionString;
            return _internal;
        }

        public static implicit operator QBCompletionResult(QuantumBinding.Clang.Interop.CXCompletionResult q)
        {
            return new QBCompletionResult(q);
        }

    }

    public partial class QBCodeCompleteResults : QBDisposableObject
    {
        private StructReference refResults;

        public QBCodeCompleteResults()
        {
        }

        public QBCodeCompleteResults(QuantumBinding.Clang.Interop.CXCodeCompleteResults _internal)
        {
            Results = new QBCompletionResult(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXCompletionResult>(_internal.Results));
            Marshal.FreeHGlobal(_internal.Results);
            NumResults = _internal.NumResults;
        }

        public QBCompletionResult Results { get; set; }
        public uint NumResults { get; set; }
        ///<summary>
        /// Free the given set of code-completion results.
        ///</summary>
        public void disposeCodeCompleteResults()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            QuantumBinding.Clang.Interop.ClangInterop.clang_disposeCodeCompleteResults(arg0);
            Marshal.FreeHGlobal(arg0);
        }

        ///<summary>
        /// Fix-its that *must* be applied before inserting the text for the corresponding completion.
        ///</summary>
        public QBString getCompletionFixIt(uint completion_index, uint fixit_index, QBSourceRange replacement_range)
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            var arg1 = ReferenceEquals(replacement_range, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(replacement_range.ToInternal());
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_getCompletionFixIt(arg0, completion_index, fixit_index, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        ///<summary>
        /// Retrieve the number of fix-its for the given completion index.
        ///</summary>
        public uint getCompletionNumFixIts(uint completion_index)
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            var result = QuantumBinding.Clang.Interop.ClangInterop.clang_getCompletionNumFixIts(arg0, completion_index);
            Marshal.FreeHGlobal(arg0);
            return result;
        }


        public QuantumBinding.Clang.Interop.CXCodeCompleteResults ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCodeCompleteResults();
            refResults?.Dispose();
            if (Results != null)
            {
                var struct0 = Results.ToInternal();
                refResults = new StructReference(struct0);
                _internal.Results = refResults.Handle;
            }
            _internal.NumResults = NumResults;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refResults?.Dispose();
        }


        public static implicit operator QBCodeCompleteResults(QuantumBinding.Clang.Interop.CXCodeCompleteResults q)
        {
            return new QBCodeCompleteResults(q);
        }

    }

    public partial class QBCursorAndRangeVisitor : QBDisposableObject
    {
        public QBCursorAndRangeVisitor()
        {
        }

        public QBCursorAndRangeVisitor(QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor _internal)
        {
            Context = _internal.context;
            Visit = _internal.visit;
        }

        public System.IntPtr Context { get; set; }
        public System.IntPtr Visit { get; set; }

        public QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor();
            _internal.context = Context;
            _internal.visit = Visit;
            return _internal;
        }

        public static implicit operator QBCursorAndRangeVisitor(QuantumBinding.Clang.Interop.CXCursorAndRangeVisitor q)
        {
            return new QBCursorAndRangeVisitor(q);
        }

    }

    public partial class QBIdxLoc
    {
        public QBIdxLoc()
        {
        }

        public QBIdxLoc(QuantumBinding.Clang.Interop.CXIdxLoc _internal)
        {
            Ptr_data = new System.IntPtr[2];
            for (int i = 0; i < 2; ++i)
            {
                Ptr_data[i] = _internal.ptr_data[i];
            }
            Int_data = _internal.int_data;
        }

        public System.IntPtr[] Ptr_data { get; set; }
        public uint Int_data { get; set; }
        ///<summary>
        /// Retrieve the CXSourceLocation represented by the given CXIdxLoc.
        ///</summary>
        public QBSourceLocation indexLoc_getCXSourceLocation()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_indexLoc_getCXSourceLocation(ToInternal());
        }

        ///<summary>
        /// Retrieve the CXIdxFile, file, line, column, and offset represented by the given CXIdxLoc.
        ///</summary>
        public void indexLoc_getFileLocation(out QuantumBinding.Clang.QBIdxClientFile indexFile, out QuantumBinding.Clang.QBFile file, out uint line, out uint column, out uint offset)
        {
            CXIdxClientFileImpl arg1;
            CXFileImpl arg2;
            QuantumBinding.Clang.Interop.ClangInterop.clang_indexLoc_getFileLocation(ToInternal(), out arg1, out arg2, out line, out column, out offset);
            indexFile = new QBIdxClientFile(arg1);
            file = new QBFile(arg2);
        }


        public QuantumBinding.Clang.Interop.CXIdxLoc ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxLoc();
            if(Ptr_data != null)
            {
                if (Ptr_data.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(Ptr_data), "Array is out of bounds. Size should not be more than 2");

                _internal.ptr_data = new System.IntPtr[2];
                for (int i = 0; i < 2; ++i)
                {
                    _internal.ptr_data[i] = Ptr_data[i];
                }
            }
            _internal.int_data = Int_data;
            return _internal;
        }

        public static implicit operator QBIdxLoc(QuantumBinding.Clang.Interop.CXIdxLoc q)
        {
            return new QBIdxLoc(q);
        }

    }

    public partial class QBIdxIncludedFileInfo : QBDisposableObject
    {
        private StringReference reffilename;

        public QBIdxIncludedFileInfo()
        {
        }

        public QBIdxIncludedFileInfo(QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo _internal)
        {
            HashLoc = new QBIdxLoc(_internal.hashLoc);
            Filename = Marshal.PtrToStringAnsi(_internal.filename);
            File = new QBFile(_internal.file);
            IsImport = _internal.isImport;
            IsAngled = _internal.isAngled;
            IsModuleImport = _internal.isModuleImport;
        }

        public QBIdxLoc HashLoc { get; set; }
        public string Filename { get; set; }
        public QBFile File { get; set; }
        public int IsImport { get; set; }
        public int IsAngled { get; set; }
        public int IsModuleImport { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo();
            if (HashLoc != null)
            {
                _internal.hashLoc = HashLoc.ToInternal();
            }
            reffilename?.Dispose();
            if (Filename != null)
            {
                reffilename = new StringReference(Filename, false);
                _internal.filename = reffilename.Handle;
            }
            _internal.file = File;
            _internal.isImport = IsImport;
            _internal.isAngled = IsAngled;
            _internal.isModuleImport = IsModuleImport;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            reffilename?.Dispose();
        }


        public static implicit operator QBIdxIncludedFileInfo(QuantumBinding.Clang.Interop.CXIdxIncludedFileInfo q)
        {
            return new QBIdxIncludedFileInfo(q);
        }

    }

    public partial class QBIdxImportedASTFileInfo
    {
        public QBIdxImportedASTFileInfo()
        {
        }

        public QBIdxImportedASTFileInfo(QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo _internal)
        {
            File = new QBFile(_internal.file);
            Module = new QBModule(_internal.module);
            Loc = new QBIdxLoc(_internal.loc);
            IsImplicit = _internal.isImplicit;
        }

        public QBFile File { get; set; }
        public QBModule Module { get; set; }
        public QBIdxLoc Loc { get; set; }
        public int IsImplicit { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo();
            _internal.file = File;
            _internal.module = Module;
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            _internal.isImplicit = IsImplicit;
            return _internal;
        }

        public static implicit operator QBIdxImportedASTFileInfo(QuantumBinding.Clang.Interop.CXIdxImportedASTFileInfo q)
        {
            return new QBIdxImportedASTFileInfo(q);
        }

    }

    public partial class QBIdxAttrInfo
    {
        public QBIdxAttrInfo()
        {
        }

        public QBIdxAttrInfo(QuantumBinding.Clang.Interop.CXIdxAttrInfo _internal)
        {
            Kind = (CXIdxAttrKind)_internal.kind;
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
        }

        public CXIdxAttrKind Kind { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxAttrInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxAttrInfo();
            _internal.kind = (uint)Kind;
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            return _internal;
        }

        public static implicit operator QBIdxAttrInfo(QuantumBinding.Clang.Interop.CXIdxAttrInfo q)
        {
            return new QBIdxAttrInfo(q);
        }

    }

    public partial class QBIdxEntityInfo : QBDisposableObject
    {
        private StringReference refname;

        private StringReference refUSR;

        private GCHandleReference refattributes;

        public QBIdxEntityInfo()
        {
        }

        public QBIdxEntityInfo(QuantumBinding.Clang.Interop.CXIdxEntityInfo _internal)
        {
            Kind = (CXIdxEntityKind)_internal.kind;
            TemplateKind = (CXIdxEntityCXXTemplateKind)_internal.templateKind;
            Lang = (CXIdxEntityLanguage)_internal.lang;
            Name = Marshal.PtrToStringAnsi(_internal.name);
            USR = Marshal.PtrToStringAnsi(_internal.USR);
            Cursor = new QBCursor(_internal.cursor);
            Attributes = new QBIdxAttrInfo[_internal.numAttributes];
            var nativeTmpArray0 = new CXIdxAttrInfo[_internal.numAttributes];
            MarshalUtils.IntPtrToManagedArray<CXIdxAttrInfo>(_internal.attributes, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Attributes[i] = new QBIdxAttrInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.attributes);
            NumAttributes = _internal.numAttributes;
        }

        public CXIdxEntityKind Kind { get; set; }
        public CXIdxEntityCXXTemplateKind TemplateKind { get; set; }
        public CXIdxEntityLanguage Lang { get; set; }
        public string Name { get; set; }
        public string USR { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxAttrInfo[] Attributes { get; set; }
        public uint NumAttributes { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxEntityInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxEntityInfo();
            _internal.kind = (uint)Kind;
            _internal.templateKind = (uint)TemplateKind;
            _internal.lang = (uint)Lang;
            refname?.Dispose();
            if (Name != null)
            {
                refname = new StringReference(Name, false);
                _internal.name = refname.Handle;
            }
            refUSR?.Dispose();
            if (USR != null)
            {
                refUSR = new StringReference(USR, false);
                _internal.USR = refUSR.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            refattributes?.Dispose();
            if (Attributes != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxAttrInfo[Attributes.Length];
                for (int i = 0; i < Attributes.Length; ++i)
                {
                    tmpArray0[i] = Attributes[i].ToInternal();
                }
                refattributes = new GCHandleReference(tmpArray0);
                _internal.attributes = refattributes.Handle;
            }
            _internal.numAttributes = NumAttributes;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refname?.Dispose();
            refUSR?.Dispose();
            refattributes?.Dispose();
        }


        public static implicit operator QBIdxEntityInfo(QuantumBinding.Clang.Interop.CXIdxEntityInfo q)
        {
            return new QBIdxEntityInfo(q);
        }

    }

    public partial class QBIdxContainerInfo
    {
        public QBIdxContainerInfo()
        {
        }

        public QBIdxContainerInfo(QuantumBinding.Clang.Interop.CXIdxContainerInfo _internal)
        {
            Cursor = new QBCursor(_internal.cursor);
        }

        public QBCursor Cursor { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxContainerInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxContainerInfo();
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            return _internal;
        }

        public static implicit operator QBIdxContainerInfo(QuantumBinding.Clang.Interop.CXIdxContainerInfo q)
        {
            return new QBIdxContainerInfo(q);
        }

    }

    public partial class QBIdxIBOutletCollectionAttrInfo : QBDisposableObject
    {
        private StructReference refattrInfo;

        private StructReference refobjcClass;

        public QBIdxIBOutletCollectionAttrInfo()
        {
        }

        public QBIdxIBOutletCollectionAttrInfo(QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo _internal)
        {
            AttrInfo = new QBIdxAttrInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxAttrInfo>(_internal.attrInfo));
            Marshal.FreeHGlobal(_internal.attrInfo);
            ObjcClass = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.objcClass));
            Marshal.FreeHGlobal(_internal.objcClass);
            ClassCursor = new QBCursor(_internal.classCursor);
            ClassLoc = new QBIdxLoc(_internal.classLoc);
        }

        public QBIdxAttrInfo AttrInfo { get; set; }
        public QBIdxEntityInfo ObjcClass { get; set; }
        public QBCursor ClassCursor { get; set; }
        public QBIdxLoc ClassLoc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo();
            refattrInfo?.Dispose();
            if (AttrInfo != null)
            {
                var struct0 = AttrInfo.ToInternal();
                refattrInfo = new StructReference(struct0);
                _internal.attrInfo = refattrInfo.Handle;
            }
            refobjcClass?.Dispose();
            if (ObjcClass != null)
            {
                var struct1 = ObjcClass.ToInternal();
                refobjcClass = new StructReference(struct1);
                _internal.objcClass = refobjcClass.Handle;
            }
            if (ClassCursor != null)
            {
                _internal.classCursor = ClassCursor.ToInternal();
            }
            if (ClassLoc != null)
            {
                _internal.classLoc = ClassLoc.ToInternal();
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refattrInfo?.Dispose();
            refobjcClass?.Dispose();
        }


        public static implicit operator QBIdxIBOutletCollectionAttrInfo(QuantumBinding.Clang.Interop.CXIdxIBOutletCollectionAttrInfo q)
        {
            return new QBIdxIBOutletCollectionAttrInfo(q);
        }

    }

    public partial class QBIdxDeclInfo : QBDisposableObject
    {
        private StructReference refentityInfo;

        private StructReference refsemanticContainer;

        private StructReference reflexicalContainer;

        private StructReference refdeclAsContainer;

        private GCHandleReference refattributes;

        public QBIdxDeclInfo()
        {
        }

        public QBIdxDeclInfo(QuantumBinding.Clang.Interop.CXIdxDeclInfo _internal)
        {
            EntityInfo = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.entityInfo));
            Marshal.FreeHGlobal(_internal.entityInfo);
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
            SemanticContainer = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.semanticContainer));
            Marshal.FreeHGlobal(_internal.semanticContainer);
            LexicalContainer = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.lexicalContainer));
            Marshal.FreeHGlobal(_internal.lexicalContainer);
            IsRedeclaration = _internal.isRedeclaration;
            IsDefinition = _internal.isDefinition;
            IsContainer = _internal.isContainer;
            DeclAsContainer = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.declAsContainer));
            Marshal.FreeHGlobal(_internal.declAsContainer);
            IsImplicit = _internal.isImplicit;
            Attributes = new QBIdxAttrInfo[_internal.numAttributes];
            var nativeTmpArray0 = new CXIdxAttrInfo[_internal.numAttributes];
            MarshalUtils.IntPtrToManagedArray<CXIdxAttrInfo>(_internal.attributes, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Attributes[i] = new QBIdxAttrInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.attributes);
            NumAttributes = _internal.numAttributes;
            Flags = _internal.flags;
        }

        public QBIdxEntityInfo EntityInfo { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }
        public QBIdxContainerInfo SemanticContainer { get; set; }
        public QBIdxContainerInfo LexicalContainer { get; set; }
        public int IsRedeclaration { get; set; }
        public int IsDefinition { get; set; }
        public int IsContainer { get; set; }
        public QBIdxContainerInfo DeclAsContainer { get; set; }
        public int IsImplicit { get; set; }
        public QBIdxAttrInfo[] Attributes { get; set; }
        public uint NumAttributes { get; set; }
        public uint Flags { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxDeclInfo();
            refentityInfo?.Dispose();
            if (EntityInfo != null)
            {
                var struct0 = EntityInfo.ToInternal();
                refentityInfo = new StructReference(struct0);
                _internal.entityInfo = refentityInfo.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            refsemanticContainer?.Dispose();
            if (SemanticContainer != null)
            {
                var struct1 = SemanticContainer.ToInternal();
                refsemanticContainer = new StructReference(struct1);
                _internal.semanticContainer = refsemanticContainer.Handle;
            }
            reflexicalContainer?.Dispose();
            if (LexicalContainer != null)
            {
                var struct2 = LexicalContainer.ToInternal();
                reflexicalContainer = new StructReference(struct2);
                _internal.lexicalContainer = reflexicalContainer.Handle;
            }
            _internal.isRedeclaration = IsRedeclaration;
            _internal.isDefinition = IsDefinition;
            _internal.isContainer = IsContainer;
            refdeclAsContainer?.Dispose();
            if (DeclAsContainer != null)
            {
                var struct3 = DeclAsContainer.ToInternal();
                refdeclAsContainer = new StructReference(struct3);
                _internal.declAsContainer = refdeclAsContainer.Handle;
            }
            _internal.isImplicit = IsImplicit;
            refattributes?.Dispose();
            if (Attributes != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxAttrInfo[Attributes.Length];
                for (int i = 0; i < Attributes.Length; ++i)
                {
                    tmpArray0[i] = Attributes[i].ToInternal();
                }
                refattributes = new GCHandleReference(tmpArray0);
                _internal.attributes = refattributes.Handle;
            }
            _internal.numAttributes = NumAttributes;
            _internal.flags = Flags;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refentityInfo?.Dispose();
            refsemanticContainer?.Dispose();
            reflexicalContainer?.Dispose();
            refdeclAsContainer?.Dispose();
            refattributes?.Dispose();
        }


        public static implicit operator QBIdxDeclInfo(QuantumBinding.Clang.Interop.CXIdxDeclInfo q)
        {
            return new QBIdxDeclInfo(q);
        }

    }

    public partial class QBIdxObjCContainerDeclInfo : QBDisposableObject
    {
        private StructReference refdeclInfo;

        public QBIdxObjCContainerDeclInfo()
        {
        }

        public QBIdxObjCContainerDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo _internal)
        {
            DeclInfo = new QBIdxDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxDeclInfo>(_internal.declInfo));
            Marshal.FreeHGlobal(_internal.declInfo);
            Kind = (CXIdxObjCContainerKind)_internal.kind;
        }

        public QBIdxDeclInfo DeclInfo { get; set; }
        public CXIdxObjCContainerKind Kind { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo();
            refdeclInfo?.Dispose();
            if (DeclInfo != null)
            {
                var struct0 = DeclInfo.ToInternal();
                refdeclInfo = new StructReference(struct0);
                _internal.declInfo = refdeclInfo.Handle;
            }
            _internal.kind = (uint)Kind;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdeclInfo?.Dispose();
        }


        public static implicit operator QBIdxObjCContainerDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo q)
        {
            return new QBIdxObjCContainerDeclInfo(q);
        }

    }

    public partial class QBIdxBaseClassInfo : QBDisposableObject
    {
        private StructReference refbase;

        public QBIdxBaseClassInfo()
        {
        }

        public QBIdxBaseClassInfo(QuantumBinding.Clang.Interop.CXIdxBaseClassInfo _internal)
        {
            Base = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.@base));
            Marshal.FreeHGlobal(_internal.@base);
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
        }

        public QBIdxEntityInfo Base { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxBaseClassInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxBaseClassInfo();
            refbase?.Dispose();
            if (Base != null)
            {
                var struct0 = Base.ToInternal();
                refbase = new StructReference(struct0);
                _internal.@base = refbase.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refbase?.Dispose();
        }


        public static implicit operator QBIdxBaseClassInfo(QuantumBinding.Clang.Interop.CXIdxBaseClassInfo q)
        {
            return new QBIdxBaseClassInfo(q);
        }

    }

    public partial class QBIdxObjCProtocolRefInfo : QBDisposableObject
    {
        private StructReference refprotocol;

        public QBIdxObjCProtocolRefInfo()
        {
        }

        public QBIdxObjCProtocolRefInfo(QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo _internal)
        {
            Protocol = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.protocol));
            Marshal.FreeHGlobal(_internal.protocol);
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
        }

        public QBIdxEntityInfo Protocol { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo();
            refprotocol?.Dispose();
            if (Protocol != null)
            {
                var struct0 = Protocol.ToInternal();
                refprotocol = new StructReference(struct0);
                _internal.protocol = refprotocol.Handle;
            }
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refprotocol?.Dispose();
        }


        public static implicit operator QBIdxObjCProtocolRefInfo(QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo q)
        {
            return new QBIdxObjCProtocolRefInfo(q);
        }

    }

    public partial class QBIdxObjCProtocolRefListInfo : QBDisposableObject
    {
        private GCHandleReference refprotocols;

        public QBIdxObjCProtocolRefListInfo()
        {
        }

        public QBIdxObjCProtocolRefListInfo(QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo _internal)
        {
            Protocols = new QBIdxObjCProtocolRefInfo[_internal.numProtocols];
            var nativeTmpArray0 = new CXIdxObjCProtocolRefInfo[_internal.numProtocols];
            MarshalUtils.IntPtrToManagedArray<CXIdxObjCProtocolRefInfo>(_internal.protocols, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Protocols[i] = new QBIdxObjCProtocolRefInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.protocols);
            NumProtocols = _internal.numProtocols;
        }

        public QBIdxObjCProtocolRefInfo[] Protocols { get; set; }
        public uint NumProtocols { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo();
            refprotocols?.Dispose();
            if (Protocols != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefInfo[Protocols.Length];
                for (int i = 0; i < Protocols.Length; ++i)
                {
                    tmpArray0[i] = Protocols[i].ToInternal();
                }
                refprotocols = new GCHandleReference(tmpArray0);
                _internal.protocols = refprotocols.Handle;
            }
            _internal.numProtocols = NumProtocols;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refprotocols?.Dispose();
        }


        public static implicit operator QBIdxObjCProtocolRefListInfo(QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo q)
        {
            return new QBIdxObjCProtocolRefListInfo(q);
        }

    }

    public partial class QBIdxObjCInterfaceDeclInfo : QBDisposableObject
    {
        private StructReference refcontainerInfo;

        private StructReference refsuperInfo;

        private StructReference refprotocols;

        public QBIdxObjCInterfaceDeclInfo()
        {
        }

        public QBIdxObjCInterfaceDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo _internal)
        {
            ContainerInfo = new QBIdxObjCContainerDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo>(_internal.containerInfo));
            Marshal.FreeHGlobal(_internal.containerInfo);
            SuperInfo = new QBIdxBaseClassInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxBaseClassInfo>(_internal.superInfo));
            Marshal.FreeHGlobal(_internal.superInfo);
            Protocols = new QBIdxObjCProtocolRefListInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo>(_internal.protocols));
            Marshal.FreeHGlobal(_internal.protocols);
        }

        public QBIdxObjCContainerDeclInfo ContainerInfo { get; set; }
        public QBIdxBaseClassInfo SuperInfo { get; set; }
        public QBIdxObjCProtocolRefListInfo Protocols { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo();
            refcontainerInfo?.Dispose();
            if (ContainerInfo != null)
            {
                var struct0 = ContainerInfo.ToInternal();
                refcontainerInfo = new StructReference(struct0);
                _internal.containerInfo = refcontainerInfo.Handle;
            }
            refsuperInfo?.Dispose();
            if (SuperInfo != null)
            {
                var struct1 = SuperInfo.ToInternal();
                refsuperInfo = new StructReference(struct1);
                _internal.superInfo = refsuperInfo.Handle;
            }
            refprotocols?.Dispose();
            if (Protocols != null)
            {
                var struct2 = Protocols.ToInternal();
                refprotocols = new StructReference(struct2);
                _internal.protocols = refprotocols.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refcontainerInfo?.Dispose();
            refsuperInfo?.Dispose();
            refprotocols?.Dispose();
        }


        public static implicit operator QBIdxObjCInterfaceDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCInterfaceDeclInfo q)
        {
            return new QBIdxObjCInterfaceDeclInfo(q);
        }

    }

    public partial class QBIdxObjCCategoryDeclInfo : QBDisposableObject
    {
        private StructReference refcontainerInfo;

        private StructReference refobjcClass;

        private StructReference refprotocols;

        public QBIdxObjCCategoryDeclInfo()
        {
        }

        public QBIdxObjCCategoryDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo _internal)
        {
            ContainerInfo = new QBIdxObjCContainerDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCContainerDeclInfo>(_internal.containerInfo));
            Marshal.FreeHGlobal(_internal.containerInfo);
            ObjcClass = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.objcClass));
            Marshal.FreeHGlobal(_internal.objcClass);
            ClassCursor = new QBCursor(_internal.classCursor);
            ClassLoc = new QBIdxLoc(_internal.classLoc);
            Protocols = new QBIdxObjCProtocolRefListInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxObjCProtocolRefListInfo>(_internal.protocols));
            Marshal.FreeHGlobal(_internal.protocols);
        }

        public QBIdxObjCContainerDeclInfo ContainerInfo { get; set; }
        public QBIdxEntityInfo ObjcClass { get; set; }
        public QBCursor ClassCursor { get; set; }
        public QBIdxLoc ClassLoc { get; set; }
        public QBIdxObjCProtocolRefListInfo Protocols { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo();
            refcontainerInfo?.Dispose();
            if (ContainerInfo != null)
            {
                var struct0 = ContainerInfo.ToInternal();
                refcontainerInfo = new StructReference(struct0);
                _internal.containerInfo = refcontainerInfo.Handle;
            }
            refobjcClass?.Dispose();
            if (ObjcClass != null)
            {
                var struct1 = ObjcClass.ToInternal();
                refobjcClass = new StructReference(struct1);
                _internal.objcClass = refobjcClass.Handle;
            }
            if (ClassCursor != null)
            {
                _internal.classCursor = ClassCursor.ToInternal();
            }
            if (ClassLoc != null)
            {
                _internal.classLoc = ClassLoc.ToInternal();
            }
            refprotocols?.Dispose();
            if (Protocols != null)
            {
                var struct2 = Protocols.ToInternal();
                refprotocols = new StructReference(struct2);
                _internal.protocols = refprotocols.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refcontainerInfo?.Dispose();
            refobjcClass?.Dispose();
            refprotocols?.Dispose();
        }


        public static implicit operator QBIdxObjCCategoryDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCCategoryDeclInfo q)
        {
            return new QBIdxObjCCategoryDeclInfo(q);
        }

    }

    public partial class QBIdxObjCPropertyDeclInfo : QBDisposableObject
    {
        private StructReference refdeclInfo;

        private StructReference refgetter;

        private StructReference refsetter;

        public QBIdxObjCPropertyDeclInfo()
        {
        }

        public QBIdxObjCPropertyDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo _internal)
        {
            DeclInfo = new QBIdxDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxDeclInfo>(_internal.declInfo));
            Marshal.FreeHGlobal(_internal.declInfo);
            Getter = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.getter));
            Marshal.FreeHGlobal(_internal.getter);
            Setter = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.setter));
            Marshal.FreeHGlobal(_internal.setter);
        }

        public QBIdxDeclInfo DeclInfo { get; set; }
        public QBIdxEntityInfo Getter { get; set; }
        public QBIdxEntityInfo Setter { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo();
            refdeclInfo?.Dispose();
            if (DeclInfo != null)
            {
                var struct0 = DeclInfo.ToInternal();
                refdeclInfo = new StructReference(struct0);
                _internal.declInfo = refdeclInfo.Handle;
            }
            refgetter?.Dispose();
            if (Getter != null)
            {
                var struct1 = Getter.ToInternal();
                refgetter = new StructReference(struct1);
                _internal.getter = refgetter.Handle;
            }
            refsetter?.Dispose();
            if (Setter != null)
            {
                var struct2 = Setter.ToInternal();
                refsetter = new StructReference(struct2);
                _internal.setter = refsetter.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdeclInfo?.Dispose();
            refgetter?.Dispose();
            refsetter?.Dispose();
        }


        public static implicit operator QBIdxObjCPropertyDeclInfo(QuantumBinding.Clang.Interop.CXIdxObjCPropertyDeclInfo q)
        {
            return new QBIdxObjCPropertyDeclInfo(q);
        }

    }

    public partial class QBIdxCXXClassDeclInfo : QBDisposableObject
    {
        private StructReference refdeclInfo;

        private GCHandleReference refbases;

        public QBIdxCXXClassDeclInfo()
        {
        }

        public QBIdxCXXClassDeclInfo(QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo _internal)
        {
            DeclInfo = new QBIdxDeclInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxDeclInfo>(_internal.declInfo));
            Marshal.FreeHGlobal(_internal.declInfo);
            Bases = new QBIdxBaseClassInfo[_internal.numBases];
            var nativeTmpArray0 = new CXIdxBaseClassInfo[_internal.numBases];
            MarshalUtils.IntPtrToManagedArray<CXIdxBaseClassInfo>(_internal.bases, nativeTmpArray0);
            for (int i = 0; i < nativeTmpArray0.Length; ++i)
            {
                Bases[i] = new QBIdxBaseClassInfo(nativeTmpArray0[i]);
            }
            Marshal.FreeHGlobal(_internal.bases);
            NumBases = _internal.numBases;
        }

        public QBIdxDeclInfo DeclInfo { get; set; }
        public QBIdxBaseClassInfo[] Bases { get; set; }
        public uint NumBases { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo();
            refdeclInfo?.Dispose();
            if (DeclInfo != null)
            {
                var struct0 = DeclInfo.ToInternal();
                refdeclInfo = new StructReference(struct0);
                _internal.declInfo = refdeclInfo.Handle;
            }
            refbases?.Dispose();
            if (Bases != null)
            {
                var tmpArray0 = new QuantumBinding.Clang.Interop.CXIdxBaseClassInfo[Bases.Length];
                for (int i = 0; i < Bases.Length; ++i)
                {
                    tmpArray0[i] = Bases[i].ToInternal();
                }
                refbases = new GCHandleReference(tmpArray0);
                _internal.bases = refbases.Handle;
            }
            _internal.numBases = NumBases;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdeclInfo?.Dispose();
            refbases?.Dispose();
        }


        public static implicit operator QBIdxCXXClassDeclInfo(QuantumBinding.Clang.Interop.CXIdxCXXClassDeclInfo q)
        {
            return new QBIdxCXXClassDeclInfo(q);
        }

    }

    public partial class QBIdxEntityRefInfo : QBDisposableObject
    {
        private StructReference refreferencedEntity;

        private StructReference refparentEntity;

        private StructReference refcontainer;

        public QBIdxEntityRefInfo()
        {
        }

        public QBIdxEntityRefInfo(QuantumBinding.Clang.Interop.CXIdxEntityRefInfo _internal)
        {
            Kind = (CXIdxEntityRefKind)_internal.kind;
            Cursor = new QBCursor(_internal.cursor);
            Loc = new QBIdxLoc(_internal.loc);
            ReferencedEntity = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.referencedEntity));
            Marshal.FreeHGlobal(_internal.referencedEntity);
            ParentEntity = new QBIdxEntityInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxEntityInfo>(_internal.parentEntity));
            Marshal.FreeHGlobal(_internal.parentEntity);
            Container = new QBIdxContainerInfo(Marshal.PtrToStructure<QuantumBinding.Clang.Interop.CXIdxContainerInfo>(_internal.container));
            Marshal.FreeHGlobal(_internal.container);
            Role = (CXSymbolRole)_internal.role;
        }

        public CXIdxEntityRefKind Kind { get; set; }
        public QBCursor Cursor { get; set; }
        public QBIdxLoc Loc { get; set; }
        public QBIdxEntityInfo ReferencedEntity { get; set; }
        public QBIdxEntityInfo ParentEntity { get; set; }
        public QBIdxContainerInfo Container { get; set; }
        public CXSymbolRole Role { get; set; }

        public QuantumBinding.Clang.Interop.CXIdxEntityRefInfo ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXIdxEntityRefInfo();
            _internal.kind = (uint)Kind;
            if (Cursor != null)
            {
                _internal.cursor = Cursor.ToInternal();
            }
            if (Loc != null)
            {
                _internal.loc = Loc.ToInternal();
            }
            refreferencedEntity?.Dispose();
            if (ReferencedEntity != null)
            {
                var struct0 = ReferencedEntity.ToInternal();
                refreferencedEntity = new StructReference(struct0);
                _internal.referencedEntity = refreferencedEntity.Handle;
            }
            refparentEntity?.Dispose();
            if (ParentEntity != null)
            {
                var struct1 = ParentEntity.ToInternal();
                refparentEntity = new StructReference(struct1);
                _internal.parentEntity = refparentEntity.Handle;
            }
            refcontainer?.Dispose();
            if (Container != null)
            {
                var struct2 = Container.ToInternal();
                refcontainer = new StructReference(struct2);
                _internal.container = refcontainer.Handle;
            }
            _internal.role = (uint)Role;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refreferencedEntity?.Dispose();
            refparentEntity?.Dispose();
            refcontainer?.Dispose();
        }


        public static implicit operator QBIdxEntityRefInfo(QuantumBinding.Clang.Interop.CXIdxEntityRefInfo q)
        {
            return new QBIdxEntityRefInfo(q);
        }

    }

    public partial class IndexerCallbacks : QBDisposableObject
    {
        public IndexerCallbacks()
        {
        }

        public IndexerCallbacks(QuantumBinding.Clang.Interop.IndexerCallbacks _internal)
        {
            AbortQuery = _internal.abortQuery;
            Diagnostic = _internal.diagnostic;
            EnteredMainFile = _internal.enteredMainFile;
            PpIncludedFile = _internal.ppIncludedFile;
            ImportedASTFile = _internal.importedASTFile;
            StartedTranslationUnit = _internal.startedTranslationUnit;
            IndexDeclaration = _internal.indexDeclaration;
            IndexEntityReference = _internal.indexEntityReference;
        }

        public System.IntPtr AbortQuery { get; set; }
        public System.IntPtr Diagnostic { get; set; }
        public System.IntPtr EnteredMainFile { get; set; }
        public System.IntPtr PpIncludedFile { get; set; }
        public System.IntPtr ImportedASTFile { get; set; }
        public System.IntPtr StartedTranslationUnit { get; set; }
        public System.IntPtr IndexDeclaration { get; set; }
        public System.IntPtr IndexEntityReference { get; set; }

        public QuantumBinding.Clang.Interop.IndexerCallbacks ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.IndexerCallbacks();
            _internal.abortQuery = AbortQuery;
            _internal.diagnostic = Diagnostic;
            _internal.enteredMainFile = EnteredMainFile;
            _internal.ppIncludedFile = PpIncludedFile;
            _internal.importedASTFile = ImportedASTFile;
            _internal.startedTranslationUnit = StartedTranslationUnit;
            _internal.indexDeclaration = IndexDeclaration;
            _internal.indexEntityReference = IndexEntityReference;
            return _internal;
        }

        public static implicit operator IndexerCallbacks(QuantumBinding.Clang.Interop.IndexerCallbacks i)
        {
            return new IndexerCallbacks(i);
        }

    }

    public partial class QBComment : QBDisposableObject
    {
        public QBComment()
        {
        }

        public QBComment(QuantumBinding.Clang.Interop.CXComment _internal)
        {
            ASTNode = _internal.ASTNode;
            TranslationUnit = new QBTranslationUnit(_internal.TranslationUnit);
        }

        public System.IntPtr ASTNode { get; set; }
        public QBTranslationUnit TranslationUnit { get; set; }
        ///<summary>
        /// Returns text of the specified word-like argument.
        ///</summary>
        public QBString BlockCommandComment_getArgText(uint ArgIdx)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_BlockCommandComment_getArgText(ToInternal(), ArgIdx);
        }

        ///<summary>
        /// Returns name of the block command.
        ///</summary>
        public QBString BlockCommandComment_getCommandName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_BlockCommandComment_getCommandName(ToInternal());
        }

        ///<summary>
        /// Returns number of word-like arguments.
        ///</summary>
        public uint BlockCommandComment_getNumArgs()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_BlockCommandComment_getNumArgs(ToInternal());
        }

        ///<summary>
        /// Returns paragraph argument of the block command.
        ///</summary>
        public QBComment BlockCommandComment_getParagraph()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_BlockCommandComment_getParagraph(ToInternal());
        }

        ///<summary>
        /// Returns the specified child of the AST node.
        ///</summary>
        public QBComment Comment_getChild(uint ChildIdx)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Comment_getChild(ToInternal(), ChildIdx);
        }

        ///<summary>
        /// Returns the type of the AST node.
        ///</summary>
        public CXCommentKind Comment_getKind()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Comment_getKind(ToInternal());
        }

        ///<summary>
        /// Returns number of children of the AST node.
        ///</summary>
        public uint Comment_getNumChildren()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Comment_getNumChildren(ToInternal());
        }

        ///<summary>
        /// A CXComment_Paragraph node is considered whitespace if it contains only CXComment_Text nodes that are empty or whitespace.
        ///</summary>
        public uint Comment_isWhitespace()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_Comment_isWhitespace(ToInternal());
        }

        ///<summary>
        /// Convert a given full parsed comment to an HTML fragment.
        ///</summary>
        public QBString FullComment_getAsHTML()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_FullComment_getAsHTML(ToInternal());
        }

        ///<summary>
        /// Convert a given full parsed comment to an XML document.
        ///</summary>
        public QBString FullComment_getAsXML()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_FullComment_getAsXML(ToInternal());
        }

        ///<summary>
        /// Returns name of the specified attribute.
        ///</summary>
        public QBString HTMLStartTag_getAttrName(uint AttrIdx)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_HTMLStartTag_getAttrName(ToInternal(), AttrIdx);
        }

        ///<summary>
        /// Returns value of the specified attribute.
        ///</summary>
        public QBString HTMLStartTag_getAttrValue(uint AttrIdx)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_HTMLStartTag_getAttrValue(ToInternal(), AttrIdx);
        }

        ///<summary>
        /// Returns number of attributes (name-value pairs) attached to the start tag.
        ///</summary>
        public uint HTMLStartTag_getNumAttrs()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_HTMLStartTag_getNumAttrs(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if tag is self-closing (for example, <br />).
        ///</summary>
        public uint HTMLStartTagComment_isSelfClosing()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_HTMLStartTagComment_isSelfClosing(ToInternal());
        }

        ///<summary>
        /// Convert an HTML tag AST node to string.
        ///</summary>
        public QBString HTMLTagComment_getAsString()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_HTMLTagComment_getAsString(ToInternal());
        }

        ///<summary>
        /// Returns HTML tag name.
        ///</summary>
        public QBString HTMLTagComment_getTagName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_HTMLTagComment_getTagName(ToInternal());
        }

        ///<summary>
        /// Returns text of the specified argument.
        ///</summary>
        public QBString InlineCommandComment_getArgText(uint ArgIdx)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_InlineCommandComment_getArgText(ToInternal(), ArgIdx);
        }

        ///<summary>
        /// Returns name of the inline command.
        ///</summary>
        public QBString InlineCommandComment_getCommandName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_InlineCommandComment_getCommandName(ToInternal());
        }

        ///<summary>
        /// Returns number of command arguments.
        ///</summary>
        public uint InlineCommandComment_getNumArgs()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_InlineCommandComment_getNumArgs(ToInternal());
        }

        ///<summary>
        /// Returns the most appropriate rendering mode, chosen on command semantics in Doxygen.
        ///</summary>
        public CXCommentInlineCommandRenderKind InlineCommandComment_getRenderKind()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_InlineCommandComment_getRenderKind(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if Comment is inline content and has a newline immediately following it in the comment text. Newlines between paragraphs do not count.
        ///</summary>
        public uint InlineContentComment_hasTrailingNewline()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_InlineContentComment_hasTrailingNewline(ToInternal());
        }

        ///<summary>
        /// Returns parameter passing direction.
        ///</summary>
        public CXCommentParamPassDirection ParamCommandComment_getDirection()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_ParamCommandComment_getDirection(ToInternal());
        }

        ///<summary>
        /// Returns zero-based parameter index in function prototype.
        ///</summary>
        public uint ParamCommandComment_getParamIndex()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_ParamCommandComment_getParamIndex(ToInternal());
        }

        ///<summary>
        /// Returns parameter name.
        ///</summary>
        public QBString ParamCommandComment_getParamName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_ParamCommandComment_getParamName(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if parameter passing direction was specified explicitly in the comment.
        ///</summary>
        public uint ParamCommandComment_isDirectionExplicit()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_ParamCommandComment_isDirectionExplicit(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if the parameter that this AST node represents was found in the function prototype and clang_ParamCommandComment_getParamIndex function will return a meaningful value.
        ///</summary>
        public uint ParamCommandComment_isParamIndexValid()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_ParamCommandComment_isParamIndexValid(ToInternal());
        }

        ///<summary>
        /// Returns text contained in the AST node.
        ///</summary>
        public QBString TextComment_getText()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_TextComment_getText(ToInternal());
        }

        ///<summary>
        /// Returns zero-based nesting depth of this parameter in the template parameter list.
        ///</summary>
        public uint TParamCommandComment_getDepth()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_TParamCommandComment_getDepth(ToInternal());
        }

        ///<summary>
        /// Returns zero-based parameter index in the template parameter list at a given nesting depth.
        ///</summary>
        public uint TParamCommandComment_getIndex(uint Depth)
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_TParamCommandComment_getIndex(ToInternal(), Depth);
        }

        ///<summary>
        /// Returns template parameter name.
        ///</summary>
        public QBString TParamCommandComment_getParamName()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_TParamCommandComment_getParamName(ToInternal());
        }

        ///<summary>
        /// Returns non-zero if the parameter that this AST node represents was found in the template parameter list and clang_TParamCommandComment_getDepth and clang_TParamCommandComment_getIndex functions will return a meaningful value.
        ///</summary>
        public uint TParamCommandComment_isParamPositionValid()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_TParamCommandComment_isParamPositionValid(ToInternal());
        }

        ///<summary>
        /// Returns text contained in the AST node.
        ///</summary>
        public QBString VerbatimBlockLineComment_getText()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_VerbatimBlockLineComment_getText(ToInternal());
        }

        ///<summary>
        /// Returns text contained in the AST node.
        ///</summary>
        public QBString VerbatimLineComment_getText()
        {
            return QuantumBinding.Clang.Interop.ClangInterop.clang_VerbatimLineComment_getText(ToInternal());
        }


        public QuantumBinding.Clang.Interop.CXComment ToInternal()
        {
            var _internal = new QuantumBinding.Clang.Interop.CXComment();
            _internal.ASTNode = ASTNode;
            _internal.TranslationUnit = TranslationUnit;
            return _internal;
        }

        public static implicit operator QBComment(QuantumBinding.Clang.Interop.CXComment q)
        {
            return new QBComment(q);
        }

    }


}
