// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace QuantumBinding.Clang
{
    using System;
    using System.Runtime.InteropServices;

    public static class MarshalUtils
    {
        public static void IntPtrToManagedArray<T>(IntPtr unmanagedArray, T[] managedArray)
        {
            var size = Marshal.SizeOf(typeof(T));
            for (int i = 0; i < managedArray.Length; i++)
            {
                IntPtr ins = new IntPtr(unmanagedArray.ToInt64() + i * size);
                managedArray[i] = Marshal.PtrToStructure<T>(ins);
            }
        }

        public static string[] IntPtrToStringArray(IntPtr unmanagedArray, uint count, bool isUnicode = false)
        {
            var array = new string[count];
            for (int i = 0; i < count; ++i)
            {
                IntPtr strPtr = new IntPtr(unmanagedArray.ToInt64() + i * IntPtr.Size);
                if (isUnicode)
                {
                    array[i] = Marshal.PtrToStringUni(strPtr);
                }
                else
                {
                    array[i] = Marshal.PtrToStringAnsi(strPtr);
                }
            }
            return array;
        }

        public static IntPtr MarshalStructToPtr<T>(T @struct)
        {
            var ptr = Marshal.AllocHGlobal(Marshal.SizeOf(@struct));
            Marshal.StructureToPtr(@struct, ptr, false);
            return ptr;
        }
    }

    public class ConstCharPtrMarshaler : ICustomMarshaler
    {
        private static readonly ConstCharPtrMarshaler instance = new ConstCharPtrMarshaler();

        public static ICustomMarshaler GetInstance(string cookie)
        {
            return instance;
        }

        public object MarshalNativeToManaged(IntPtr pNativeData)
        {
            return Marshal.PtrToStringAnsi(pNativeData);
        }

        public IntPtr MarshalManagedToNative(object managedObj)
        {
            var str = (string)managedObj;
            return Marshal.StringToHGlobalAnsi(str);
        }

        public void CleanUpNativeData(IntPtr pNativeData)
        {
        }

        public void CleanUpManagedData(object managedObj)
        {
        }

        public int GetNativeDataSize()
        {
            return IntPtr.Size;
        }
    }

    public class DisposableObject: IDisposable
    {
        public bool IsDisposed { get; private set; }

        protected virtual void Dispose(bool disposeManaged)
        {
            if (IsDisposed)
            {
                return;
            }

            if (disposeManaged)
            {
                ManagedDisposeOverride();
            }

            UnmanagedDisposeOverride();

            IsDisposed = true;
        }

        protected virtual void ManagedDisposeOverride() { }

        protected virtual void UnmanagedDisposeOverride() { }

        ~DisposableObject()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }

    public class GCHandleReference : DisposableObject
    {
        bool isInitialized;
        GCHandle reference;

        public IntPtr Handle => reference.AddrOfPinnedObject();

        public GCHandleReference(object obj)
        {
            if (obj != null)
            {
                isInitialized = true;
                reference = GCHandle.Alloc(obj, GCHandleType.Pinned);
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            base.UnmanagedDisposeOverride();
            if (isInitialized)
            {
                reference.Free();
            }
        }
    }

    public class StringReference : DisposableObject
    {
        bool isInitialized;
        IntPtr reference;

        public IntPtr Handle => reference;

        public StringReference(string str, bool isUnicode)
        {
            if (string.IsNullOrEmpty(str))
            {
                return;
            }

            if (!isUnicode)
            {
                reference = Marshal.StringToHGlobalAnsi(str);
            }
            else
            {
                reference = Marshal.StringToHGlobalUni(str);
            }
            isInitialized = true;
        }

        protected override void UnmanagedDisposeOverride()
        {
            base.UnmanagedDisposeOverride();
            if (isInitialized)
            {
                Marshal.FreeHGlobal(reference);
            }
        }
    }

    public class StringArrayReference : DisposableObject
    {
        IntPtr[] stringReferences;

        GCHandle reference;

        public IntPtr Handle => reference.AddrOfPinnedObject();

        public StringArrayReference(in string[] strArray, bool isUnicode)
        {
            if (strArray != null && strArray.Length > 0)
            {
                stringReferences = new IntPtr[strArray.Length];
                int cnt = 0;
                foreach (var str in strArray)
                {
                    if (!isUnicode)
                    {
                        stringReferences[cnt++] = Marshal.StringToHGlobalAnsi(str);
                    }
                    else
                    {
                        stringReferences[cnt++] = Marshal.StringToHGlobalUni(str);
                    }
                }
                reference = GCHandle.Alloc(stringReferences, GCHandleType.Pinned);
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            base.UnmanagedDisposeOverride();
            if (stringReferences != null)
            {
                foreach (var ptr in stringReferences)
                {
                    Marshal.FreeHGlobal(ptr);
                }
                reference.Free();
            }
        }
    }

    public class StructReference : DisposableObject
    {
        bool isInitialized;
        IntPtr reference;

        public IntPtr Handle => reference;

        public StructReference(object obj)
        {
            if (obj != null)
            {
                isInitialized = true;
                reference = MarshalUtils.MarshalStructToPtr(obj);
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            base.UnmanagedDisposeOverride();
            if (isInitialized)
            {
                Marshal.FreeHGlobal(reference);
            }
        }
    }
}
